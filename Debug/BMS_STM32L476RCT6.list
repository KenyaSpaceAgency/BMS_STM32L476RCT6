
BMS_STM32L476RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001424  08010750  08010750  00011750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b74  08011b74  0001321c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011b74  08011b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b7c  08011b7c  0001321c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b7c  08011b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011b80  08011b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  08011b84  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  2000021c  08011da0  0001321c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000834  08011da0  00013834  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001321c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020384  00000000  00000000  0001324c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ba  00000000  00000000  000335d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d38  00000000  00000000  00037890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001705  00000000  00000000  000395c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d4d7  00000000  00000000  0003accd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002595b  00000000  00000000  000681a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114ed9  00000000  00000000  0008daff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a29d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092d4  00000000  00000000  001a2a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001abcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010734 	.word	0x08010734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	08010734 	.word	0x08010734

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <BQ76920_Init>:
/**
  * @brief  Initializes the BQ76920 IC
  * @param  hi2c: Pointer to the I2C handle
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_Init(I2C_HandleTypeDef *hi2c) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	6078      	str	r0, [r7, #4]
    uint8_t sys_stat = 0;  // Status register value
 8001028:	2300      	movs	r3, #0
 800102a:	737b      	strb	r3, [r7, #13]
    // Select the correct I2C address for the BQ76920 IC
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <BQ76920_Init+0x44>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <BQ76920_Init+0x18>
 8001034:	2310      	movs	r3, #16
 8001036:	e000      	b.n	800103a <BQ76920_Init+0x1a>
 8001038:	2312      	movs	r3, #18
 800103a:	81fb      	strh	r3, [r7, #14]
    // Read the SYS_STAT register to verify communication
    return HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, &sys_stat, 1, HAL_MAX_DELAY);
 800103c:	89f9      	ldrh	r1, [r7, #14]
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	2301      	movs	r3, #1
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f107 030d 	add.w	r3, r7, #13
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2200      	movs	r2, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f006 fc7a 	bl	800794c <HAL_I2C_Mem_Read>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000029c 	.word	0x2000029c

08001068 <BQ76920_ReadVoltages>:
  *         - Group 1 (Cell 1): VC1 - VC0 (~3600-4200 mV)
  *         - Group 2 (Cell 2): VC2 - VC1 (~3600-4200 mV)
  *         - Group 3 (Cell 3): VC3 - VC2 (~3600-4200 mV)
  *         - Group 4 (Cell 4): VC5 - VC4 (~3600-4200 mV)
  */
HAL_StatusTypeDef BQ76920_ReadVoltages(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset) {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b091      	sub	sp, #68	@ 0x44
 800106c:	af04      	add	r7, sp, #16
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	71fb      	strb	r3, [r7, #7]
    uint8_t data[10]; // Read 10 bytes for 5 cells
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4a5d      	ldr	r2, [pc, #372]	@ (80011f0 <BQ76920_ReadVoltages+0x188>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <BQ76920_ReadVoltages+0x1a>
 800107e:	2310      	movs	r3, #16
 8001080:	e000      	b.n	8001084 <BQ76920_ReadVoltages+0x1c>
 8001082:	2312      	movs	r3, #18
 8001084:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, VC1_HI_REG, 1, data, 10, HAL_MAX_DELAY);
 8001086:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	230a      	movs	r3, #10
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	220c      	movs	r2, #12
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f006 fc55 	bl	800794c <HAL_I2C_Mem_Read>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (status != HAL_OK) return status;
 80010a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <BQ76920_ReadVoltages+0x4e>
 80010b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80010b4:	e091      	b.n	80011da <BQ76920_ReadVoltages+0x172>

    // Raw voltages (in ADC counts)
    uint16_t vc[5];
    for (uint8_t i = 0; i < 5; i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80010bc:	e021      	b.n	8001102 <BQ76920_ReadVoltages+0x9a>
        vc[i] = (data[i * 2] << 8) | data[i * 2 + 1];
 80010be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	3330      	adds	r3, #48	@ 0x30
 80010c6:	443b      	add	r3, r7
 80010c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	3301      	adds	r3, #1
 80010da:	3330      	adds	r3, #48	@ 0x30
 80010dc:	443b      	add	r3, r7
 80010de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010ec:	b292      	uxth	r2, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	3330      	adds	r3, #48	@ 0x30
 80010f2:	443b      	add	r3, r7
 80010f4:	f823 2c1c 	strh.w	r2, [r3, #-28]
    for (uint8_t i = 0; i < 5; i++) {
 80010f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010fc:	3301      	adds	r3, #1
 80010fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001102:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001106:	2b04      	cmp	r3, #4
 8001108:	d9d9      	bls.n	80010be <BQ76920_ReadVoltages+0x56>
    }

    // Convert to millivolts and assign to group voltages
    group_voltages[offset + 0] = (vc[1] - vc[0]) * 0.382; // Cell 1: VC1 - VC0 (~3600-4200 mV)
 800110a:	8afb      	ldrh	r3, [r7, #22]
 800110c:	461a      	mov	r2, r3
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa06 	bl	8000524 <__aeabi_i2d>
 8001118:	a333      	add	r3, pc, #204	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa6b 	bl	80005f8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	18d4      	adds	r4, r2, r3
 8001132:	f7ff fd39 	bl	8000ba8 <__aeabi_d2uiz>
 8001136:	4603      	mov	r3, r0
 8001138:	b29b      	uxth	r3, r3
 800113a:	8023      	strh	r3, [r4, #0]
    group_voltages[offset + 1] = (vc[2] - vc[1]) * 0.382; // Cell 2: VC2 - VC1 (~3600-4200 mV)
 800113c:	8b3b      	ldrh	r3, [r7, #24]
 800113e:	461a      	mov	r2, r3
 8001140:	8afb      	ldrh	r3, [r7, #22]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9ed 	bl	8000524 <__aeabi_i2d>
 800114a:	a327      	add	r3, pc, #156	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff fa52 	bl	80005f8 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3301      	adds	r3, #1
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	18d4      	adds	r4, r2, r3
 8001166:	f7ff fd1f 	bl	8000ba8 <__aeabi_d2uiz>
 800116a:	4603      	mov	r3, r0
 800116c:	b29b      	uxth	r3, r3
 800116e:	8023      	strh	r3, [r4, #0]
    group_voltages[offset + 2] = (vc[3] - vc[2]) * 0.382; // Cell 3: VC3 - VC2 (~3600-4200 mV)
 8001170:	8b7b      	ldrh	r3, [r7, #26]
 8001172:	461a      	mov	r2, r3
 8001174:	8b3b      	ldrh	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9d3 	bl	8000524 <__aeabi_i2d>
 800117e:	a31a      	add	r3, pc, #104	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa38 	bl	80005f8 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	3302      	adds	r3, #2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	18d4      	adds	r4, r2, r3
 800119a:	f7ff fd05 	bl	8000ba8 <__aeabi_d2uiz>
 800119e:	4603      	mov	r3, r0
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	8023      	strh	r3, [r4, #0]
    group_voltages[offset + 3] = (vc[4] - vc[3]) * 0.382; // Cell 4: VC5 - VC4 (~3600-4200 mV)
 80011a4:	8bbb      	ldrh	r3, [r7, #28]
 80011a6:	461a      	mov	r2, r3
 80011a8:	8b7b      	ldrh	r3, [r7, #26]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9b9 	bl	8000524 <__aeabi_i2d>
 80011b2:	a30d      	add	r3, pc, #52	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	3303      	adds	r3, #3
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	18d4      	adds	r4, r2, r3
 80011ce:	f7ff fceb 	bl	8000ba8 <__aeabi_d2uiz>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	8023      	strh	r3, [r4, #0]

    return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3734      	adds	r7, #52	@ 0x34
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	20c49ba6 	.word	0x20c49ba6
 80011ec:	3fd872b0 	.word	0x3fd872b0
 80011f0:	2000029c 	.word	0x2000029c
 80011f4:	00000000 	.word	0x00000000

080011f8 <BQ76920_ReadCurrent>:
  * @brief  Reads pack current from the BQ76920
  * @param  hi2c: Pointer to the I2C handle
  * @param  current: Pointer to store the current (in mA)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_ReadCurrent(I2C_HandleTypeDef *hi2c, int16_t *current) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af04      	add	r7, sp, #16
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
    uint8_t data[2];  // Buffer for 2 bytes
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a22      	ldr	r2, [pc, #136]	@ (8001290 <BQ76920_ReadCurrent+0x98>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <BQ76920_ReadCurrent+0x16>
 800120a:	2310      	movs	r3, #16
 800120c:	e000      	b.n	8001210 <BQ76920_ReadCurrent+0x18>
 800120e:	2312      	movs	r3, #18
 8001210:	81fb      	strh	r3, [r7, #14]
    // Read the coulomb counter register
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, CC_HI_REG, 1, data, 2, HAL_MAX_DELAY);
 8001212:	89f9      	ldrh	r1, [r7, #14]
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	2302      	movs	r3, #2
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	2232      	movs	r2, #50	@ 0x32
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f006 fb8f 	bl	800794c <HAL_I2C_Mem_Read>
 800122e:	4603      	mov	r3, r0
 8001230:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8001232:	7b7b      	ldrb	r3, [r7, #13]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <BQ76920_ReadCurrent+0x44>
 8001238:	7b7b      	ldrb	r3, [r7, #13]
 800123a:	e01f      	b.n	800127c <BQ76920_ReadCurrent+0x84>

    // Convert to milliamps
    *current = (int16_t)((data[0] << 8) | data[1]);  // Combine 2 bytes
 800123c:	7a3b      	ldrb	r3, [r7, #8]
 800123e:	b21b      	sxth	r3, r3
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	7a7b      	ldrb	r3, [r7, #9]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21a      	sxth	r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	801a      	strh	r2, [r3, #0]
    *current *= 8.44;  // Scale to milliamps
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f964 	bl	8000524 <__aeabi_i2d>
 800125c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001288 <BQ76920_ReadCurrent+0x90>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f9c9 	bl	80005f8 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fc73 	bl	8000b58 <__aeabi_d2iz>
 8001272:	4603      	mov	r3, r0
 8001274:	b21a      	sxth	r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	f3af 8000 	nop.w
 8001288:	ae147ae1 	.word	0xae147ae1
 800128c:	4020e147 	.word	0x4020e147
 8001290:	2000029c 	.word	0x2000029c

08001294 <BQ76920_BalanceCells>:
  * @param  balancing_mask: Pointer to store the balancing bitmask
  * @retval HAL_StatusTypeDef
  * @note   Balances Cells 1, 2, 3, and 4. CELLBAL1_REG bits:
  *         Bit 0=Cell 1, Bit 1=Cell 2, Bit 2=Cell 3, Bit 3=Cell 4
  */
HAL_StatusTypeDef BQ76920_BalanceCells(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset, uint8_t *balancing_mask) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af04      	add	r7, sp, #16
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	4613      	mov	r3, r2
 80012a2:	71fb      	strb	r3, [r7, #7]
    *balancing_mask = 0;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
    // Find minimum voltage among all cells (Cells 1, 2, 3, 4)
    uint16_t min_voltage = group_voltages[offset + 0]; // Start with Cell 1
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	4413      	add	r3, r2
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 1; i < NUM_GROUPS_PER_IC; i++) { // Check Cells 2, 3, 4
 80012b6:	2301      	movs	r3, #1
 80012b8:	757b      	strb	r3, [r7, #21]
 80012ba:	e01d      	b.n	80012f8 <BQ76920_BalanceCells+0x64>
        if (group_voltages[offset + i] < min_voltage && group_voltages[offset + i] > 0) {
 80012bc:	79fa      	ldrb	r2, [r7, #7]
 80012be:	7d7b      	ldrb	r3, [r7, #21]
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	8afa      	ldrh	r2, [r7, #22]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d910      	bls.n	80012f2 <BQ76920_BalanceCells+0x5e>
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	7d7b      	ldrb	r3, [r7, #21]
 80012d4:	4413      	add	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	4413      	add	r3, r2
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <BQ76920_BalanceCells+0x5e>
            min_voltage = group_voltages[offset + i];
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	7d7b      	ldrb	r3, [r7, #21]
 80012e6:	4413      	add	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 1; i < NUM_GROUPS_PER_IC; i++) { // Check Cells 2, 3, 4
 80012f2:	7d7b      	ldrb	r3, [r7, #21]
 80012f4:	3301      	adds	r3, #1
 80012f6:	757b      	strb	r3, [r7, #21]
 80012f8:	7d7b      	ldrb	r3, [r7, #21]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d9de      	bls.n	80012bc <BQ76920_BalanceCells+0x28>
        }
    }

    // Balance cells that are 50 mV above the minimum
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { // Check Cells 1, 2, 3, 4
 80012fe:	2300      	movs	r3, #0
 8001300:	753b      	strb	r3, [r7, #20]
 8001302:	e024      	b.n	800134e <BQ76920_BalanceCells+0xba>
        if (group_voltages[offset + i] > min_voltage + 50 && group_voltages[offset + i] > 0) {
 8001304:	79fa      	ldrb	r2, [r7, #7]
 8001306:	7d3b      	ldrb	r3, [r7, #20]
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	4413      	add	r3, r2
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	8afb      	ldrh	r3, [r7, #22]
 8001316:	3332      	adds	r3, #50	@ 0x32
 8001318:	429a      	cmp	r2, r3
 800131a:	dd15      	ble.n	8001348 <BQ76920_BalanceCells+0xb4>
 800131c:	79fa      	ldrb	r2, [r7, #7]
 800131e:	7d3b      	ldrb	r3, [r7, #20]
 8001320:	4413      	add	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	4413      	add	r3, r2
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00c      	beq.n	8001348 <BQ76920_BalanceCells+0xb4>
            *balancing_mask |= (1 << i); // Bit 0=Cell 1, Bit 1=Cell 2, Bit 2=Cell 3, Bit 3=Cell 4
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25a      	sxtb	r2, r3
 8001334:	7d3b      	ldrb	r3, [r7, #20]
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b25b      	sxtb	r3, r3
 8001342:	b2da      	uxtb	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { // Check Cells 1, 2, 3, 4
 8001348:	7d3b      	ldrb	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	753b      	strb	r3, [r7, #20]
 800134e:	7d3b      	ldrb	r3, [r7, #20]
 8001350:	2b03      	cmp	r3, #3
 8001352:	d9d7      	bls.n	8001304 <BQ76920_BalanceCells+0x70>
        }
    }

    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a0c      	ldr	r2, [pc, #48]	@ (8001388 <BQ76920_BalanceCells+0xf4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d101      	bne.n	8001360 <BQ76920_BalanceCells+0xcc>
 800135c:	2310      	movs	r3, #16
 800135e:	e000      	b.n	8001362 <BQ76920_BalanceCells+0xce>
 8001360:	2312      	movs	r3, #18
 8001362:	827b      	strh	r3, [r7, #18]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, CELLBAL1_REG, 1, balancing_mask, 1, HAL_MAX_DELAY);
 8001364:	8a79      	ldrh	r1, [r7, #18]
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	2301      	movs	r3, #1
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	2201      	movs	r2, #1
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f006 f9d3 	bl	8007724 <HAL_I2C_Mem_Write>
 800137e:	4603      	mov	r3, r0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000029c 	.word	0x2000029c

0800138c <BQ76920_SetChargeEnable>:
  * @param  hi2c: Pointer to the I2C handle
  * @param  charge_enable: 1 to enable charging, 0 to disable
  * @param  discharge_enable: 1 to enable discharging, 0 to disable
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_SetChargeEnable(I2C_HandleTypeDef *hi2c, uint8_t charge_enable, uint8_t discharge_enable) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af04      	add	r7, sp, #16
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
 8001398:	4613      	mov	r3, r2
 800139a:	70bb      	strb	r3, [r7, #2]
    uint8_t sys_ctrl2 = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	733b      	strb	r3, [r7, #12]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a25      	ldr	r2, [pc, #148]	@ (8001438 <BQ76920_SetChargeEnable+0xac>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d101      	bne.n	80013ac <BQ76920_SetChargeEnable+0x20>
 80013a8:	2310      	movs	r3, #16
 80013aa:	e000      	b.n	80013ae <BQ76920_SetChargeEnable+0x22>
 80013ac:	2312      	movs	r3, #18
 80013ae:	81fb      	strh	r3, [r7, #14]

    // Read the current SYS_CTRL2 register value
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_CTRL2_REG, 1, &sys_ctrl2, 1, HAL_MAX_DELAY);
 80013b0:	89f9      	ldrh	r1, [r7, #14]
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	2301      	movs	r3, #1
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	2205      	movs	r2, #5
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f006 fac0 	bl	800794c <HAL_I2C_Mem_Read>
 80013cc:	4603      	mov	r3, r0
 80013ce:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 80013d0:	7b7b      	ldrb	r3, [r7, #13]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <BQ76920_SetChargeEnable+0x4e>
 80013d6:	7b7b      	ldrb	r3, [r7, #13]
 80013d8:	e02a      	b.n	8001430 <BQ76920_SetChargeEnable+0xa4>

    // Modify CHG_ON (bit 0) and DSG_ON (bit 1)
    if (charge_enable) {
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <BQ76920_SetChargeEnable+0x60>
        sys_ctrl2 |= (1 << 0); // Set CHG_ON
 80013e0:	7b3b      	ldrb	r3, [r7, #12]
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	733b      	strb	r3, [r7, #12]
 80013ea:	e004      	b.n	80013f6 <BQ76920_SetChargeEnable+0x6a>
    } else {
        sys_ctrl2 &= ~(1 << 0); // Clear CHG_ON
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	733b      	strb	r3, [r7, #12]
    }
    if (discharge_enable) {
 80013f6:	78bb      	ldrb	r3, [r7, #2]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <BQ76920_SetChargeEnable+0x7c>
        sys_ctrl2 |= (1 << 1); // Set DSG_ON
 80013fc:	7b3b      	ldrb	r3, [r7, #12]
 80013fe:	f043 0302 	orr.w	r3, r3, #2
 8001402:	b2db      	uxtb	r3, r3
 8001404:	733b      	strb	r3, [r7, #12]
 8001406:	e004      	b.n	8001412 <BQ76920_SetChargeEnable+0x86>
    } else {
        sys_ctrl2 &= ~(1 << 1); // Clear DSG_ON
 8001408:	7b3b      	ldrb	r3, [r7, #12]
 800140a:	f023 0302 	bic.w	r3, r3, #2
 800140e:	b2db      	uxtb	r3, r3
 8001410:	733b      	strb	r3, [r7, #12]
    }

    // Write the updated value back to SYS_CTRL2
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, SYS_CTRL2_REG, 1, &sys_ctrl2, 1, HAL_MAX_DELAY);
 8001412:	89f9      	ldrh	r1, [r7, #14]
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	2301      	movs	r3, #1
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2301      	movs	r3, #1
 8001426:	2205      	movs	r2, #5
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f006 f97b 	bl	8007724 <HAL_I2C_Mem_Write>
 800142e:	4603      	mov	r3, r0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000029c 	.word	0x2000029c

0800143c <BQ76920_ReadStatus>:
  * @brief  Reads the status register (SYS_STAT_REG) of the BQ76920
  * @param  hi2c: Pointer to the I2C handle
  * @param  status: Pointer to store the read status
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_ReadStatus(I2C_HandleTypeDef *hi2c, uint8_t *status) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af04      	add	r7, sp, #16
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <BQ76920_ReadStatus+0x40>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <BQ76920_ReadStatus+0x16>
 800144e:	2310      	movs	r3, #16
 8001450:	e000      	b.n	8001454 <BQ76920_ReadStatus+0x18>
 8001452:	2312      	movs	r3, #18
 8001454:	81fb      	strh	r3, [r7, #14]
    return HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, status, 1, HAL_MAX_DELAY);
 8001456:	89f9      	ldrh	r1, [r7, #14]
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	9302      	str	r3, [sp, #8]
 800145e:	2301      	movs	r3, #1
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	2200      	movs	r2, #0
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f006 fa6e 	bl	800794c <HAL_I2C_Mem_Read>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000029c 	.word	0x2000029c

08001480 <BQ76920_ClearStatus>:
  * @brief  Clears specific status flags in the SYS_STAT_REG register
  * @param  hi2c: Pointer to the I2C handle
  * @param  flags_to_clear: The status flags to be cleared
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_ClearStatus(I2C_HandleTypeDef *hi2c, uint8_t flags_to_clear) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af04      	add	r7, sp, #16
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a0c      	ldr	r2, [pc, #48]	@ (80014c0 <BQ76920_ClearStatus+0x40>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d101      	bne.n	8001498 <BQ76920_ClearStatus+0x18>
 8001494:	2310      	movs	r3, #16
 8001496:	e000      	b.n	800149a <BQ76920_ClearStatus+0x1a>
 8001498:	2312      	movs	r3, #18
 800149a:	81fb      	strh	r3, [r7, #14]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, SYS_STAT_REG, 1, &flags_to_clear, 1, HAL_MAX_DELAY);
 800149c:	89f9      	ldrh	r1, [r7, #14]
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	2301      	movs	r3, #1
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	1cfb      	adds	r3, r7, #3
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	2200      	movs	r2, #0
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f006 f937 	bl	8007724 <HAL_I2C_Mem_Write>
 80014b6:	4603      	mov	r3, r0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000029c 	.word	0x2000029c

080014c4 <BQ76920_CheckRedundancy>:
  * @param  current_2: Current from the second BQ76920
  * @param  discrepancy_flag: Pointer to store discrepancy flag (1 = discrepancy detected)
  * @retval None
  * @note   Compares all 4 cells (Cells 1, 2, 3, 4)
  */
void BQ76920_CheckRedundancy(uint16_t *group_voltages_1, uint16_t *group_voltages_2, int16_t current_1, int16_t current_2, uint8_t *discrepancy_flag) {
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	460b      	mov	r3, r1
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80bb      	strh	r3, [r7, #4]
    *discrepancy_flag = 0;
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]

    // Compare group voltages for Cells 1, 2, 3, 4
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	75fb      	strb	r3, [r7, #23]
 80014e4:	e017      	b.n	8001516 <BQ76920_CheckRedundancy+0x52>
        if (abs(group_voltages_1[i] - group_voltages_2[i]) > 100) { // 100 mV threshold
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	4413      	add	r3, r2
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	1acb      	subs	r3, r1, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bfb8      	it	lt
 8001502:	425b      	neglt	r3, r3
 8001504:	2b64      	cmp	r3, #100	@ 0x64
 8001506:	dd03      	ble.n	8001510 <BQ76920_CheckRedundancy+0x4c>
            *discrepancy_flag = 1;
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
            return;
 800150e:	e013      	b.n	8001538 <BQ76920_CheckRedundancy+0x74>
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	3301      	adds	r3, #1
 8001514:	75fb      	strb	r3, [r7, #23]
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d9e4      	bls.n	80014e6 <BQ76920_CheckRedundancy+0x22>
        }
    }

    // Compare currents
    if (abs(current_1 - current_2) > 500) { // 500 mA threshold
 800151c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001520:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	bfb8      	it	lt
 800152a:	425b      	neglt	r3, r3
 800152c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001530:	dd02      	ble.n	8001538 <BQ76920_CheckRedundancy+0x74>
        *discrepancy_flag = 1;
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
    }
}
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <BQ76920_CheckStatus>:
  * @brief  Checks the status registers of two BQ76920 ICs and logs any faults
  * @param  hi2c1: Pointer to the I2C handle for the first BQ76920
  * @param  hi2c2: Pointer to the I2C handle for the second BQ76920
  * @param  error_flags: Pointer to store error flags
  */
void BQ76920_CheckStatus(I2C_HandleTypeDef *hi2c1, I2C_HandleTypeDef *hi2c2, uint32_t *error_flags) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
    uint8_t status1, status2;
    uint8_t clear_flags1 = 0, clear_flags2 = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	75fb      	strb	r3, [r7, #23]
 8001554:	2300      	movs	r3, #0
 8001556:	75bb      	strb	r3, [r7, #22]

    // Read status from first BQ76920 (I2C1)
    if (BQ76920_ReadStatus(hi2c1, &status1) == HAL_OK) {
 8001558:	f107 0315 	add.w	r3, r7, #21
 800155c:	4619      	mov	r1, r3
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff ff6c 	bl	800143c <BQ76920_ReadStatus>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 8086 	bne.w	8001678 <BQ76920_CheckStatus+0x134>
        // Handle each status flag
        if (status1 & (1 << 7)) { // DEVICE_XREADY
 800156c:	7d7b      	ldrb	r3, [r7, #21]
 800156e:	b25b      	sxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	da0c      	bge.n	800158e <BQ76920_CheckStatus+0x4a>
            *error_flags |= ERROR_DEVICE_XREADY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): DEVICE_XREADY fault");
 8001580:	488a      	ldr	r0, [pc, #552]	@ (80017ac <BQ76920_CheckStatus+0x268>)
 8001582:	f000 fa2f 	bl	80019e4 <Log_Error>
            clear_flags1 |= (1 << 7);
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800158c:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 6)) { // OVRD_ALERT
 800158e:	7d7b      	ldrb	r3, [r7, #21]
 8001590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00c      	beq.n	80015b2 <BQ76920_CheckStatus+0x6e>
            *error_flags |= ERROR_OVRD_ALERT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): OVRD_ALERT condition");
 80015a4:	4882      	ldr	r0, [pc, #520]	@ (80017b0 <BQ76920_CheckStatus+0x26c>)
 80015a6:	f000 fa1d 	bl	80019e4 <Log_Error>
            clear_flags1 |= (1 << 6);
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015b0:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 5)) { // UV
 80015b2:	7d7b      	ldrb	r3, [r7, #21]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00c      	beq.n	80015d6 <BQ76920_CheckStatus+0x92>
            *error_flags |= ERROR_UNDERVOLTAGE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f043 0202 	orr.w	r2, r3, #2
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Undervoltage fault");
 80015c8:	487a      	ldr	r0, [pc, #488]	@ (80017b4 <BQ76920_CheckStatus+0x270>)
 80015ca:	f000 fa0b 	bl	80019e4 <Log_Error>
            clear_flags1 |= (1 << 5);
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	f043 0320 	orr.w	r3, r3, #32
 80015d4:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 4)) { // OV
 80015d6:	7d7b      	ldrb	r3, [r7, #21]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00c      	beq.n	80015fa <BQ76920_CheckStatus+0xb6>
            *error_flags |= ERROR_OVERVOLTAGE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f043 0201 	orr.w	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Overvoltage fault");
 80015ec:	4872      	ldr	r0, [pc, #456]	@ (80017b8 <BQ76920_CheckStatus+0x274>)
 80015ee:	f000 f9f9 	bl	80019e4 <Log_Error>
            clear_flags1 |= (1 << 4);
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	f043 0310 	orr.w	r3, r3, #16
 80015f8:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 3)) { // SCD
 80015fa:	7d7b      	ldrb	r3, [r7, #21]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00c      	beq.n	800161e <BQ76920_CheckStatus+0xda>
            *error_flags |= ERROR_SCD;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f043 0210 	orr.w	r2, r3, #16
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Short-circuit discharge fault");
 8001610:	486a      	ldr	r0, [pc, #424]	@ (80017bc <BQ76920_CheckStatus+0x278>)
 8001612:	f000 f9e7 	bl	80019e4 <Log_Error>
            clear_flags1 |= (1 << 3);
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 2)) { // OCD
 800161e:	7d7b      	ldrb	r3, [r7, #21]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00c      	beq.n	8001642 <BQ76920_CheckStatus+0xfe>
            *error_flags |= ERROR_OCD;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f043 0208 	orr.w	r2, r3, #8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Overcurrent discharge fault");
 8001634:	4862      	ldr	r0, [pc, #392]	@ (80017c0 <BQ76920_CheckStatus+0x27c>)
 8001636:	f000 f9d5 	bl	80019e4 <Log_Error>
            clear_flags1 |= (1 << 2);
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 1)) { // OCC
 8001642:	7d7b      	ldrb	r3, [r7, #21]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00c      	beq.n	8001666 <BQ76920_CheckStatus+0x122>
            *error_flags |= ERROR_OCC;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f043 0204 	orr.w	r2, r3, #4
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Overcurrent charge fault");
 8001658:	485a      	ldr	r0, [pc, #360]	@ (80017c4 <BQ76920_CheckStatus+0x280>)
 800165a:	f000 f9c3 	bl	80019e4 <Log_Error>
            clear_flags1 |= (1 << 1);
 800165e:	7dfb      	ldrb	r3, [r7, #23]
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	75fb      	strb	r3, [r7, #23]
        }

        // Clear the handled flags
        if (clear_flags1 != 0) {
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <BQ76920_CheckStatus+0x13a>
            BQ76920_ClearStatus(hi2c1, clear_flags1);
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	4619      	mov	r1, r3
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7ff ff05 	bl	8001480 <BQ76920_ClearStatus>
 8001676:	e002      	b.n	800167e <BQ76920_CheckStatus+0x13a>
        }
    } else {
        Log_Error("Failed to read SYS_STAT from BQ76920 (I2C1)");
 8001678:	4853      	ldr	r0, [pc, #332]	@ (80017c8 <BQ76920_CheckStatus+0x284>)
 800167a:	f000 f9b3 	bl	80019e4 <Log_Error>
    }

    // Read status from second BQ76920 (I2C2)
    if (BQ76920_ReadStatus(hi2c2, &status2) == HAL_OK) {
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	68b8      	ldr	r0, [r7, #8]
 8001686:	f7ff fed9 	bl	800143c <BQ76920_ReadStatus>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	f040 8086 	bne.w	800179e <BQ76920_CheckStatus+0x25a>
        // Handle each status flag
        if (status2 & (1 << 7)) { // DEVICE_XREADY
 8001692:	7d3b      	ldrb	r3, [r7, #20]
 8001694:	b25b      	sxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	da0c      	bge.n	80016b4 <BQ76920_CheckStatus+0x170>
            *error_flags |= ERROR_DEVICE_XREADY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): DEVICE_XREADY fault");
 80016a6:	4849      	ldr	r0, [pc, #292]	@ (80017cc <BQ76920_CheckStatus+0x288>)
 80016a8:	f000 f99c 	bl	80019e4 <Log_Error>
            clear_flags2 |= (1 << 7);
 80016ac:	7dbb      	ldrb	r3, [r7, #22]
 80016ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016b2:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 6)) { // OVRD_ALERT
 80016b4:	7d3b      	ldrb	r3, [r7, #20]
 80016b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00c      	beq.n	80016d8 <BQ76920_CheckStatus+0x194>
            *error_flags |= ERROR_OVRD_ALERT;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): OVRD_ALERT condition");
 80016ca:	4841      	ldr	r0, [pc, #260]	@ (80017d0 <BQ76920_CheckStatus+0x28c>)
 80016cc:	f000 f98a 	bl	80019e4 <Log_Error>
            clear_flags2 |= (1 << 6);
 80016d0:	7dbb      	ldrb	r3, [r7, #22]
 80016d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016d6:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 5)) { // UV
 80016d8:	7d3b      	ldrb	r3, [r7, #20]
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <BQ76920_CheckStatus+0x1b8>
            *error_flags |= ERROR_UNDERVOLTAGE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f043 0202 	orr.w	r2, r3, #2
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Undervoltage fault");
 80016ee:	4839      	ldr	r0, [pc, #228]	@ (80017d4 <BQ76920_CheckStatus+0x290>)
 80016f0:	f000 f978 	bl	80019e4 <Log_Error>
            clear_flags2 |= (1 << 5);
 80016f4:	7dbb      	ldrb	r3, [r7, #22]
 80016f6:	f043 0320 	orr.w	r3, r3, #32
 80016fa:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 4)) { // OV
 80016fc:	7d3b      	ldrb	r3, [r7, #20]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00c      	beq.n	8001720 <BQ76920_CheckStatus+0x1dc>
            *error_flags |= ERROR_OVERVOLTAGE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Overvoltage fault");
 8001712:	4831      	ldr	r0, [pc, #196]	@ (80017d8 <BQ76920_CheckStatus+0x294>)
 8001714:	f000 f966 	bl	80019e4 <Log_Error>
            clear_flags2 |= (1 << 4);
 8001718:	7dbb      	ldrb	r3, [r7, #22]
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 3)) { // SCD
 8001720:	7d3b      	ldrb	r3, [r7, #20]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00c      	beq.n	8001744 <BQ76920_CheckStatus+0x200>
            *error_flags |= ERROR_SCD;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f043 0210 	orr.w	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Short-circuit discharge fault");
 8001736:	4829      	ldr	r0, [pc, #164]	@ (80017dc <BQ76920_CheckStatus+0x298>)
 8001738:	f000 f954 	bl	80019e4 <Log_Error>
            clear_flags2 |= (1 << 3);
 800173c:	7dbb      	ldrb	r3, [r7, #22]
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 2)) { // OCD
 8001744:	7d3b      	ldrb	r3, [r7, #20]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00c      	beq.n	8001768 <BQ76920_CheckStatus+0x224>
            *error_flags |= ERROR_OCD;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f043 0208 	orr.w	r2, r3, #8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Overcurrent discharge fault");
 800175a:	4821      	ldr	r0, [pc, #132]	@ (80017e0 <BQ76920_CheckStatus+0x29c>)
 800175c:	f000 f942 	bl	80019e4 <Log_Error>
            clear_flags2 |= (1 << 2);
 8001760:	7dbb      	ldrb	r3, [r7, #22]
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 1)) { // OCC
 8001768:	7d3b      	ldrb	r3, [r7, #20]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00c      	beq.n	800178c <BQ76920_CheckStatus+0x248>
            *error_flags |= ERROR_OCC;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f043 0204 	orr.w	r2, r3, #4
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Overcurrent charge fault");
 800177e:	4819      	ldr	r0, [pc, #100]	@ (80017e4 <BQ76920_CheckStatus+0x2a0>)
 8001780:	f000 f930 	bl	80019e4 <Log_Error>
            clear_flags2 |= (1 << 1);
 8001784:	7dbb      	ldrb	r3, [r7, #22]
 8001786:	f043 0302 	orr.w	r3, r3, #2
 800178a:	75bb      	strb	r3, [r7, #22]
        }

        // Clear the handled flags
        if (clear_flags2 != 0) {
 800178c:	7dbb      	ldrb	r3, [r7, #22]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <BQ76920_CheckStatus+0x260>
            BQ76920_ClearStatus(hi2c2, clear_flags2);
 8001792:	7dbb      	ldrb	r3, [r7, #22]
 8001794:	4619      	mov	r1, r3
 8001796:	68b8      	ldr	r0, [r7, #8]
 8001798:	f7ff fe72 	bl	8001480 <BQ76920_ClearStatus>
        }
    } else {
        Log_Error("Failed to read SYS_STAT from BQ76920 (I2C2)");
    }
}
 800179c:	e002      	b.n	80017a4 <BQ76920_CheckStatus+0x260>
        Log_Error("Failed to read SYS_STAT from BQ76920 (I2C2)");
 800179e:	4812      	ldr	r0, [pc, #72]	@ (80017e8 <BQ76920_CheckStatus+0x2a4>)
 80017a0:	f000 f920 	bl	80019e4 <Log_Error>
}
 80017a4:	bf00      	nop
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	08010750 	.word	0x08010750
 80017b0:	08010774 	.word	0x08010774
 80017b4:	0801079c 	.word	0x0801079c
 80017b8:	080107c0 	.word	0x080107c0
 80017bc:	080107e4 	.word	0x080107e4
 80017c0:	08010814 	.word	0x08010814
 80017c4:	08010840 	.word	0x08010840
 80017c8:	0801086c 	.word	0x0801086c
 80017cc:	08010898 	.word	0x08010898
 80017d0:	080108bc 	.word	0x080108bc
 80017d4:	080108e4 	.word	0x080108e4
 80017d8:	08010908 	.word	0x08010908
 80017dc:	0801092c 	.word	0x0801092c
 80017e0:	0801095c 	.word	0x0801095c
 80017e4:	08010988 	.word	0x08010988
 80017e8:	080109b4 	.word	0x080109b4

080017ec <Temperature_Read>:

#include "temperature.h"
#include "main.h"

HAL_StatusTypeDef Temperature_Read(I2C_HandleTypeDef *hi2c1, I2C_HandleTypeDef *hi2c2, int16_t *temperature_1, int16_t *temperature_2)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	@ 0x30
 80017f0:	af04      	add	r7, sp, #16
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
    uint8_t data[2];
    HAL_StatusTypeDef status;

    // Read from NTC-1 (I2C address 0x48, using hi2c1)
    uint16_t i2c_addr_1 = (TMP100_I2C_ADDRESS_1 << 1);
 80017fa:	2390      	movs	r3, #144	@ 0x90
 80017fc:	83bb      	strh	r3, [r7, #28]
    status = HAL_I2C_Mem_Read(hi2c1, i2c_addr_1, TMP100_TEMP_REG, 1, data, 2, HAL_MAX_DELAY);
 80017fe:	8bb9      	ldrh	r1, [r7, #28]
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	2302      	movs	r3, #2
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	2200      	movs	r2, #0
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f006 f899 	bl	800794c <HAL_I2C_Mem_Read>
 800181a:	4603      	mov	r3, r0
 800181c:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) {
 800181e:	7efb      	ldrb	r3, [r7, #27]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <Temperature_Read+0x3c>
        return status;
 8001824:	7efb      	ldrb	r3, [r7, #27]
 8001826:	e051      	b.n	80018cc <Temperature_Read+0xe0>
    }

    // Convert temperature for NTC-1
    int16_t temp_raw = (data[0] << 4) | (data[1] >> 4);
 8001828:	7d3b      	ldrb	r3, [r7, #20]
 800182a:	b21b      	sxth	r3, r3
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	b21a      	sxth	r2, r3
 8001830:	7d7b      	ldrb	r3, [r7, #21]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	b2db      	uxtb	r3, r3
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	83fb      	strh	r3, [r7, #30]
    if (temp_raw & 0x800) { // Sign bit check
 800183c:	8bfb      	ldrh	r3, [r7, #30]
 800183e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001842:	2b00      	cmp	r3, #0
 8001844:	d004      	beq.n	8001850 <Temperature_Read+0x64>
        temp_raw -= 4096; // Convert to signed value
 8001846:	8bfb      	ldrh	r3, [r7, #30]
 8001848:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800184c:	b29b      	uxth	r3, r3
 800184e:	83fb      	strh	r3, [r7, #30]
    }
    *temperature_1 = (temp_raw * 625) / 10000; // Convert to degrees Celsius (0.0625°C per LSB)
 8001850:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001854:	2b00      	cmp	r3, #0
 8001856:	da00      	bge.n	800185a <Temperature_Read+0x6e>
 8001858:	330f      	adds	r3, #15
 800185a:	111b      	asrs	r3, r3, #4
 800185c:	b21a      	sxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	801a      	strh	r2, [r3, #0]

    // Read from NTC-2 (I2C address 0x49, using hi2c2)
    uint16_t i2c_addr_2 = (TMP100_I2C_ADDRESS_2 << 1);
 8001862:	2392      	movs	r3, #146	@ 0x92
 8001864:	833b      	strh	r3, [r7, #24]
    status = HAL_I2C_Mem_Read(hi2c2, i2c_addr_2, TMP100_TEMP_REG, 1, data, 2, HAL_MAX_DELAY);
 8001866:	8b39      	ldrh	r1, [r7, #24]
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	9302      	str	r3, [sp, #8]
 800186e:	2302      	movs	r3, #2
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2301      	movs	r3, #1
 800187a:	2200      	movs	r2, #0
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f006 f865 	bl	800794c <HAL_I2C_Mem_Read>
 8001882:	4603      	mov	r3, r0
 8001884:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) {
 8001886:	7efb      	ldrb	r3, [r7, #27]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <Temperature_Read+0xa4>
        return status;
 800188c:	7efb      	ldrb	r3, [r7, #27]
 800188e:	e01d      	b.n	80018cc <Temperature_Read+0xe0>
    }

    // Convert temperature for NTC-2
    temp_raw = (data[0] << 4) | (data[1] >> 4);
 8001890:	7d3b      	ldrb	r3, [r7, #20]
 8001892:	b21b      	sxth	r3, r3
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	b21a      	sxth	r2, r3
 8001898:	7d7b      	ldrb	r3, [r7, #21]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	b2db      	uxtb	r3, r3
 800189e:	b21b      	sxth	r3, r3
 80018a0:	4313      	orrs	r3, r2
 80018a2:	83fb      	strh	r3, [r7, #30]
    if (temp_raw & 0x800) { // Sign bit check
 80018a4:	8bfb      	ldrh	r3, [r7, #30]
 80018a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <Temperature_Read+0xcc>
        temp_raw -= 4096; // Convert to signed value
 80018ae:	8bfb      	ldrh	r3, [r7, #30]
 80018b0:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	83fb      	strh	r3, [r7, #30]
    }
    *temperature_2 = (temp_raw * 625) / 10000; // Convert to degrees Celsius (0.0625°C per LSB)
 80018b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	da00      	bge.n	80018c2 <Temperature_Read+0xd6>
 80018c0:	330f      	adds	r3, #15
 80018c2:	111b      	asrs	r3, r3, #4
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80018da:	463b      	mov	r3, r7
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	615a      	str	r2, [r3, #20]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 80018ea:	4b2e      	ldr	r3, [pc, #184]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 80018ec:	4a2e      	ldr	r2, [pc, #184]	@ (80019a8 <MX_ADC1_Init+0xd4>)
 80018ee:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV4;
 80018f0:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 80018f2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80018f6:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018f8:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018fe:	4b29      	ldr	r3, [pc, #164]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = DISABLE;
 8001904:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800190a:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 800190c:	2204      	movs	r2, #4
 800190e:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8001910:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 8001912:	2200      	movs	r2, #0
 8001914:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001916:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 8001918:	2200      	movs	r2, #0
 800191a:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 800191c:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 800191e:	2201      	movs	r2, #1
 8001920:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIG_EDGE_NONE;
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 8001932:	2200      	movs	r2, #0
 8001934:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001936:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 8001940:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001944:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 8001946:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800194e:	4815      	ldr	r0, [pc, #84]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 8001950:	f003 ff98 	bl	8005884 <HAL_ADC_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_ADC1_Init+0x8a>
    {
        Error_Handler();
 800195a:	f002 fb41 	bl	8003fe0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_ADC1_Init+0xd8>)
 8001960:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001962:	2306      	movs	r3, #6
 8001964:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001966:	2306      	movs	r3, #6
 8001968:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800196a:	237f      	movs	r3, #127	@ 0x7f
 800196c:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800196e:	2304      	movs	r3, #4
 8001970:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001976:	463b      	mov	r3, r7
 8001978:	4619      	mov	r1, r3
 800197a:	480a      	ldr	r0, [pc, #40]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 800197c:	f004 faa6 	bl	8005ecc <HAL_ADC_ConfigChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_ADC1_Init+0xb6>
    {
        Error_Handler();
 8001986:	f002 fb2b 	bl	8003fe0 <Error_Handler>
    }

    /* USER CODE BEGIN ADC1_Init 2 */
    // Calibrate ADC
    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800198a:	217f      	movs	r1, #127	@ 0x7f
 800198c:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <MX_ADC1_Init+0xd0>)
 800198e:	f005 f85d 	bl	8006a4c <HAL_ADCEx_Calibration_Start>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_ADC1_Init+0xc8>
    {
        Error_Handler();
 8001998:	f002 fb22 	bl	8003fe0 <Error_Handler>
    }
    /* USER CODE END ADC1_Init 2 */
}
 800199c:	bf00      	nop
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000238 	.word	0x20000238
 80019a8:	50040000 	.word	0x50040000
 80019ac:	c7520000 	.word	0xc7520000

080019b0 <Flash_Erase>:
  * @brief  Erases a specified page in flash memory
  * @param  page: Page number to erase
  * @retval None
  */
void Flash_Erase(uint32_t page)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error;

    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
    erase_init.Page = page;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	61bb      	str	r3, [r7, #24]
    erase_init.NbPages = 1;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]

    HAL_FLASH_Unlock();
 80019c4:	f005 fa0e 	bl	8006de4 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase_init, &page_error);
 80019c8:	f107 020c 	add.w	r2, r7, #12
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f005 faea 	bl	8006fac <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 80019d8:	f005 fa26 	bl	8006e28 <HAL_FLASH_Lock>
}
 80019dc:	bf00      	nop
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <Log_Error>:
  * @param  format: Format string (printf-style)
  * @param  ...: Variable arguments for the format string
  * @retval None
  */
void Log_Error(const char *format, ...)
{
 80019e4:	b40f      	push	{r0, r1, r2, r3}
 80019e6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019ea:	b09c      	sub	sp, #112	@ 0x70
 80019ec:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 80019ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80019fe:	2300      	movs	r3, #0
 8001a00:	64bb      	str	r3, [r7, #72]	@ 0x48
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a02:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a06:	2200      	movs	r2, #0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	483b      	ldr	r0, [pc, #236]	@ (8001af8 <Log_Error+0x114>)
 8001a0c:	f008 f867 	bl	8009ade <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a10:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a14:	2200      	movs	r2, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	4837      	ldr	r0, [pc, #220]	@ (8001af8 <Log_Error+0x114>)
 8001a1a:	f008 f943 	bl	8009ca4 <HAL_RTC_GetDate>

    uint64_t timestamp = HAL_GetTick();
 8001a1e:	f003 fccf 	bl	80053c0 <HAL_GetTick>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2200      	movs	r2, #0
 8001a26:	461c      	mov	r4, r3
 8001a28:	4615      	mov	r5, r2
 8001a2a:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
    char message_buffer[MESSAGE_SIZE];

    // Format the message using vsnprintf
    va_list args;
    va_start(args, format);
 8001a2e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001a32:	607b      	str	r3, [r7, #4]
    vsnprintf(message_buffer, MESSAGE_SIZE, format, args);
 8001a34:	f107 0008 	add.w	r0, r7, #8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001a3e:	2138      	movs	r1, #56	@ 0x38
 8001a40:	f00b fa68 	bl	800cf14 <vsniprintf>
    va_end(args);

    memset(log_buffer, 0, LOG_ENTRY_SIZE);
 8001a44:	2240      	movs	r2, #64	@ 0x40
 8001a46:	2100      	movs	r1, #0
 8001a48:	482c      	ldr	r0, [pc, #176]	@ (8001afc <Log_Error+0x118>)
 8001a4a:	f00b fa71 	bl	800cf30 <memset>
    memcpy(log_buffer, &timestamp, TIMESTAMP_SIZE);
 8001a4e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a52:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <Log_Error+0x118>)
 8001a54:	4602      	mov	r2, r0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	460a      	mov	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
    strncpy((char *)(log_buffer + TIMESTAMP_SIZE), message_buffer, MESSAGE_SIZE - 1);
 8001a5c:	4828      	ldr	r0, [pc, #160]	@ (8001b00 <Log_Error+0x11c>)
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	2237      	movs	r2, #55	@ 0x37
 8001a64:	4619      	mov	r1, r3
 8001a66:	f00b fa7e 	bl	800cf66 <strncpy>

    uint32_t address = LOG_START_ADDR + (next_slot * LOG_ENTRY_SIZE);
 8001a6a:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <Log_Error+0x120>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8001a72:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a76:	019b      	lsls	r3, r3, #6
 8001a78:	66bb      	str	r3, [r7, #104]	@ 0x68
    HAL_FLASH_Unlock();
 8001a7a:	f005 f9b3 	bl	8006de4 <HAL_FLASH_Unlock>
    for (uint8_t i = 0; i < LOG_ENTRY_SIZE; i += 8) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001a84:	e015      	b.n	8001ab2 <Log_Error+0xce>
        uint64_t data = *(uint64_t *)(log_buffer + i);
 8001a86:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <Log_Error+0x118>)
 8001a8c:	4413      	add	r3, r2
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data);
 8001a96:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8001a9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a9c:	18d1      	adds	r1, r2, r3
 8001a9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f005 f932 	bl	8006d0c <HAL_FLASH_Program>
    for (uint8_t i = 0; i < LOG_ENTRY_SIZE; i += 8) {
 8001aa8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001aac:	3308      	adds	r3, #8
 8001aae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001ab2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001ab6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ab8:	d9e5      	bls.n	8001a86 <Log_Error+0xa2>
    }
    HAL_FLASH_Lock();
 8001aba:	f005 f9b5 	bl	8006e28 <HAL_FLASH_Lock>

    next_slot = (next_slot + 1) % NUM_LOG_ENTRIES;
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <Log_Error+0x120>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b04 <Log_Error+0x120>)
 8001aca:	6013      	str	r3, [r2, #0]
    HAL_FLASH_Unlock();
 8001acc:	f005 f98a 	bl	8006de4 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, NEXT_SLOT_ADDR, next_slot);
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <Log_Error+0x120>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	4691      	mov	r9, r2
 8001ada:	4642      	mov	r2, r8
 8001adc:	464b      	mov	r3, r9
 8001ade:	490a      	ldr	r1, [pc, #40]	@ (8001b08 <Log_Error+0x124>)
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f005 f913 	bl	8006d0c <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 8001ae6:	f005 f99f 	bl	8006e28 <HAL_FLASH_Lock>
}
 8001aea:	bf00      	nop
 8001aec:	3770      	adds	r7, #112	@ 0x70
 8001aee:	46bd      	mov	sp, r7
 8001af0:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001af4:	b004      	add	sp, #16
 8001af6:	4770      	bx	lr
 8001af8:	20000398 	.word	0x20000398
 8001afc:	20000520 	.word	0x20000520
 8001b00:	20000528 	.word	0x20000528
 8001b04:	2000051c 	.word	0x2000051c
 8001b08:	0807f800 	.word	0x0807f800

08001b0c <Log_Read_All>:
/**
  * @brief  Reads and sends all logs over RS485
  * @retval None
  */
void Log_Read_All(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0aa      	sub	sp, #168	@ 0xa8
 8001b10:	af04      	add	r7, sp, #16
    char buffer[128];
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b18:	e032      	b.n	8001b80 <Log_Read_All+0x74>
        uint32_t address = LOG_START_ADDR + (i * LOG_ENTRY_SIZE);
 8001b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b1e:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8001b22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b26:	019b      	lsls	r3, r3, #6
 8001b28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        uint64_t timestamp = *(uint64_t *)address;
 8001b2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        char *message = (char *)(address + TIMESTAMP_SIZE);
 8001b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b3c:	3308      	adds	r3, #8
 8001b3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        snprintf(buffer, sizeof(buffer), "Log %lu: Time=%llu, Msg=%s\r\n", i, timestamp, message);
 8001b42:	1d38      	adds	r0, r7, #4
 8001b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001b4e:	e9cd 2300 	strd	r2, r3, [sp]
 8001b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b56:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <Log_Read_All+0x88>)
 8001b58:	2180      	movs	r1, #128	@ 0x80
 8001b5a:	f00b f911 	bl	800cd80 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fb85 	bl	8000270 <strlen>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	1d39      	adds	r1, r7, #4
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b70:	4809      	ldr	r0, [pc, #36]	@ (8001b98 <Log_Read_All+0x8c>)
 8001b72:	f009 f8e7 	bl	800ad44 <HAL_UART_Transmit>
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 8001b76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b88:	d3c7      	bcc.n	8001b1a <Log_Read_All+0xe>
    }
}
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
 8001b8e:	3798      	adds	r7, #152	@ 0x98
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	080109e0 	.word	0x080109e0
 8001b98:	20000408 	.word	0x20000408

08001b9c <Log_Init>:
/**
  * @brief  Initializes the logging system
  * @retval None
  */
void Log_Init(void)
{
 8001b9c:	b5b0      	push	{r4, r5, r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
    next_slot = *(uint32_t *)NEXT_SLOT_ADDR;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <Log_Init+0x44>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0f      	ldr	r2, [pc, #60]	@ (8001be4 <Log_Init+0x48>)
 8001ba6:	6013      	str	r3, [r2, #0]
    if (next_slot >= NUM_LOG_ENTRIES) {
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <Log_Init+0x48>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bb0:	d314      	bcc.n	8001bdc <Log_Init+0x40>
        Flash_Erase(FLASH_LOG_PAGE);
 8001bb2:	2080      	movs	r0, #128	@ 0x80
 8001bb4:	f7ff fefc 	bl	80019b0 <Flash_Erase>
        next_slot = 0;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <Log_Init+0x48>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
        HAL_FLASH_Unlock();
 8001bbe:	f005 f911 	bl	8006de4 <HAL_FLASH_Unlock>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, NEXT_SLOT_ADDR, next_slot);
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <Log_Init+0x48>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	461c      	mov	r4, r3
 8001bca:	4615      	mov	r5, r2
 8001bcc:	4622      	mov	r2, r4
 8001bce:	462b      	mov	r3, r5
 8001bd0:	4903      	ldr	r1, [pc, #12]	@ (8001be0 <Log_Init+0x44>)
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f005 f89a 	bl	8006d0c <HAL_FLASH_Program>
        HAL_FLASH_Lock();
 8001bd8:	f005 f926 	bl	8006e28 <HAL_FLASH_Lock>
    }
}
 8001bdc:	bf00      	nop
 8001bde:	bdb0      	pop	{r4, r5, r7, pc}
 8001be0:	0807f800 	.word	0x0807f800
 8001be4:	2000051c 	.word	0x2000051c

08001be8 <Update_SOC_SOH>:
/**
  * @brief  Updates SOC and SOH using coulomb counting and Kalman Filter
  * @retval None
  */
void Update_SOC_SOH(void)
{
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
    coulomb_count += ((pack_current_1 + pack_current_2) / 2.0 * LOOP_TIME) / 3600.0;
 8001bee:	4b5e      	ldr	r3, [pc, #376]	@ (8001d68 <Update_SOC_SOH+0x180>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fca8 	bl	8000548 <__aeabi_f2d>
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	460d      	mov	r5, r1
 8001bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8001d6c <Update_SOC_SOH+0x184>)
 8001bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b5a      	ldr	r3, [pc, #360]	@ (8001d70 <Update_SOC_SOH+0x188>)
 8001c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc89 	bl	8000524 <__aeabi_i2d>
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c1a:	f7fe fe17 	bl	800084c <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	a34c      	add	r3, pc, #304	@ (adr r3, 8001d58 <Update_SOC_SOH+0x170>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	f7fe fce4 	bl	80005f8 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	a349      	add	r3, pc, #292	@ (adr r3, 8001d60 <Update_SOC_SOH+0x178>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fe05 	bl	800084c <__aeabi_ddiv>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4620      	mov	r0, r4
 8001c48:	4629      	mov	r1, r5
 8001c4a:	f7fe fb1f 	bl	800028c <__adddf3>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe ffc7 	bl	8000be8 <__aeabi_d2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a42      	ldr	r2, [pc, #264]	@ (8001d68 <Update_SOC_SOH+0x180>)
 8001c5e:	6013      	str	r3, [r2, #0]
    float soc_measured = (coulomb_count / battery_config.nominal_capacity) * 100.0;
 8001c60:	4b41      	ldr	r3, [pc, #260]	@ (8001d68 <Update_SOC_SOH+0x180>)
 8001c62:	edd3 6a00 	vldr	s13, [r3]
 8001c66:	4b43      	ldr	r3, [pc, #268]	@ (8001d74 <Update_SOC_SOH+0x18c>)
 8001c68:	ed93 7a00 	vldr	s14, [r3]
 8001c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c70:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001d78 <Update_SOC_SOH+0x190>
 8001c74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c78:	edc7 7a01 	vstr	s15, [r7, #4]
    soc = KalmanFilter_Update(&soc_kf, soc_measured);
 8001c7c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c80:	483e      	ldr	r0, [pc, #248]	@ (8001d7c <Update_SOC_SOH+0x194>)
 8001c82:	f002 fda0 	bl	80047c6 <KalmanFilter_Update>
 8001c86:	eef0 7a40 	vmov.f32	s15, s0
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d80 <Update_SOC_SOH+0x198>)
 8001c8c:	edc3 7a00 	vstr	s15, [r3]
    if (soc > 100.0) soc = 100.0;
 8001c90:	4b3b      	ldr	r3, [pc, #236]	@ (8001d80 <Update_SOC_SOH+0x198>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d78 <Update_SOC_SOH+0x190>
 8001c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	dd02      	ble.n	8001caa <Update_SOC_SOH+0xc2>
 8001ca4:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <Update_SOC_SOH+0x198>)
 8001ca6:	4a37      	ldr	r2, [pc, #220]	@ (8001d84 <Update_SOC_SOH+0x19c>)
 8001ca8:	601a      	str	r2, [r3, #0]
    if (soc < 0.0) soc = 0.0;
 8001caa:	4b35      	ldr	r3, [pc, #212]	@ (8001d80 <Update_SOC_SOH+0x198>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	d503      	bpl.n	8001cc2 <Update_SOC_SOH+0xda>
 8001cba:	4b31      	ldr	r3, [pc, #196]	@ (8001d80 <Update_SOC_SOH+0x198>)
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]

    if (soc >= 100.0) {
 8001cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d80 <Update_SOC_SOH+0x198>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001d78 <Update_SOC_SOH+0x190>
 8001ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	da00      	bge.n	8001cd8 <Update_SOC_SOH+0xf0>
        soh = (actual_capacity / initial_capacity) * 100.0;
        soh = KalmanFilter_Update(&soh_kf, soh);
        if (soh > 100.0) soh = 100.0;
        if (soh < 0.0) soh = 0.0;
    }
}
 8001cd6:	e039      	b.n	8001d4c <Update_SOC_SOH+0x164>
        actual_capacity = coulomb_count;
 8001cd8:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <Update_SOC_SOH+0x180>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8001d88 <Update_SOC_SOH+0x1a0>)
 8001cde:	6013      	str	r3, [r2, #0]
        soh = (actual_capacity / initial_capacity) * 100.0;
 8001ce0:	4b29      	ldr	r3, [pc, #164]	@ (8001d88 <Update_SOC_SOH+0x1a0>)
 8001ce2:	edd3 6a00 	vldr	s13, [r3]
 8001ce6:	4b29      	ldr	r3, [pc, #164]	@ (8001d8c <Update_SOC_SOH+0x1a4>)
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001d78 <Update_SOC_SOH+0x190>
 8001cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf8:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <Update_SOC_SOH+0x1a8>)
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
        soh = KalmanFilter_Update(&soh_kf, soh);
 8001cfe:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <Update_SOC_SOH+0x1a8>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	eeb0 0a67 	vmov.f32	s0, s15
 8001d08:	4822      	ldr	r0, [pc, #136]	@ (8001d94 <Update_SOC_SOH+0x1ac>)
 8001d0a:	f002 fd5c 	bl	80047c6 <KalmanFilter_Update>
 8001d0e:	eef0 7a40 	vmov.f32	s15, s0
 8001d12:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <Update_SOC_SOH+0x1a8>)
 8001d14:	edc3 7a00 	vstr	s15, [r3]
        if (soh > 100.0) soh = 100.0;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <Update_SOC_SOH+0x1a8>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001d78 <Update_SOC_SOH+0x190>
 8001d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	dd02      	ble.n	8001d32 <Update_SOC_SOH+0x14a>
 8001d2c:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <Update_SOC_SOH+0x1a8>)
 8001d2e:	4a15      	ldr	r2, [pc, #84]	@ (8001d84 <Update_SOC_SOH+0x19c>)
 8001d30:	601a      	str	r2, [r3, #0]
        if (soh < 0.0) soh = 0.0;
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <Update_SOC_SOH+0x1a8>)
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	d400      	bmi.n	8001d44 <Update_SOC_SOH+0x15c>
}
 8001d42:	e003      	b.n	8001d4c <Update_SOC_SOH+0x164>
        if (soh < 0.0) soh = 0.0;
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <Update_SOC_SOH+0x1a8>)
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bdb0      	pop	{r4, r5, r7, pc}
 8001d54:	f3af 8000 	nop.w
 8001d58:	a0000000 	.word	0xa0000000
 8001d5c:	3fb99999 	.word	0x3fb99999
 8001d60:	00000000 	.word	0x00000000
 8001d64:	40ac2000 	.word	0x40ac2000
 8001d68:	20000560 	.word	0x20000560
 8001d6c:	200004f0 	.word	0x200004f0
 8001d70:	200004f2 	.word	0x200004f2
 8001d74:	2000000c 	.word	0x2000000c
 8001d78:	42c80000 	.word	0x42c80000
 8001d7c:	200004fc 	.word	0x200004fc
 8001d80:	20000000 	.word	0x20000000
 8001d84:	42c80000 	.word	0x42c80000
 8001d88:	20000568 	.word	0x20000568
 8001d8c:	20000564 	.word	0x20000564
 8001d90:	20000004 	.word	0x20000004
 8001d94:	2000050c 	.word	0x2000050c

08001d98 <Update_BMS_Mode>:
  * @brief  Updates the BMS operation mode and charge/discharge status
  * @retval None
  * @note   Checks all 4 cells (Cells 1, 2, 3, 4) for overvoltage and undervoltage recovery
  */
void Update_BMS_Mode(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af02      	add	r7, sp, #8
    static const uint32_t FAULT_TIMEOUT = 30000;
    static const uint32_t TEMP_FAULT_TIMEOUT = 60000;
    static const uint32_t COOLDOWN_PERIOD = 10000;
    static const uint32_t RECOVERY_DELAY = 5000;

    if (error_flags & (ERROR_OVERVOLTAGE | ERROR_UNDERVOLTAGE | ERROR_OCC | ERROR_OCD | ERROR_SCD | ERROR_OVERTEMP | ERROR_UNDERTEMP | ERROR_DISCREPANCY | ERROR_DEVICE_XREADY | ERROR_OVRD_ALERT))
 8001d9e:	4ba1      	ldr	r3, [pc, #644]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 83b7 	beq.w	800251a <Update_BMS_Mode+0x782>
    {
        if (!in_fault_mode)
 8001dac:	4b9e      	ldr	r3, [pc, #632]	@ (8002028 <Update_BMS_Mode+0x290>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d107      	bne.n	8001dc4 <Update_BMS_Mode+0x2c>
        {
            fault_start_time = HAL_GetTick();
 8001db4:	f003 fb04 	bl	80053c0 <HAL_GetTick>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a9c      	ldr	r2, [pc, #624]	@ (800202c <Update_BMS_Mode+0x294>)
 8001dbc:	6013      	str	r3, [r2, #0]
            in_fault_mode = 1;
 8001dbe:	4b9a      	ldr	r3, [pc, #616]	@ (8002028 <Update_BMS_Mode+0x290>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
        }

        bms_mode = MODE_FAULT;
 8001dc4:	4b9a      	ldr	r3, [pc, #616]	@ (8002030 <Update_BMS_Mode+0x298>)
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	701a      	strb	r2, [r3, #0]

        if (error_flags & ERROR_OVERVOLTAGE)
 8001dca:	4b96      	ldr	r3, [pc, #600]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d047      	beq.n	8001e66 <Update_BMS_Mode+0xce>
        {
            charge_enabled = 0;
 8001dd6:	4b97      	ldr	r3, [pc, #604]	@ (8002034 <Update_BMS_Mode+0x29c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 1;
 8001ddc:	4b96      	ldr	r3, [pc, #600]	@ (8002038 <Update_BMS_Mode+0x2a0>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging due to overvoltage");
 8001de2:	4896      	ldr	r0, [pc, #600]	@ (800203c <Update_BMS_Mode+0x2a4>)
 8001de4:	f7ff fdfe 	bl	80019e4 <Log_Error>

            uint8_t all_below_threshold = 1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	75fb      	strb	r3, [r7, #23]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	75bb      	strb	r3, [r7, #22]
 8001df0:	e015      	b.n	8001e1e <Update_BMS_Mode+0x86>
            {
                if (group_voltages_1[i] > battery_config.ov_threshold || group_voltages_2[i] > battery_config.ov_threshold)
 8001df2:	7dbb      	ldrb	r3, [r7, #22]
 8001df4:	4a92      	ldr	r2, [pc, #584]	@ (8002040 <Update_BMS_Mode+0x2a8>)
 8001df6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001dfa:	4b92      	ldr	r3, [pc, #584]	@ (8002044 <Update_BMS_Mode+0x2ac>)
 8001dfc:	889b      	ldrh	r3, [r3, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d807      	bhi.n	8001e12 <Update_BMS_Mode+0x7a>
 8001e02:	7dbb      	ldrb	r3, [r7, #22]
 8001e04:	4a90      	ldr	r2, [pc, #576]	@ (8002048 <Update_BMS_Mode+0x2b0>)
 8001e06:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e0a:	4b8e      	ldr	r3, [pc, #568]	@ (8002044 <Update_BMS_Mode+0x2ac>)
 8001e0c:	889b      	ldrh	r3, [r3, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d902      	bls.n	8001e18 <Update_BMS_Mode+0x80>
                {
                    all_below_threshold = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	75fb      	strb	r3, [r7, #23]
                    break;
 8001e16:	e005      	b.n	8001e24 <Update_BMS_Mode+0x8c>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001e18:	7dbb      	ldrb	r3, [r7, #22]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	75bb      	strb	r3, [r7, #22]
 8001e1e:	7dbb      	ldrb	r3, [r7, #22]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d9e6      	bls.n	8001df2 <Update_BMS_Mode+0x5a>
                }
            }
            if (all_below_threshold)
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <Update_BMS_Mode+0xac>
            {
                Log_Error("Overvoltage fault cleared");
 8001e2a:	4888      	ldr	r0, [pc, #544]	@ (800204c <Update_BMS_Mode+0x2b4>)
 8001e2c:	f7ff fdda 	bl	80019e4 <Log_Error>
                error_flags &= ~ERROR_OVERVOLTAGE;
 8001e30:	4b7c      	ldr	r3, [pc, #496]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	4a7a      	ldr	r2, [pc, #488]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001e3a:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0;
 8001e3c:	4b7a      	ldr	r3, [pc, #488]	@ (8002028 <Update_BMS_Mode+0x290>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e359      	b.n	80024f8 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 8001e44:	f003 fabc 	bl	80053c0 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b78      	ldr	r3, [pc, #480]	@ (800202c <Update_BMS_Mode+0x294>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1ad2      	subs	r2, r2, r3
 8001e50:	4b7f      	ldr	r3, [pc, #508]	@ (8002050 <Update_BMS_Mode+0x2b8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	f0c0 834f 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
            {
                Log_Error("Overvoltage fault persists, triggering system reset");
 8001e5a:	487e      	ldr	r0, [pc, #504]	@ (8002054 <Update_BMS_Mode+0x2bc>)
 8001e5c:	f7ff fdc2 	bl	80019e4 <Log_Error>
                HAL_NVIC_SystemReset();
 8001e60:	f004 ff43 	bl	8006cea <HAL_NVIC_SystemReset>
 8001e64:	e348      	b.n	80024f8 <Update_BMS_Mode+0x760>
            }
        }
        else if (error_flags & ERROR_UNDERVOLTAGE)
 8001e66:	4b6f      	ldr	r3, [pc, #444]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d047      	beq.n	8001f02 <Update_BMS_Mode+0x16a>
        {
            charge_enabled = 1;
 8001e72:	4b70      	ldr	r3, [pc, #448]	@ (8002034 <Update_BMS_Mode+0x29c>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 8001e78:	4b6f      	ldr	r3, [pc, #444]	@ (8002038 <Update_BMS_Mode+0x2a0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled discharging due to undervoltage");
 8001e7e:	4876      	ldr	r0, [pc, #472]	@ (8002058 <Update_BMS_Mode+0x2c0>)
 8001e80:	f7ff fdb0 	bl	80019e4 <Log_Error>

            uint8_t all_above_threshold = 1;
 8001e84:	2301      	movs	r3, #1
 8001e86:	757b      	strb	r3, [r7, #21]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	753b      	strb	r3, [r7, #20]
 8001e8c:	e015      	b.n	8001eba <Update_BMS_Mode+0x122>
            {
                if (group_voltages_1[i] < battery_config.uv_threshold || group_voltages_2[i] < battery_config.uv_threshold)
 8001e8e:	7d3b      	ldrb	r3, [r7, #20]
 8001e90:	4a6b      	ldr	r2, [pc, #428]	@ (8002040 <Update_BMS_Mode+0x2a8>)
 8001e92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e96:	4b6b      	ldr	r3, [pc, #428]	@ (8002044 <Update_BMS_Mode+0x2ac>)
 8001e98:	88db      	ldrh	r3, [r3, #6]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d307      	bcc.n	8001eae <Update_BMS_Mode+0x116>
 8001e9e:	7d3b      	ldrb	r3, [r7, #20]
 8001ea0:	4a69      	ldr	r2, [pc, #420]	@ (8002048 <Update_BMS_Mode+0x2b0>)
 8001ea2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ea6:	4b67      	ldr	r3, [pc, #412]	@ (8002044 <Update_BMS_Mode+0x2ac>)
 8001ea8:	88db      	ldrh	r3, [r3, #6]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d202      	bcs.n	8001eb4 <Update_BMS_Mode+0x11c>
                {
                    all_above_threshold = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	757b      	strb	r3, [r7, #21]
                    break;
 8001eb2:	e005      	b.n	8001ec0 <Update_BMS_Mode+0x128>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001eb4:	7d3b      	ldrb	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	753b      	strb	r3, [r7, #20]
 8001eba:	7d3b      	ldrb	r3, [r7, #20]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d9e6      	bls.n	8001e8e <Update_BMS_Mode+0xf6>
                }
            }
            if (all_above_threshold)
 8001ec0:	7d7b      	ldrb	r3, [r7, #21]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00c      	beq.n	8001ee0 <Update_BMS_Mode+0x148>
            {
                Log_Error("Undervoltage fault cleared");
 8001ec6:	4865      	ldr	r0, [pc, #404]	@ (800205c <Update_BMS_Mode+0x2c4>)
 8001ec8:	f7ff fd8c 	bl	80019e4 <Log_Error>
                error_flags &= ~ERROR_UNDERVOLTAGE;
 8001ecc:	4b55      	ldr	r3, [pc, #340]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 0302 	bic.w	r3, r3, #2
 8001ed4:	4a53      	ldr	r2, [pc, #332]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001ed6:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0;
 8001ed8:	4b53      	ldr	r3, [pc, #332]	@ (8002028 <Update_BMS_Mode+0x290>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e30b      	b.n	80024f8 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 8001ee0:	f003 fa6e 	bl	80053c0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b51      	ldr	r3, [pc, #324]	@ (800202c <Update_BMS_Mode+0x294>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	1ad2      	subs	r2, r2, r3
 8001eec:	4b58      	ldr	r3, [pc, #352]	@ (8002050 <Update_BMS_Mode+0x2b8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f0c0 8301 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
            {
                Log_Error("Undervoltage fault persists, triggering system reset");
 8001ef6:	485a      	ldr	r0, [pc, #360]	@ (8002060 <Update_BMS_Mode+0x2c8>)
 8001ef8:	f7ff fd74 	bl	80019e4 <Log_Error>
                HAL_NVIC_SystemReset();
 8001efc:	f004 fef5 	bl	8006cea <HAL_NVIC_SystemReset>
 8001f00:	e2fa      	b.n	80024f8 <Update_BMS_Mode+0x760>
            }
        }
        else if (error_flags & ERROR_OCC)
 8001f02:	4b48      	ldr	r3, [pc, #288]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d041      	beq.n	8001f92 <Update_BMS_Mode+0x1fa>
        {
            charge_enabled = 0;
 8001f0e:	4b49      	ldr	r3, [pc, #292]	@ (8002034 <Update_BMS_Mode+0x29c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 1;
 8001f14:	4b48      	ldr	r3, [pc, #288]	@ (8002038 <Update_BMS_Mode+0x2a0>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging due to overcurrent charge");
 8001f1a:	4852      	ldr	r0, [pc, #328]	@ (8002064 <Update_BMS_Mode+0x2cc>)
 8001f1c:	f7ff fd62 	bl	80019e4 <Log_Error>

            if (HAL_GetTick() - fault_start_time >= COOLDOWN_PERIOD)
 8001f20:	f003 fa4e 	bl	80053c0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b41      	ldr	r3, [pc, #260]	@ (800202c <Update_BMS_Mode+0x294>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	1ad2      	subs	r2, r2, r3
 8001f2c:	4b4e      	ldr	r3, [pc, #312]	@ (8002068 <Update_BMS_Mode+0x2d0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f0c0 82e1 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
            {
                int16_t total_current = (pack_current_1 + pack_current_2) / 2;
 8001f36:	4b4d      	ldr	r3, [pc, #308]	@ (800206c <Update_BMS_Mode+0x2d4>)
 8001f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8002070 <Update_BMS_Mode+0x2d8>)
 8001f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f44:	4413      	add	r3, r2
 8001f46:	0fda      	lsrs	r2, r3, #31
 8001f48:	4413      	add	r3, r2
 8001f4a:	105b      	asrs	r3, r3, #1
 8001f4c:	817b      	strh	r3, [r7, #10]
                if (total_current >= 0)
 8001f4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db0c      	blt.n	8001f70 <Update_BMS_Mode+0x1d8>
                {
                    Log_Error("Overcurrent charge fault cleared");
 8001f56:	4847      	ldr	r0, [pc, #284]	@ (8002074 <Update_BMS_Mode+0x2dc>)
 8001f58:	f7ff fd44 	bl	80019e4 <Log_Error>
                    error_flags &= ~ERROR_OCC;
 8001f5c:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	4a2f      	ldr	r2, [pc, #188]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001f66:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;
 8001f68:	4b2f      	ldr	r3, [pc, #188]	@ (8002028 <Update_BMS_Mode+0x290>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e2c3      	b.n	80024f8 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 8001f70:	f003 fa26 	bl	80053c0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b2d      	ldr	r3, [pc, #180]	@ (800202c <Update_BMS_Mode+0x294>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	1ad2      	subs	r2, r2, r3
 8001f7c:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <Update_BMS_Mode+0x2b8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f0c0 82b9 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
                {
                    Log_Error("Overcurrent charge fault persists, triggering system reset");
 8001f86:	483c      	ldr	r0, [pc, #240]	@ (8002078 <Update_BMS_Mode+0x2e0>)
 8001f88:	f7ff fd2c 	bl	80019e4 <Log_Error>
                    HAL_NVIC_SystemReset();
 8001f8c:	f004 fead 	bl	8006cea <HAL_NVIC_SystemReset>
 8001f90:	e2b2      	b.n	80024f8 <Update_BMS_Mode+0x760>
                }
            }
        }
        else if (error_flags & ERROR_OCD)
 8001f92:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d074      	beq.n	8002088 <Update_BMS_Mode+0x2f0>
        {
            charge_enabled = 1;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <Update_BMS_Mode+0x29c>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 8001fa4:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <Update_BMS_Mode+0x2a0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled discharging due to overcurrent discharge");
 8001faa:	4834      	ldr	r0, [pc, #208]	@ (800207c <Update_BMS_Mode+0x2e4>)
 8001fac:	f7ff fd1a 	bl	80019e4 <Log_Error>

            if (HAL_GetTick() - fault_start_time >= COOLDOWN_PERIOD)
 8001fb0:	f003 fa06 	bl	80053c0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <Update_BMS_Mode+0x294>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	1ad2      	subs	r2, r2, r3
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <Update_BMS_Mode+0x2d0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f0c0 8299 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
            {
                int16_t total_current = (pack_current_1 + pack_current_2) / 2;
 8001fc6:	4b29      	ldr	r3, [pc, #164]	@ (800206c <Update_BMS_Mode+0x2d4>)
 8001fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b28      	ldr	r3, [pc, #160]	@ (8002070 <Update_BMS_Mode+0x2d8>)
 8001fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	0fda      	lsrs	r2, r3, #31
 8001fd8:	4413      	add	r3, r2
 8001fda:	105b      	asrs	r3, r3, #1
 8001fdc:	81bb      	strh	r3, [r7, #12]
                if (total_current <= 0)
 8001fde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	dc0c      	bgt.n	8002000 <Update_BMS_Mode+0x268>
                {
                    Log_Error("Overcurrent discharge fault cleared");
 8001fe6:	4826      	ldr	r0, [pc, #152]	@ (8002080 <Update_BMS_Mode+0x2e8>)
 8001fe8:	f7ff fcfc 	bl	80019e4 <Log_Error>
                    error_flags &= ~ERROR_OCD;
 8001fec:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 0308 	bic.w	r3, r3, #8
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8002024 <Update_BMS_Mode+0x28c>)
 8001ff6:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <Update_BMS_Mode+0x290>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e27b      	b.n	80024f8 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 8002000:	f003 f9de 	bl	80053c0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	4b09      	ldr	r3, [pc, #36]	@ (800202c <Update_BMS_Mode+0x294>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	1ad2      	subs	r2, r2, r3
 800200c:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <Update_BMS_Mode+0x2b8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	f0c0 8271 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
                {
                    Log_Error("Overcurrent discharge fault persists, triggering system reset");
 8002016:	481b      	ldr	r0, [pc, #108]	@ (8002084 <Update_BMS_Mode+0x2ec>)
 8002018:	f7ff fce4 	bl	80019e4 <Log_Error>
                    HAL_NVIC_SystemReset();
 800201c:	f004 fe65 	bl	8006cea <HAL_NVIC_SystemReset>
 8002020:	e26a      	b.n	80024f8 <Update_BMS_Mode+0x760>
 8002022:	bf00      	nop
 8002024:	200005fc 	.word	0x200005fc
 8002028:	20000639 	.word	0x20000639
 800202c:	2000063c 	.word	0x2000063c
 8002030:	20000008 	.word	0x20000008
 8002034:	200005f9 	.word	0x200005f9
 8002038:	20000009 	.word	0x20000009
 800203c:	08010a00 	.word	0x08010a00
 8002040:	200004e0 	.word	0x200004e0
 8002044:	2000000c 	.word	0x2000000c
 8002048:	200004e8 	.word	0x200004e8
 800204c:	08010a38 	.word	0x08010a38
 8002050:	080116f0 	.word	0x080116f0
 8002054:	08010a54 	.word	0x08010a54
 8002058:	08010a88 	.word	0x08010a88
 800205c:	08010ac4 	.word	0x08010ac4
 8002060:	08010ae0 	.word	0x08010ae0
 8002064:	08010b18 	.word	0x08010b18
 8002068:	080116f4 	.word	0x080116f4
 800206c:	200004f0 	.word	0x200004f0
 8002070:	200004f2 	.word	0x200004f2
 8002074:	08010b58 	.word	0x08010b58
 8002078:	08010b7c 	.word	0x08010b7c
 800207c:	08010bb8 	.word	0x08010bb8
 8002080:	08010c00 	.word	0x08010c00
 8002084:	08010c24 	.word	0x08010c24
                }
            }
        }
        else if (error_flags & ERROR_SCD)
 8002088:	4b9e      	ldr	r3, [pc, #632]	@ (8002304 <Update_BMS_Mode+0x56c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	d04b      	beq.n	800212c <Update_BMS_Mode+0x394>
        {
            charge_enabled = 0;
 8002094:	4b9c      	ldr	r3, [pc, #624]	@ (8002308 <Update_BMS_Mode+0x570>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 800209a:	4b9c      	ldr	r3, [pc, #624]	@ (800230c <Update_BMS_Mode+0x574>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to short-circuit discharge");
 80020a0:	489b      	ldr	r0, [pc, #620]	@ (8002310 <Update_BMS_Mode+0x578>)
 80020a2:	f7ff fc9f 	bl	80019e4 <Log_Error>

            if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 80020a6:	f003 f98b 	bl	80053c0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b99      	ldr	r3, [pc, #612]	@ (8002314 <Update_BMS_Mode+0x57c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	1ad2      	subs	r2, r2, r3
 80020b2:	4b99      	ldr	r3, [pc, #612]	@ (8002318 <Update_BMS_Mode+0x580>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	f0c0 821e 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
            {
                uint8_t status1, status2;
                uint8_t scd_cleared = 1;
 80020bc:	2301      	movs	r3, #1
 80020be:	74fb      	strb	r3, [r7, #19]
                if (BQ76920_ReadStatus(&hi2c1, &status1) == HAL_OK && (status1 & (1 << 3)))
 80020c0:	f107 0309 	add.w	r3, r7, #9
 80020c4:	4619      	mov	r1, r3
 80020c6:	4895      	ldr	r0, [pc, #596]	@ (800231c <Update_BMS_Mode+0x584>)
 80020c8:	f7ff f9b8 	bl	800143c <BQ76920_ReadStatus>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <Update_BMS_Mode+0x348>
 80020d2:	7a7b      	ldrb	r3, [r7, #9]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <Update_BMS_Mode+0x348>
                {
                    scd_cleared = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	74fb      	strb	r3, [r7, #19]
                }
                if (BQ76920_ReadStatus(&hi2c2, &status2) == HAL_OK && (status2 & (1 << 3)))
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	4619      	mov	r1, r3
 80020e6:	488e      	ldr	r0, [pc, #568]	@ (8002320 <Update_BMS_Mode+0x588>)
 80020e8:	f7ff f9a8 	bl	800143c <BQ76920_ReadStatus>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <Update_BMS_Mode+0x368>
 80020f2:	7a3b      	ldrb	r3, [r7, #8]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <Update_BMS_Mode+0x368>
                {
                    scd_cleared = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	74fb      	strb	r3, [r7, #19]
                }
                if (scd_cleared)
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00c      	beq.n	8002120 <Update_BMS_Mode+0x388>
                {
                    Log_Error("Short-circuit discharge fault cleared");
 8002106:	4887      	ldr	r0, [pc, #540]	@ (8002324 <Update_BMS_Mode+0x58c>)
 8002108:	f7ff fc6c 	bl	80019e4 <Log_Error>
                    error_flags &= ~ERROR_SCD;
 800210c:	4b7d      	ldr	r3, [pc, #500]	@ (8002304 <Update_BMS_Mode+0x56c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 0310 	bic.w	r3, r3, #16
 8002114:	4a7b      	ldr	r2, [pc, #492]	@ (8002304 <Update_BMS_Mode+0x56c>)
 8002116:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;
 8002118:	4b83      	ldr	r3, [pc, #524]	@ (8002328 <Update_BMS_Mode+0x590>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e1eb      	b.n	80024f8 <Update_BMS_Mode+0x760>
                }
                else
                {
                    Log_Error("Short-circuit discharge fault persists, triggering system reset");
 8002120:	4882      	ldr	r0, [pc, #520]	@ (800232c <Update_BMS_Mode+0x594>)
 8002122:	f7ff fc5f 	bl	80019e4 <Log_Error>
                    HAL_NVIC_SystemReset();
 8002126:	f004 fde0 	bl	8006cea <HAL_NVIC_SystemReset>
 800212a:	e1e5      	b.n	80024f8 <Update_BMS_Mode+0x760>
                }
            }
        }
        else if (error_flags & ERROR_OVERTEMP)
 800212c:	4b75      	ldr	r3, [pc, #468]	@ (8002304 <Update_BMS_Mode+0x56c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d044      	beq.n	80021c2 <Update_BMS_Mode+0x42a>
        {
            charge_enabled = 0;
 8002138:	4b73      	ldr	r3, [pc, #460]	@ (8002308 <Update_BMS_Mode+0x570>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 800213e:	4b73      	ldr	r3, [pc, #460]	@ (800230c <Update_BMS_Mode+0x574>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to overtemperature");
 8002144:	487a      	ldr	r0, [pc, #488]	@ (8002330 <Update_BMS_Mode+0x598>)
 8002146:	f7ff fc4d 	bl	80019e4 <Log_Error>

            if (temperature_1 < (battery_config.overtemp_threshold - 10) && temperature_2 < (battery_config.overtemp_threshold - 10) && pcb_temperature < (battery_config.overtemp_threshold - 10))
 800214a:	4b7a      	ldr	r3, [pc, #488]	@ (8002334 <Update_BMS_Mode+0x59c>)
 800214c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002150:	461a      	mov	r2, r3
 8002152:	4b79      	ldr	r3, [pc, #484]	@ (8002338 <Update_BMS_Mode+0x5a0>)
 8002154:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002158:	3b0a      	subs	r3, #10
 800215a:	429a      	cmp	r2, r3
 800215c:	da20      	bge.n	80021a0 <Update_BMS_Mode+0x408>
 800215e:	4b77      	ldr	r3, [pc, #476]	@ (800233c <Update_BMS_Mode+0x5a4>)
 8002160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002164:	461a      	mov	r2, r3
 8002166:	4b74      	ldr	r3, [pc, #464]	@ (8002338 <Update_BMS_Mode+0x5a0>)
 8002168:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800216c:	3b0a      	subs	r3, #10
 800216e:	429a      	cmp	r2, r3
 8002170:	da16      	bge.n	80021a0 <Update_BMS_Mode+0x408>
 8002172:	4b73      	ldr	r3, [pc, #460]	@ (8002340 <Update_BMS_Mode+0x5a8>)
 8002174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002178:	461a      	mov	r2, r3
 800217a:	4b6f      	ldr	r3, [pc, #444]	@ (8002338 <Update_BMS_Mode+0x5a0>)
 800217c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002180:	3b0a      	subs	r3, #10
 8002182:	429a      	cmp	r2, r3
 8002184:	da0c      	bge.n	80021a0 <Update_BMS_Mode+0x408>
            {
                Log_Error("Overtemperature fault cleared");
 8002186:	486f      	ldr	r0, [pc, #444]	@ (8002344 <Update_BMS_Mode+0x5ac>)
 8002188:	f7ff fc2c 	bl	80019e4 <Log_Error>
                error_flags &= ~ERROR_OVERTEMP;
 800218c:	4b5d      	ldr	r3, [pc, #372]	@ (8002304 <Update_BMS_Mode+0x56c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 0320 	bic.w	r3, r3, #32
 8002194:	4a5b      	ldr	r2, [pc, #364]	@ (8002304 <Update_BMS_Mode+0x56c>)
 8002196:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0;
 8002198:	4b63      	ldr	r3, [pc, #396]	@ (8002328 <Update_BMS_Mode+0x590>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e1ab      	b.n	80024f8 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= TEMP_FAULT_TIMEOUT)
 80021a0:	f003 f90e 	bl	80053c0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002314 <Update_BMS_Mode+0x57c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1ad2      	subs	r2, r2, r3
 80021ac:	4b66      	ldr	r3, [pc, #408]	@ (8002348 <Update_BMS_Mode+0x5b0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f0c0 81a1 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
            {
                Log_Error("Overtemperature fault persists, triggering system reset");
 80021b6:	4865      	ldr	r0, [pc, #404]	@ (800234c <Update_BMS_Mode+0x5b4>)
 80021b8:	f7ff fc14 	bl	80019e4 <Log_Error>
                HAL_NVIC_SystemReset();
 80021bc:	f004 fd95 	bl	8006cea <HAL_NVIC_SystemReset>
 80021c0:	e19a      	b.n	80024f8 <Update_BMS_Mode+0x760>
            }
        }
        else if (error_flags & ERROR_UNDERTEMP)
 80021c2:	4b50      	ldr	r3, [pc, #320]	@ (8002304 <Update_BMS_Mode+0x56c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d03a      	beq.n	8002244 <Update_BMS_Mode+0x4ac>
        {
            charge_enabled = 0;
 80021ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002308 <Update_BMS_Mode+0x570>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 1;
 80021d4:	4b4d      	ldr	r3, [pc, #308]	@ (800230c <Update_BMS_Mode+0x574>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging due to undertemperature");
 80021da:	485d      	ldr	r0, [pc, #372]	@ (8002350 <Update_BMS_Mode+0x5b8>)
 80021dc:	f7ff fc02 	bl	80019e4 <Log_Error>

            if (temperature_1 > (battery_config.undertemp_threshold + 10) && temperature_2 > (battery_config.undertemp_threshold + 10))
 80021e0:	4b54      	ldr	r3, [pc, #336]	@ (8002334 <Update_BMS_Mode+0x59c>)
 80021e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b53      	ldr	r3, [pc, #332]	@ (8002338 <Update_BMS_Mode+0x5a0>)
 80021ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80021ee:	330a      	adds	r3, #10
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dd16      	ble.n	8002222 <Update_BMS_Mode+0x48a>
 80021f4:	4b51      	ldr	r3, [pc, #324]	@ (800233c <Update_BMS_Mode+0x5a4>)
 80021f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002338 <Update_BMS_Mode+0x5a0>)
 80021fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002202:	330a      	adds	r3, #10
 8002204:	429a      	cmp	r2, r3
 8002206:	dd0c      	ble.n	8002222 <Update_BMS_Mode+0x48a>
            {
                Log_Error("Undertemperature fault cleared");
 8002208:	4852      	ldr	r0, [pc, #328]	@ (8002354 <Update_BMS_Mode+0x5bc>)
 800220a:	f7ff fbeb 	bl	80019e4 <Log_Error>
                error_flags &= ~ERROR_UNDERTEMP;
 800220e:	4b3d      	ldr	r3, [pc, #244]	@ (8002304 <Update_BMS_Mode+0x56c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002216:	4a3b      	ldr	r2, [pc, #236]	@ (8002304 <Update_BMS_Mode+0x56c>)
 8002218:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0;
 800221a:	4b43      	ldr	r3, [pc, #268]	@ (8002328 <Update_BMS_Mode+0x590>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e16a      	b.n	80024f8 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= TEMP_FAULT_TIMEOUT)
 8002222:	f003 f8cd 	bl	80053c0 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	4b3a      	ldr	r3, [pc, #232]	@ (8002314 <Update_BMS_Mode+0x57c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	1ad2      	subs	r2, r2, r3
 800222e:	4b46      	ldr	r3, [pc, #280]	@ (8002348 <Update_BMS_Mode+0x5b0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	f0c0 8160 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
            {
                Log_Error("Undertemperature fault persists, triggering system reset");
 8002238:	4847      	ldr	r0, [pc, #284]	@ (8002358 <Update_BMS_Mode+0x5c0>)
 800223a:	f7ff fbd3 	bl	80019e4 <Log_Error>
                HAL_NVIC_SystemReset();
 800223e:	f004 fd54 	bl	8006cea <HAL_NVIC_SystemReset>
 8002242:	e159      	b.n	80024f8 <Update_BMS_Mode+0x760>
            }
        }
        else if (error_flags & ERROR_DISCREPANCY)
 8002244:	4b2f      	ldr	r3, [pc, #188]	@ (8002304 <Update_BMS_Mode+0x56c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 809b 	beq.w	8002388 <Update_BMS_Mode+0x5f0>
        {
            charge_enabled = 0;
 8002252:	4b2d      	ldr	r3, [pc, #180]	@ (8002308 <Update_BMS_Mode+0x570>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 8002258:	4b2c      	ldr	r3, [pc, #176]	@ (800230c <Update_BMS_Mode+0x574>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to redundancy discrepancy");
 800225e:	483f      	ldr	r0, [pc, #252]	@ (800235c <Update_BMS_Mode+0x5c4>)
 8002260:	f7ff fbc0 	bl	80019e4 <Log_Error>

            if (HAL_GetTick() - fault_start_time >= RECOVERY_DELAY)
 8002264:	f003 f8ac 	bl	80053c0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <Update_BMS_Mode+0x57c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	4b3b      	ldr	r3, [pc, #236]	@ (8002360 <Update_BMS_Mode+0x5c8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	f0c0 813f 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
            {
                Log_Error("Attempting to reinitialize BQ76920 ICs to resolve discrepancy");
 800227a:	483a      	ldr	r0, [pc, #232]	@ (8002364 <Update_BMS_Mode+0x5cc>)
 800227c:	f7ff fbb2 	bl	80019e4 <Log_Error>
                if (BQ76920_Init(&hi2c1) != HAL_OK)
 8002280:	4826      	ldr	r0, [pc, #152]	@ (800231c <Update_BMS_Mode+0x584>)
 8002282:	f7fe fecd 	bl	8001020 <BQ76920_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <Update_BMS_Mode+0x4fa>
                {
                    Log_Error("Failed to reinitialize BQ76920 (I2C1)");
 800228c:	4836      	ldr	r0, [pc, #216]	@ (8002368 <Update_BMS_Mode+0x5d0>)
 800228e:	f7ff fba9 	bl	80019e4 <Log_Error>
                }
                if (BQ76920_Init(&hi2c2) != HAL_OK)
 8002292:	4823      	ldr	r0, [pc, #140]	@ (8002320 <Update_BMS_Mode+0x588>)
 8002294:	f7fe fec4 	bl	8001020 <BQ76920_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <Update_BMS_Mode+0x50c>
                {
                    Log_Error("Failed to reinitialize BQ76920 (I2C2)");
 800229e:	4833      	ldr	r0, [pc, #204]	@ (800236c <Update_BMS_Mode+0x5d4>)
 80022a0:	f7ff fba0 	bl	80019e4 <Log_Error>
                }

                uint8_t discrepancy_flag = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	71fb      	strb	r3, [r7, #7]
                BQ76920_CheckRedundancy(group_voltages_1, group_voltages_2, pack_current_1, pack_current_2, &discrepancy_flag);
 80022a8:	4b31      	ldr	r3, [pc, #196]	@ (8002370 <Update_BMS_Mode+0x5d8>)
 80022aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022ae:	4b31      	ldr	r3, [pc, #196]	@ (8002374 <Update_BMS_Mode+0x5dc>)
 80022b0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	460b      	mov	r3, r1
 80022ba:	492f      	ldr	r1, [pc, #188]	@ (8002378 <Update_BMS_Mode+0x5e0>)
 80022bc:	482f      	ldr	r0, [pc, #188]	@ (800237c <Update_BMS_Mode+0x5e4>)
 80022be:	f7ff f901 	bl	80014c4 <BQ76920_CheckRedundancy>
                if (!discrepancy_flag)
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10c      	bne.n	80022e2 <Update_BMS_Mode+0x54a>
                {
                    Log_Error("Redundancy discrepancy fault cleared");
 80022c8:	482d      	ldr	r0, [pc, #180]	@ (8002380 <Update_BMS_Mode+0x5e8>)
 80022ca:	f7ff fb8b 	bl	80019e4 <Log_Error>
                    error_flags &= ~ERROR_DISCREPANCY;
 80022ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <Update_BMS_Mode+0x56c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002304 <Update_BMS_Mode+0x56c>)
 80022d8:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;
 80022da:	4b13      	ldr	r3, [pc, #76]	@ (8002328 <Update_BMS_Mode+0x590>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e10a      	b.n	80024f8 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 80022e2:	f003 f86d 	bl	80053c0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <Update_BMS_Mode+0x57c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	1ad2      	subs	r2, r2, r3
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <Update_BMS_Mode+0x580>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	f0c0 8100 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
                {
                    Log_Error("Redundancy discrepancy fault persists, triggering system reset");
 80022f8:	4822      	ldr	r0, [pc, #136]	@ (8002384 <Update_BMS_Mode+0x5ec>)
 80022fa:	f7ff fb73 	bl	80019e4 <Log_Error>
                    HAL_NVIC_SystemReset();
 80022fe:	f004 fcf4 	bl	8006cea <HAL_NVIC_SystemReset>
 8002302:	e0f9      	b.n	80024f8 <Update_BMS_Mode+0x760>
 8002304:	200005fc 	.word	0x200005fc
 8002308:	200005f9 	.word	0x200005f9
 800230c:	20000009 	.word	0x20000009
 8002310:	08010c64 	.word	0x08010c64
 8002314:	2000063c 	.word	0x2000063c
 8002318:	080116f0 	.word	0x080116f0
 800231c:	2000029c 	.word	0x2000029c
 8002320:	200002f0 	.word	0x200002f0
 8002324:	08010cb8 	.word	0x08010cb8
 8002328:	20000639 	.word	0x20000639
 800232c:	08010ce0 	.word	0x08010ce0
 8002330:	08010d20 	.word	0x08010d20
 8002334:	200004f4 	.word	0x200004f4
 8002338:	2000000c 	.word	0x2000000c
 800233c:	200004f6 	.word	0x200004f6
 8002340:	200004f8 	.word	0x200004f8
 8002344:	08010d6c 	.word	0x08010d6c
 8002348:	080116f8 	.word	0x080116f8
 800234c:	08010d8c 	.word	0x08010d8c
 8002350:	08010dc4 	.word	0x08010dc4
 8002354:	08010e04 	.word	0x08010e04
 8002358:	08010e24 	.word	0x08010e24
 800235c:	08010e60 	.word	0x08010e60
 8002360:	080116fc 	.word	0x080116fc
 8002364:	08010eb4 	.word	0x08010eb4
 8002368:	08010ef4 	.word	0x08010ef4
 800236c:	08010f1c 	.word	0x08010f1c
 8002370:	200004f0 	.word	0x200004f0
 8002374:	200004f2 	.word	0x200004f2
 8002378:	200004e8 	.word	0x200004e8
 800237c:	200004e0 	.word	0x200004e0
 8002380:	08010f44 	.word	0x08010f44
 8002384:	08010f6c 	.word	0x08010f6c
                }
            }
        }
        else if (error_flags & ERROR_DEVICE_XREADY)
 8002388:	4b9c      	ldr	r3, [pc, #624]	@ (80025fc <Update_BMS_Mode+0x864>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d059      	beq.n	8002448 <Update_BMS_Mode+0x6b0>
        {
            charge_enabled = 0;
 8002394:	4b9a      	ldr	r3, [pc, #616]	@ (8002600 <Update_BMS_Mode+0x868>)
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 800239a:	4b9a      	ldr	r3, [pc, #616]	@ (8002604 <Update_BMS_Mode+0x86c>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to DEVICE_XREADY");
 80023a0:	4899      	ldr	r0, [pc, #612]	@ (8002608 <Update_BMS_Mode+0x870>)
 80023a2:	f7ff fb1f 	bl	80019e4 <Log_Error>

            if (HAL_GetTick() - fault_start_time >= RECOVERY_DELAY)
 80023a6:	f003 f80b 	bl	80053c0 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	4b97      	ldr	r3, [pc, #604]	@ (800260c <Update_BMS_Mode+0x874>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	1ad2      	subs	r2, r2, r3
 80023b2:	4b97      	ldr	r3, [pc, #604]	@ (8002610 <Update_BMS_Mode+0x878>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	f0c0 809e 	bcc.w	80024f8 <Update_BMS_Mode+0x760>
            {
                recovery_attempts++;
 80023bc:	4b95      	ldr	r3, [pc, #596]	@ (8002614 <Update_BMS_Mode+0x87c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	4b93      	ldr	r3, [pc, #588]	@ (8002614 <Update_BMS_Mode+0x87c>)
 80023c6:	701a      	strb	r2, [r3, #0]
                Log_Error("Attempting to reinitialize BQ76920 ICs (attempt %d)", recovery_attempts);
 80023c8:	4b92      	ldr	r3, [pc, #584]	@ (8002614 <Update_BMS_Mode+0x87c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	4892      	ldr	r0, [pc, #584]	@ (8002618 <Update_BMS_Mode+0x880>)
 80023d0:	f7ff fb08 	bl	80019e4 <Log_Error>
                uint8_t init_success = 1;
 80023d4:	2301      	movs	r3, #1
 80023d6:	74bb      	strb	r3, [r7, #18]
                if (BQ76920_Init(&hi2c1) != HAL_OK)
 80023d8:	4890      	ldr	r0, [pc, #576]	@ (800261c <Update_BMS_Mode+0x884>)
 80023da:	f7fe fe21 	bl	8001020 <BQ76920_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <Update_BMS_Mode+0x656>
                {
                    Log_Error("Failed to reinitialize BQ76920 (I2C1)");
 80023e4:	488e      	ldr	r0, [pc, #568]	@ (8002620 <Update_BMS_Mode+0x888>)
 80023e6:	f7ff fafd 	bl	80019e4 <Log_Error>
                    init_success = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	74bb      	strb	r3, [r7, #18]
                }
                if (BQ76920_Init(&hi2c2) != HAL_OK)
 80023ee:	488d      	ldr	r0, [pc, #564]	@ (8002624 <Update_BMS_Mode+0x88c>)
 80023f0:	f7fe fe16 	bl	8001020 <BQ76920_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <Update_BMS_Mode+0x66c>
                {
                    Log_Error("Failed to reinitialize BQ76920 (I2C2)");
 80023fa:	488b      	ldr	r0, [pc, #556]	@ (8002628 <Update_BMS_Mode+0x890>)
 80023fc:	f7ff faf2 	bl	80019e4 <Log_Error>
                    init_success = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	74bb      	strb	r3, [r7, #18]
                }

                if (init_success)
 8002404:	7cbb      	ldrb	r3, [r7, #18]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00f      	beq.n	800242a <Update_BMS_Mode+0x692>
                {
                    Log_Error("DEVICE_XREADY fault cleared");
 800240a:	4888      	ldr	r0, [pc, #544]	@ (800262c <Update_BMS_Mode+0x894>)
 800240c:	f7ff faea 	bl	80019e4 <Log_Error>
                    error_flags &= ~ERROR_DEVICE_XREADY;
 8002410:	4b7a      	ldr	r3, [pc, #488]	@ (80025fc <Update_BMS_Mode+0x864>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002418:	4a78      	ldr	r2, [pc, #480]	@ (80025fc <Update_BMS_Mode+0x864>)
 800241a:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;
 800241c:	4b84      	ldr	r3, [pc, #528]	@ (8002630 <Update_BMS_Mode+0x898>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
                    recovery_attempts = 0;
 8002422:	4b7c      	ldr	r3, [pc, #496]	@ (8002614 <Update_BMS_Mode+0x87c>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
 8002428:	e066      	b.n	80024f8 <Update_BMS_Mode+0x760>
                }
                else if (recovery_attempts >= MAX_RECOVERY_ATTEMPTS)
 800242a:	4b7a      	ldr	r3, [pc, #488]	@ (8002614 <Update_BMS_Mode+0x87c>)
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	4b81      	ldr	r3, [pc, #516]	@ (8002634 <Update_BMS_Mode+0x89c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d360      	bcc.n	80024f8 <Update_BMS_Mode+0x760>
                {
                    Log_Error("Failed to recover from DEVICE_XREADY after %d attempts, triggering system reset", MAX_RECOVERY_ATTEMPTS);
 8002436:	4b7f      	ldr	r3, [pc, #508]	@ (8002634 <Update_BMS_Mode+0x89c>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	4619      	mov	r1, r3
 800243c:	487e      	ldr	r0, [pc, #504]	@ (8002638 <Update_BMS_Mode+0x8a0>)
 800243e:	f7ff fad1 	bl	80019e4 <Log_Error>
                    HAL_NVIC_SystemReset();
 8002442:	f004 fc52 	bl	8006cea <HAL_NVIC_SystemReset>
 8002446:	e057      	b.n	80024f8 <Update_BMS_Mode+0x760>
                }
            }
        }
        else if (error_flags & ERROR_OVRD_ALERT)
 8002448:	4b6c      	ldr	r3, [pc, #432]	@ (80025fc <Update_BMS_Mode+0x864>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002450:	2b00      	cmp	r3, #0
 8002452:	d051      	beq.n	80024f8 <Update_BMS_Mode+0x760>
        {
            charge_enabled = 0;
 8002454:	4b6a      	ldr	r3, [pc, #424]	@ (8002600 <Update_BMS_Mode+0x868>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 800245a:	4b6a      	ldr	r3, [pc, #424]	@ (8002604 <Update_BMS_Mode+0x86c>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to OVRD_ALERT");
 8002460:	4876      	ldr	r0, [pc, #472]	@ (800263c <Update_BMS_Mode+0x8a4>)
 8002462:	f7ff fabf 	bl	80019e4 <Log_Error>

            if (HAL_GetTick() - fault_start_time >= COOLDOWN_PERIOD)
 8002466:	f002 ffab 	bl	80053c0 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	4b67      	ldr	r3, [pc, #412]	@ (800260c <Update_BMS_Mode+0x874>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	1ad2      	subs	r2, r2, r3
 8002472:	4b73      	ldr	r3, [pc, #460]	@ (8002640 <Update_BMS_Mode+0x8a8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d33e      	bcc.n	80024f8 <Update_BMS_Mode+0x760>
            {
                uint8_t status1, status2;
                uint8_t alert_cleared = 1;
 800247a:	2301      	movs	r3, #1
 800247c:	747b      	strb	r3, [r7, #17]
                if (BQ76920_ReadStatus(&hi2c1, &status1) == HAL_OK && (status1 & (1 << 6)))
 800247e:	1dbb      	adds	r3, r7, #6
 8002480:	4619      	mov	r1, r3
 8002482:	4866      	ldr	r0, [pc, #408]	@ (800261c <Update_BMS_Mode+0x884>)
 8002484:	f7fe ffda 	bl	800143c <BQ76920_ReadStatus>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <Update_BMS_Mode+0x704>
 800248e:	79bb      	ldrb	r3, [r7, #6]
 8002490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <Update_BMS_Mode+0x704>
                {
                    alert_cleared = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	747b      	strb	r3, [r7, #17]
                }
                if (BQ76920_ReadStatus(&hi2c2, &status2) == HAL_OK && (status2 & (1 << 6)))
 800249c:	1d7b      	adds	r3, r7, #5
 800249e:	4619      	mov	r1, r3
 80024a0:	4860      	ldr	r0, [pc, #384]	@ (8002624 <Update_BMS_Mode+0x88c>)
 80024a2:	f7fe ffcb 	bl	800143c <BQ76920_ReadStatus>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d106      	bne.n	80024ba <Update_BMS_Mode+0x722>
 80024ac:	797b      	ldrb	r3, [r7, #5]
 80024ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <Update_BMS_Mode+0x722>
                {
                    alert_cleared = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	747b      	strb	r3, [r7, #17]
                }
                if (alert_cleared)
 80024ba:	7c7b      	ldrb	r3, [r7, #17]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00c      	beq.n	80024da <Update_BMS_Mode+0x742>
                {
                    Log_Error("OVRD_ALERT fault cleared");
 80024c0:	4860      	ldr	r0, [pc, #384]	@ (8002644 <Update_BMS_Mode+0x8ac>)
 80024c2:	f7ff fa8f 	bl	80019e4 <Log_Error>
                    error_flags &= ~ERROR_OVRD_ALERT;
 80024c6:	4b4d      	ldr	r3, [pc, #308]	@ (80025fc <Update_BMS_Mode+0x864>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024ce:	4a4b      	ldr	r2, [pc, #300]	@ (80025fc <Update_BMS_Mode+0x864>)
 80024d0:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;
 80024d2:	4b57      	ldr	r3, [pc, #348]	@ (8002630 <Update_BMS_Mode+0x898>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e00e      	b.n	80024f8 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 80024da:	f002 ff71 	bl	80053c0 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b4a      	ldr	r3, [pc, #296]	@ (800260c <Update_BMS_Mode+0x874>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	1ad2      	subs	r2, r2, r3
 80024e6:	4b58      	ldr	r3, [pc, #352]	@ (8002648 <Update_BMS_Mode+0x8b0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d304      	bcc.n	80024f8 <Update_BMS_Mode+0x760>
                {
                    Log_Error("OVRD_ALERT fault persists, triggering system reset");
 80024ee:	4857      	ldr	r0, [pc, #348]	@ (800264c <Update_BMS_Mode+0x8b4>)
 80024f0:	f7ff fa78 	bl	80019e4 <Log_Error>
                    HAL_NVIC_SystemReset();
 80024f4:	f004 fbf9 	bl	8006cea <HAL_NVIC_SystemReset>
                }
            }
        }

        BQ76920_SetChargeEnable(&hi2c1, charge_enabled, discharge_enabled);
 80024f8:	4b41      	ldr	r3, [pc, #260]	@ (8002600 <Update_BMS_Mode+0x868>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4a41      	ldr	r2, [pc, #260]	@ (8002604 <Update_BMS_Mode+0x86c>)
 80024fe:	7812      	ldrb	r2, [r2, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	4846      	ldr	r0, [pc, #280]	@ (800261c <Update_BMS_Mode+0x884>)
 8002504:	f7fe ff42 	bl	800138c <BQ76920_SetChargeEnable>
        BQ76920_SetChargeEnable(&hi2c2, charge_enabled, discharge_enabled);
 8002508:	4b3d      	ldr	r3, [pc, #244]	@ (8002600 <Update_BMS_Mode+0x868>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4a3d      	ldr	r2, [pc, #244]	@ (8002604 <Update_BMS_Mode+0x86c>)
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	4844      	ldr	r0, [pc, #272]	@ (8002624 <Update_BMS_Mode+0x88c>)
 8002514:	f7fe ff3a 	bl	800138c <BQ76920_SetChargeEnable>
        return;
 8002518:	e06c      	b.n	80025f4 <Update_BMS_Mode+0x85c>
    }

    in_fault_mode = 0;
 800251a:	4b45      	ldr	r3, [pc, #276]	@ (8002630 <Update_BMS_Mode+0x898>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
    recovery_attempts = 0;
 8002520:	4b3c      	ldr	r3, [pc, #240]	@ (8002614 <Update_BMS_Mode+0x87c>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]

    charge_immediately = (soc < battery_config.soc_low_threshold) ? 1 : 0;
 8002526:	4b4a      	ldr	r3, [pc, #296]	@ (8002650 <Update_BMS_Mode+0x8b8>)
 8002528:	ed93 7a04 	vldr	s14, [r3, #16]
 800252c:	4b49      	ldr	r3, [pc, #292]	@ (8002654 <Update_BMS_Mode+0x8bc>)
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253a:	bfcc      	ite	gt
 800253c:	2301      	movgt	r3, #1
 800253e:	2300      	movle	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	4b44      	ldr	r3, [pc, #272]	@ (8002658 <Update_BMS_Mode+0x8c0>)
 8002546:	701a      	strb	r2, [r3, #0]

    int16_t total_current = (pack_current_1 + pack_current_2) / 2;
 8002548:	4b44      	ldr	r3, [pc, #272]	@ (800265c <Update_BMS_Mode+0x8c4>)
 800254a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254e:	461a      	mov	r2, r3
 8002550:	4b43      	ldr	r3, [pc, #268]	@ (8002660 <Update_BMS_Mode+0x8c8>)
 8002552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002556:	4413      	add	r3, r2
 8002558:	0fda      	lsrs	r2, r3, #31
 800255a:	4413      	add	r3, r2
 800255c:	105b      	asrs	r3, r3, #1
 800255e:	81fb      	strh	r3, [r7, #14]
    if (total_current < 0) {
 8002560:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002564:	2b00      	cmp	r3, #0
 8002566:	da09      	bge.n	800257c <Update_BMS_Mode+0x7e4>
        bms_mode = MODE_CHARGING;
 8002568:	4b3e      	ldr	r3, [pc, #248]	@ (8002664 <Update_BMS_Mode+0x8cc>)
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
        charge_enabled = 1;
 800256e:	4b24      	ldr	r3, [pc, #144]	@ (8002600 <Update_BMS_Mode+0x868>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 0;
 8002574:	4b23      	ldr	r3, [pc, #140]	@ (8002604 <Update_BMS_Mode+0x86c>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e02b      	b.n	80025d4 <Update_BMS_Mode+0x83c>
    } else if (total_current > 0) {
 800257c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002580:	2b00      	cmp	r3, #0
 8002582:	dd09      	ble.n	8002598 <Update_BMS_Mode+0x800>
        bms_mode = MODE_DISCHARGING;
 8002584:	4b37      	ldr	r3, [pc, #220]	@ (8002664 <Update_BMS_Mode+0x8cc>)
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
        charge_enabled = 0;
 800258a:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <Update_BMS_Mode+0x868>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 1;
 8002590:	4b1c      	ldr	r3, [pc, #112]	@ (8002604 <Update_BMS_Mode+0x86c>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	e01d      	b.n	80025d4 <Update_BMS_Mode+0x83c>
    } else {
        if (soc < battery_config.soc_low_threshold) {
 8002598:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <Update_BMS_Mode+0x8b8>)
 800259a:	ed93 7a04 	vldr	s14, [r3, #16]
 800259e:	4b2d      	ldr	r3, [pc, #180]	@ (8002654 <Update_BMS_Mode+0x8bc>)
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	dd09      	ble.n	80025c2 <Update_BMS_Mode+0x82a>
            bms_mode = MODE_CHARGING;
 80025ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <Update_BMS_Mode+0x8cc>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
            charge_enabled = 1;
 80025b4:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <Update_BMS_Mode+0x868>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 80025ba:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <Update_BMS_Mode+0x86c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e008      	b.n	80025d4 <Update_BMS_Mode+0x83c>
        } else {
            bms_mode = MODE_SLEEP;
 80025c2:	4b28      	ldr	r3, [pc, #160]	@ (8002664 <Update_BMS_Mode+0x8cc>)
 80025c4:	2203      	movs	r2, #3
 80025c6:	701a      	strb	r2, [r3, #0]
            charge_enabled = 0;
 80025c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <Update_BMS_Mode+0x868>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 80025ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002604 <Update_BMS_Mode+0x86c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
        }
    }

    BQ76920_SetChargeEnable(&hi2c1, charge_enabled, discharge_enabled);
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <Update_BMS_Mode+0x868>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002604 <Update_BMS_Mode+0x86c>)
 80025da:	7812      	ldrb	r2, [r2, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	480f      	ldr	r0, [pc, #60]	@ (800261c <Update_BMS_Mode+0x884>)
 80025e0:	f7fe fed4 	bl	800138c <BQ76920_SetChargeEnable>
    BQ76920_SetChargeEnable(&hi2c2, charge_enabled, discharge_enabled);
 80025e4:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <Update_BMS_Mode+0x868>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	4a06      	ldr	r2, [pc, #24]	@ (8002604 <Update_BMS_Mode+0x86c>)
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	480d      	ldr	r0, [pc, #52]	@ (8002624 <Update_BMS_Mode+0x88c>)
 80025f0:	f7fe fecc 	bl	800138c <BQ76920_SetChargeEnable>
}
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200005fc 	.word	0x200005fc
 8002600:	200005f9 	.word	0x200005f9
 8002604:	20000009 	.word	0x20000009
 8002608:	08010fac 	.word	0x08010fac
 800260c:	2000063c 	.word	0x2000063c
 8002610:	080116fc 	.word	0x080116fc
 8002614:	20000640 	.word	0x20000640
 8002618:	08010ff8 	.word	0x08010ff8
 800261c:	2000029c 	.word	0x2000029c
 8002620:	08010ef4 	.word	0x08010ef4
 8002624:	200002f0 	.word	0x200002f0
 8002628:	08010f1c 	.word	0x08010f1c
 800262c:	0801102c 	.word	0x0801102c
 8002630:	20000639 	.word	0x20000639
 8002634:	08011700 	.word	0x08011700
 8002638:	08011048 	.word	0x08011048
 800263c:	08011098 	.word	0x08011098
 8002640:	080116f4 	.word	0x080116f4
 8002644:	080110e0 	.word	0x080110e0
 8002648:	080116f0 	.word	0x080116f0
 800264c:	080110fc 	.word	0x080110fc
 8002650:	2000000c 	.word	0x2000000c
 8002654:	20000000 	.word	0x20000000
 8002658:	200005fa 	.word	0x200005fa
 800265c:	200004f0 	.word	0x200004f0
 8002660:	200004f2 	.word	0x200004f2
 8002664:	20000008 	.word	0x20000008

08002668 <Read_Internal_Temperature>:
/**
  * @brief  Reads the internal temperature sensor of the STM32
  * @retval Temperature in °C
  */
int16_t Read_Internal_Temperature(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 800266e:	4813      	ldr	r0, [pc, #76]	@ (80026bc <Read_Internal_Temperature+0x54>)
 8002670:	f003 fa58 	bl	8005b24 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	4810      	ldr	r0, [pc, #64]	@ (80026bc <Read_Internal_Temperature+0x54>)
 800267a:	f003 fb41 	bl	8005d00 <HAL_ADC_PollForConversion>
    uint32_t raw = HAL_ADC_GetValue(&hadc1);
 800267e:	480f      	ldr	r0, [pc, #60]	@ (80026bc <Read_Internal_Temperature+0x54>)
 8002680:	f003 fc16 	bl	8005eb0 <HAL_ADC_GetValue>
 8002684:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);
 8002686:	480d      	ldr	r0, [pc, #52]	@ (80026bc <Read_Internal_Temperature+0x54>)
 8002688:	f003 fb06 	bl	8005c98 <HAL_ADC_Stop>

    int32_t temp = ((raw * 3300 / 4096) - 760) * 100 / 250 + 25;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	0b1b      	lsrs	r3, r3, #12
 8002698:	2264      	movs	r2, #100	@ 0x64
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 80026a2:	3be0      	subs	r3, #224	@ 0xe0
 80026a4:	4a06      	ldr	r2, [pc, #24]	@ (80026c0 <Read_Internal_Temperature+0x58>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	3319      	adds	r3, #25
 80026ae:	603b      	str	r3, [r7, #0]
    return (int16_t)temp;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b21b      	sxth	r3, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000238 	.word	0x20000238
 80026c0:	10624dd3 	.word	0x10624dd3

080026c4 <SSP_SendStatus>:
/**
  * @brief  Sends the current BMS status to the OBC using SSP
  * @retval None
  */
void SSP_SendStatus(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0a6      	sub	sp, #152	@ 0x98
 80026c8:	af00      	add	r7, sp, #0
    SSP_TelemetryTypeDef telemetry = {0};
 80026ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80026ce:	2238      	movs	r2, #56	@ 0x38
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f00a fc2c 	bl	800cf30 <memset>
    SSP_FrameTypeDef frame = {0};
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	2246      	movs	r2, #70	@ 0x46
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f00a fc25 	bl	800cf30 <memset>
    uint16_t frame_len;

    uint32_t pack_voltage = group_voltages_1[0] + group_voltages_1[1] + group_voltages_1[2] + group_voltages_1[3];
 80026e6:	4b58      	ldr	r3, [pc, #352]	@ (8002848 <SSP_SendStatus+0x184>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b56      	ldr	r3, [pc, #344]	@ (8002848 <SSP_SendStatus+0x184>)
 80026ee:	885b      	ldrh	r3, [r3, #2]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a55      	ldr	r2, [pc, #340]	@ (8002848 <SSP_SendStatus+0x184>)
 80026f4:	8892      	ldrh	r2, [r2, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a53      	ldr	r2, [pc, #332]	@ (8002848 <SSP_SendStatus+0x184>)
 80026fa:	88d2      	ldrh	r2, [r2, #6]
 80026fc:	4413      	add	r3, r2
 80026fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    telemetry.charge_immediately = charge_immediately;
 8002702:	4b52      	ldr	r3, [pc, #328]	@ (800284c <SSP_SendStatus+0x188>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    telemetry.bms_online = bms_online;
 800270a:	4b51      	ldr	r3, [pc, #324]	@ (8002850 <SSP_SendStatus+0x18c>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    telemetry.error_flags = error_flags;
 8002712:	4b50      	ldr	r3, [pc, #320]	@ (8002854 <SSP_SendStatus+0x190>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	663b      	str	r3, [r7, #96]	@ 0x60
    telemetry.pack_voltage_1 = (uint16_t)pack_voltage;
 8002718:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800271c:	b29b      	uxth	r3, r3
 800271e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    telemetry.pack_voltage_2 = (uint16_t)pack_voltage;
 8002722:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002726:	b29b      	uxth	r3, r3
 8002728:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    telemetry.pack_current_1 = pack_current_1;
 800272c:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <SSP_SendStatus+0x194>)
 800272e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002732:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
    telemetry.pack_current_2 = pack_current_2;
 8002736:	4b49      	ldr	r3, [pc, #292]	@ (800285c <SSP_SendStatus+0x198>)
 8002738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800273c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    telemetry.soc = (uint8_t)soc;
 8002740:	4b47      	ldr	r3, [pc, #284]	@ (8002860 <SSP_SendStatus+0x19c>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800274a:	edc7 7a01 	vstr	s15, [r7, #4]
 800274e:	793b      	ldrb	r3, [r7, #4]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    telemetry.soh = (uint8_t)soh;
 8002756:	4b43      	ldr	r3, [pc, #268]	@ (8002864 <SSP_SendStatus+0x1a0>)
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002760:	edc7 7a01 	vstr	s15, [r7, #4]
 8002764:	793b      	ldrb	r3, [r7, #4]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    telemetry.temp_1 = temperature_1;
 800276c:	4b3e      	ldr	r3, [pc, #248]	@ (8002868 <SSP_SendStatus+0x1a4>)
 800276e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002772:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    telemetry.temp_2 = temperature_2;
 8002776:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <SSP_SendStatus+0x1a8>)
 8002778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277c:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    telemetry.pcb_temp = pcb_temperature;
 8002780:	4b3b      	ldr	r3, [pc, #236]	@ (8002870 <SSP_SendStatus+0x1ac>)
 8002782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002786:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 800278a:	2300      	movs	r3, #0
 800278c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8002790:	e013      	b.n	80027ba <SSP_SendStatus+0xf6>
        telemetry.group_voltages[i] = group_voltages_1[i];
 8002792:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8002796:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800279a:	492b      	ldr	r1, [pc, #172]	@ (8002848 <SSP_SendStatus+0x184>)
 800279c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80027a0:	330c      	adds	r3, #12
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	3390      	adds	r3, #144	@ 0x90
 80027a6:	f107 0108 	add.w	r1, r7, #8
 80027aa:	440b      	add	r3, r1
 80027ac:	f823 2c3c 	strh.w	r2, [r3, #-60]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 80027b0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80027b4:	3301      	adds	r3, #1
 80027b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80027ba:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d9e7      	bls.n	8002792 <SSP_SendStatus+0xce>
    }
    telemetry.balancing_active = balancing_active;
 80027c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002874 <SSP_SendStatus+0x1b0>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
    telemetry.balancing_mask_1 = balancing_mask_1;
 80027ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002878 <SSP_SendStatus+0x1b4>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    telemetry.balancing_mask_2 = balancing_mask_2;
 80027d2:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <SSP_SendStatus+0x1b8>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    telemetry.charge_cycle_count = charge_cycle_count;
 80027da:	4b29      	ldr	r3, [pc, #164]	@ (8002880 <SSP_SendStatus+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    telemetry.total_charge_time = total_charge_time;
 80027e2:	4b28      	ldr	r3, [pc, #160]	@ (8002884 <SSP_SendStatus+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    telemetry.total_discharge_time = total_discharge_time;
 80027ea:	4b27      	ldr	r3, [pc, #156]	@ (8002888 <SSP_SendStatus+0x1c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    telemetry.total_operating_time = total_operating_time;
 80027f2:	4b26      	ldr	r3, [pc, #152]	@ (800288c <SSP_SendStatus+0x1c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    SSP_PackTelemetry(&telemetry, &frame);
 80027fa:	f107 0210 	add.w	r2, r7, #16
 80027fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f002 f931 	bl	8004a6c <SSP_PackTelemetry>
    SSP_ConstructFrame(&frame, ssp_tx_buffer, &frame_len);
 800280a:	f107 020e 	add.w	r2, r7, #14
 800280e:	f107 0310 	add.w	r3, r7, #16
 8002812:	491f      	ldr	r1, [pc, #124]	@ (8002890 <SSP_SendStatus+0x1cc>)
 8002814:	4618      	mov	r0, r3
 8002816:	f002 fb44 	bl	8004ea2 <SSP_ConstructFrame>
    // Set DE pin high to transmit
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET);
 800281a:	2201      	movs	r2, #1
 800281c:	2102      	movs	r1, #2
 800281e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002822:	f004 feb1 	bl	8007588 <HAL_GPIO_WritePin>
    SSP_TransmitFrame(&husart2, ssp_tx_buffer, frame_len);
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	461a      	mov	r2, r3
 800282a:	4919      	ldr	r1, [pc, #100]	@ (8002890 <SSP_SendStatus+0x1cc>)
 800282c:	4819      	ldr	r0, [pc, #100]	@ (8002894 <SSP_SendStatus+0x1d0>)
 800282e:	f002 fbba 	bl	8004fa6 <SSP_TransmitFrame>
    // Set DE pin low to receive
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8002832:	2200      	movs	r2, #0
 8002834:	2102      	movs	r1, #2
 8002836:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800283a:	f004 fea5 	bl	8007588 <HAL_GPIO_WritePin>
}
 800283e:	bf00      	nop
 8002840:	3798      	adds	r7, #152	@ 0x98
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200004e0 	.word	0x200004e0
 800284c:	200005fa 	.word	0x200005fa
 8002850:	200005fb 	.word	0x200005fb
 8002854:	200005fc 	.word	0x200005fc
 8002858:	200004f0 	.word	0x200004f0
 800285c:	200004f2 	.word	0x200004f2
 8002860:	20000000 	.word	0x20000000
 8002864:	20000004 	.word	0x20000004
 8002868:	200004f4 	.word	0x200004f4
 800286c:	200004f6 	.word	0x200004f6
 8002870:	200004f8 	.word	0x200004f8
 8002874:	2000061c 	.word	0x2000061c
 8002878:	2000061a 	.word	0x2000061a
 800287c:	2000061b 	.word	0x2000061b
 8002880:	20000600 	.word	0x20000600
 8002884:	20000604 	.word	0x20000604
 8002888:	20000608 	.word	0x20000608
 800288c:	2000060c 	.word	0x2000060c
 8002890:	2000056c 	.word	0x2000056c
 8002894:	20000490 	.word	0x20000490

08002898 <SSP_ProcessReceivedFrame>:
  * @brief  Processes a received SSP frame
  * @param  frame: Pointer to the received SSP frame
  * @retval None
  */
void SSP_ProcessReceivedFrame(SSP_FrameTypeDef *frame)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b0a6      	sub	sp, #152	@ 0x98
 800289c:	af02      	add	r7, sp, #8
 800289e:	6078      	str	r0, [r7, #4]
    // Check if the frame is for the EPS (BMS)
    if (frame->dest != SSP_ADDR_EPS && frame->dest != SSP_ADDR_BROADCAST && frame->dest != SSP_ADDR_MULTICAST) {
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d008      	beq.n	80028ba <SSP_ProcessReceivedFrame+0x22>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2bff      	cmp	r3, #255	@ 0xff
 80028ae:	d004      	beq.n	80028ba <SSP_ProcessReceivedFrame+0x22>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2bfe      	cmp	r3, #254	@ 0xfe
 80028b6:	f040 819a 	bne.w	8002bee <SSP_ProcessReceivedFrame+0x356>
        return;
    }

    // Check if it's a command frame (bit 6 = 0)
    if (frame->cmd_id & SSP_FRAME_TYPE_REPLY) {
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	789b      	ldrb	r3, [r3, #2]
 80028be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 8195 	bne.w	8002bf2 <SSP_ProcessReceivedFrame+0x35a>
        return; // Ignore reply frames
    }

    // Check if it's a time-tagged command (bit 7 = 1)
    if (frame->cmd_id & SSP_CMD_TYPE_TIMETAG) {
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	789b      	ldrb	r3, [r3, #2]
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f2c0 8191 	blt.w	8002bf6 <SSP_ProcessReceivedFrame+0x35e>
        return;
    }

    // Log the received command
    char log_msg[MESSAGE_SIZE];
    snprintf(log_msg, sizeof(log_msg), "Received CMD: ID=0x%02X, SRC=0x%02X, LEN=%d", frame->cmd_id, frame->src, frame->data_len);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	789b      	ldrb	r3, [r3, #2]
 80028d8:	4619      	mov	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	461a      	mov	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	78db      	ldrb	r3, [r3, #3]
 80028e4:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	9200      	str	r2, [sp, #0]
 80028ec:	460b      	mov	r3, r1
 80028ee:	4ac6      	ldr	r2, [pc, #792]	@ (8002c08 <SSP_ProcessReceivedFrame+0x370>)
 80028f0:	2138      	movs	r1, #56	@ 0x38
 80028f2:	f00a fa45 	bl	800cd80 <sniprintf>
    Log_Error(log_msg);
 80028f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f872 	bl	80019e4 <Log_Error>

    // Prepare a response frame
    SSP_FrameTypeDef response = {0};
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	2246      	movs	r2, #70	@ 0x46
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f00a fb11 	bl	800cf30 <memset>
    response.dest = frame->src;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	785b      	ldrb	r3, [r3, #1]
 8002912:	733b      	strb	r3, [r7, #12]
    response.src = SSP_ADDR_EPS;
 8002914:	2301      	movs	r3, #1
 8002916:	737b      	strb	r3, [r7, #13]
    response.data_len = 1; // Default to 1 byte for ACK/NACK data
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
    response.data[0] = frame->cmd_id; // Echo the command ID in the response
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	789b      	ldrb	r3, [r3, #2]
 8002920:	743b      	strb	r3, [r7, #16]

    // Process the command
    switch (frame->cmd_id & 0x3F) { // Mask out the type bits
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	789b      	ldrb	r3, [r3, #2]
 8002926:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800292a:	2b32      	cmp	r3, #50	@ 0x32
 800292c:	f200 8141 	bhi.w	8002bb2 <SSP_ProcessReceivedFrame+0x31a>
 8002930:	a201      	add	r2, pc, #4	@ (adr r2, 8002938 <SSP_ProcessReceivedFrame+0xa0>)
 8002932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002936:	bf00      	nop
 8002938:	08002a05 	.word	0x08002a05
 800293c:	08002bb3 	.word	0x08002bb3
 8002940:	08002bb3 	.word	0x08002bb3
 8002944:	08002bb3 	.word	0x08002bb3
 8002948:	08002bb3 	.word	0x08002bb3
 800294c:	08002bb3 	.word	0x08002bb3
 8002950:	08002bb3 	.word	0x08002bb3
 8002954:	08002bb3 	.word	0x08002bb3
 8002958:	08002bb3 	.word	0x08002bb3
 800295c:	08002bb3 	.word	0x08002bb3
 8002960:	08002bb3 	.word	0x08002bb3
 8002964:	08002a0b 	.word	0x08002a0b
 8002968:	08002a59 	.word	0x08002a59
 800296c:	08002bb3 	.word	0x08002bb3
 8002970:	08002bb3 	.word	0x08002bb3
 8002974:	08002bb3 	.word	0x08002bb3
 8002978:	08002bb3 	.word	0x08002bb3
 800297c:	08002bb3 	.word	0x08002bb3
 8002980:	08002bb3 	.word	0x08002bb3
 8002984:	08002bb3 	.word	0x08002bb3
 8002988:	08002bb3 	.word	0x08002bb3
 800298c:	08002aef 	.word	0x08002aef
 8002990:	08002b15 	.word	0x08002b15
 8002994:	08002bb3 	.word	0x08002bb3
 8002998:	08002bb3 	.word	0x08002bb3
 800299c:	08002bb3 	.word	0x08002bb3
 80029a0:	08002bb3 	.word	0x08002bb3
 80029a4:	08002b2b 	.word	0x08002b2b
 80029a8:	08002bb3 	.word	0x08002bb3
 80029ac:	08002bb3 	.word	0x08002bb3
 80029b0:	08002bb3 	.word	0x08002bb3
 80029b4:	08002bb3 	.word	0x08002bb3
 80029b8:	08002bb3 	.word	0x08002bb3
 80029bc:	08002bad 	.word	0x08002bad
 80029c0:	08002bad 	.word	0x08002bad
 80029c4:	08002bb3 	.word	0x08002bb3
 80029c8:	08002bb3 	.word	0x08002bb3
 80029cc:	08002b25 	.word	0x08002b25
 80029d0:	08002bb3 	.word	0x08002bb3
 80029d4:	08002bb3 	.word	0x08002bb3
 80029d8:	08002bb3 	.word	0x08002bb3
 80029dc:	08002bb3 	.word	0x08002bb3
 80029e0:	08002bb3 	.word	0x08002bb3
 80029e4:	08002bb3 	.word	0x08002bb3
 80029e8:	08002bb3 	.word	0x08002bb3
 80029ec:	08002bb3 	.word	0x08002bb3
 80029f0:	08002bb3 	.word	0x08002bb3
 80029f4:	08002bb3 	.word	0x08002bb3
 80029f8:	08002bb3 	.word	0x08002bb3
 80029fc:	08002aa7 	.word	0x08002aa7
 8002a00:	08002ad5 	.word	0x08002ad5
        case SSP_CMD_PING: // 0x00
            response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002a04:	2340      	movs	r3, #64	@ 0x40
 8002a06:	73bb      	strb	r3, [r7, #14]
            break;
 8002a08:	e0d6      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_SON: // 0x0B
            if (frame->data_len == 1) {
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	78db      	ldrb	r3, [r3, #3]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d11f      	bne.n	8002a52 <SSP_ProcessReceivedFrame+0x1ba>
                uint8_t pwrl_id = frame->data[0];
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	791b      	ldrb	r3, [r3, #4]
 8002a16:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
                if (pwrl_id <= 15) { // PWRL0 to PWRL15
 8002a1a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	d814      	bhi.n	8002a4c <SSP_ProcessReceivedFrame+0x1b4>
                    power_lines[pwrl_id] = 1; // Turn ON
 8002a22:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002a26:	4a79      	ldr	r2, [pc, #484]	@ (8002c0c <SSP_ProcessReceivedFrame+0x374>)
 8002a28:	2101      	movs	r1, #1
 8002a2a:	54d1      	strb	r1, [r2, r3]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002a2c:	2340      	movs	r3, #64	@ 0x40
 8002a2e:	73bb      	strb	r3, [r7, #14]
                    snprintf(log_msg, sizeof(log_msg), "SON command: PWRL%d ON", pwrl_id);
 8002a30:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002a34:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002a38:	4a75      	ldr	r2, [pc, #468]	@ (8002c10 <SSP_ProcessReceivedFrame+0x378>)
 8002a3a:	2138      	movs	r1, #56	@ 0x38
 8002a3c:	f00a f9a0 	bl	800cd80 <sniprintf>
                    Log_Error(log_msg);
 8002a40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe ffcd 	bl	80019e4 <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 8002a4a:	e0b5      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002a4c:	2341      	movs	r3, #65	@ 0x41
 8002a4e:	73bb      	strb	r3, [r7, #14]
            break;
 8002a50:	e0b2      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002a52:	2341      	movs	r3, #65	@ 0x41
 8002a54:	73bb      	strb	r3, [r7, #14]
            break;
 8002a56:	e0af      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_SOF: // 0x0C
            if (frame->data_len == 1) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	78db      	ldrb	r3, [r3, #3]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d11f      	bne.n	8002aa0 <SSP_ProcessReceivedFrame+0x208>
                uint8_t pwrl_id = frame->data[0];
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	791b      	ldrb	r3, [r3, #4]
 8002a64:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
                if (pwrl_id <= 15) { // PWRL0 to PWRL15
 8002a68:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d814      	bhi.n	8002a9a <SSP_ProcessReceivedFrame+0x202>
                    power_lines[pwrl_id] = 0; // Turn OFF
 8002a70:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8002a74:	4a65      	ldr	r2, [pc, #404]	@ (8002c0c <SSP_ProcessReceivedFrame+0x374>)
 8002a76:	2100      	movs	r1, #0
 8002a78:	54d1      	strb	r1, [r2, r3]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002a7a:	2340      	movs	r3, #64	@ 0x40
 8002a7c:	73bb      	strb	r3, [r7, #14]
                    snprintf(log_msg, sizeof(log_msg), "SOF command: PWRL%d OFF", pwrl_id);
 8002a7e:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8002a82:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002a86:	4a63      	ldr	r2, [pc, #396]	@ (8002c14 <SSP_ProcessReceivedFrame+0x37c>)
 8002a88:	2138      	movs	r1, #56	@ 0x38
 8002a8a:	f00a f979 	bl	800cd80 <sniprintf>
                    Log_Error(log_msg);
 8002a8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe ffa6 	bl	80019e4 <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 8002a98:	e08e      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002a9a:	2341      	movs	r3, #65	@ 0x41
 8002a9c:	73bb      	strb	r3, [r7, #14]
            break;
 8002a9e:	e08b      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002aa0:	2341      	movs	r3, #65	@ 0x41
 8002aa2:	73bb      	strb	r3, [r7, #14]
            break;
 8002aa4:	e088      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_KEN: // 0x31
            if (frame->data_len == 0) {
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	78db      	ldrb	r3, [r3, #3]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10f      	bne.n	8002ace <SSP_ProcessReceivedFrame+0x236>
                if (mission_termination_enabled) {
 8002aae:	4b5a      	ldr	r3, [pc, #360]	@ (8002c18 <SSP_ProcessReceivedFrame+0x380>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <SSP_ProcessReceivedFrame+0x22a>
                    // In a real implementation, this would disconnect the batteries
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002ab6:	2340      	movs	r3, #64	@ 0x40
 8002ab8:	73bb      	strb	r3, [r7, #14]
                    Log_Error("KEN command executed: Mission termination enabled");
 8002aba:	4858      	ldr	r0, [pc, #352]	@ (8002c1c <SSP_ProcessReceivedFrame+0x384>)
 8002abc:	f7fe ff92 	bl	80019e4 <Log_Error>
                    Log_Error("KEN command rejected: Mission termination not enabled");
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 8002ac0:	e07a      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002ac2:	2341      	movs	r3, #65	@ 0x41
 8002ac4:	73bb      	strb	r3, [r7, #14]
                    Log_Error("KEN command rejected: Mission termination not enabled");
 8002ac6:	4856      	ldr	r0, [pc, #344]	@ (8002c20 <SSP_ProcessReceivedFrame+0x388>)
 8002ac8:	f7fe ff8c 	bl	80019e4 <Log_Error>
            break;
 8002acc:	e074      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002ace:	2341      	movs	r3, #65	@ 0x41
 8002ad0:	73bb      	strb	r3, [r7, #14]
            break;
 8002ad2:	e071      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_KDIS: // 0x32
            if (frame->data_len == 0) {
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	78db      	ldrb	r3, [r3, #3]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d105      	bne.n	8002ae8 <SSP_ProcessReceivedFrame+0x250>
                // In a real implementation, this would reconnect the batteries
                response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002adc:	2340      	movs	r3, #64	@ 0x40
 8002ade:	73bb      	strb	r3, [r7, #14]
                Log_Error("KDIS command executed: Batteries reconnected");
 8002ae0:	4850      	ldr	r0, [pc, #320]	@ (8002c24 <SSP_ProcessReceivedFrame+0x38c>)
 8002ae2:	f7fe ff7f 	bl	80019e4 <Log_Error>
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 8002ae6:	e067      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002ae8:	2341      	movs	r3, #65	@ 0x41
 8002aea:	73bb      	strb	r3, [r7, #14]
            break;
 8002aec:	e064      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_SM: // 0x15
            if (frame->data_len >= 1) {
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	78db      	ldrb	r3, [r3, #3]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <SSP_ProcessReceivedFrame+0x276>
                bms_mode = frame->data[0];
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	791a      	ldrb	r2, [r3, #4]
 8002afa:	4b4b      	ldr	r3, [pc, #300]	@ (8002c28 <SSP_ProcessReceivedFrame+0x390>)
 8002afc:	701a      	strb	r2, [r3, #0]
                Update_BMS_Mode();
 8002afe:	f7ff f94b 	bl	8001d98 <Update_BMS_Mode>
                response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002b02:	2340      	movs	r3, #64	@ 0x40
 8002b04:	73bb      	strb	r3, [r7, #14]
                Log_Error("Mode changed by OBC");
 8002b06:	4849      	ldr	r0, [pc, #292]	@ (8002c2c <SSP_ProcessReceivedFrame+0x394>)
 8002b08:	f7fe ff6c 	bl	80019e4 <Log_Error>
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 8002b0c:	e054      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002b0e:	2341      	movs	r3, #65	@ 0x41
 8002b10:	73bb      	strb	r3, [r7, #14]
            break;
 8002b12:	e051      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_GM: // 0x16
            response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002b14:	2340      	movs	r3, #64	@ 0x40
 8002b16:	73bb      	strb	r3, [r7, #14]
            response.data_len = 1;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
            response.data[0] = bms_mode;
 8002b1c:	4b42      	ldr	r3, [pc, #264]	@ (8002c28 <SSP_ProcessReceivedFrame+0x390>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	743b      	strb	r3, [r7, #16]
            break;
 8002b22:	e049      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_GOSTM: // 0x25
            SSP_SendStatus();
 8002b24:	f7ff fdce 	bl	80026c4 <SSP_SendStatus>
            return; // SSP_SendStatus handles the response
 8002b28:	e066      	b.n	8002bf8 <SSP_ProcessReceivedFrame+0x360>

        case SSP_CMD_SFP: // 0x1B
            if (frame->data_len >= 2) {
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	78db      	ldrb	r3, [r3, #3]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d939      	bls.n	8002ba6 <SSP_ProcessReceivedFrame+0x30e>
                uint8_t param_id = frame->data[0];
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	791b      	ldrb	r3, [r3, #4]
 8002b36:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                uint8_t param_value = frame->data[1];
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	795b      	ldrb	r3, [r3, #5]
 8002b3e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                if (param_id == 0x01) { // Mission termination enable parameter
 8002b42:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d109      	bne.n	8002b5e <SSP_ProcessReceivedFrame+0x2c6>
                    mission_termination_enabled = param_value;
 8002b4a:	4a33      	ldr	r2, [pc, #204]	@ (8002c18 <SSP_ProcessReceivedFrame+0x380>)
 8002b4c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8002b50:	7013      	strb	r3, [r2, #0]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002b52:	2340      	movs	r3, #64	@ 0x40
 8002b54:	73bb      	strb	r3, [r7, #14]
                    Log_Error("Mission termination enable set");
 8002b56:	4836      	ldr	r0, [pc, #216]	@ (8002c30 <SSP_ProcessReceivedFrame+0x398>)
 8002b58:	f7fe ff44 	bl	80019e4 <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 8002b5c:	e02c      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>
                else if (param_id == 0x02) { // Firmware update trigger parameter
 8002b5e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d11c      	bne.n	8002ba0 <SSP_ProcessReceivedFrame+0x308>
                    if (param_value == 1) {
 8002b66:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d115      	bne.n	8002b9a <SSP_ProcessReceivedFrame+0x302>
                        HAL_FLASH_Unlock();
 8002b6e:	f004 f939 	bl	8006de4 <HAL_FLASH_Unlock>
                        Flash_Erase(FLASH_LOG_PAGE); // Erase the page containing the flag
 8002b72:	2080      	movs	r0, #128	@ 0x80
 8002b74:	f7fe ff1c 	bl	80019b0 <Flash_Erase>
                        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FIRMWARE_UPDATE_FLAG_ADDR, 0xDEADBEEF);
 8002b78:	a321      	add	r3, pc, #132	@ (adr r3, 8002c00 <SSP_ProcessReceivedFrame+0x368>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	492d      	ldr	r1, [pc, #180]	@ (8002c34 <SSP_ProcessReceivedFrame+0x39c>)
 8002b80:	2000      	movs	r0, #0
 8002b82:	f004 f8c3 	bl	8006d0c <HAL_FLASH_Program>
                        HAL_FLASH_Lock();
 8002b86:	f004 f94f 	bl	8006e28 <HAL_FLASH_Lock>
                        Log_Error("Firmware update requested, rebooting...");
 8002b8a:	482b      	ldr	r0, [pc, #172]	@ (8002c38 <SSP_ProcessReceivedFrame+0x3a0>)
 8002b8c:	f7fe ff2a 	bl	80019e4 <Log_Error>
                        HAL_Delay(100); // Allow time for logging
 8002b90:	2064      	movs	r0, #100	@ 0x64
 8002b92:	f002 fc21 	bl	80053d8 <HAL_Delay>
                        HAL_NVIC_SystemReset();
 8002b96:	f004 f8a8 	bl	8006cea <HAL_NVIC_SystemReset>
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002b9a:	2340      	movs	r3, #64	@ 0x40
 8002b9c:	73bb      	strb	r3, [r7, #14]
            break;
 8002b9e:	e00b      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002ba0:	2341      	movs	r3, #65	@ 0x41
 8002ba2:	73bb      	strb	r3, [r7, #14]
            break;
 8002ba4:	e008      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002ba6:	2341      	movs	r3, #65	@ 0x41
 8002ba8:	73bb      	strb	r3, [r7, #14]
            break;
 8002baa:	e005      	b.n	8002bb8 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_GSTLM: // 0x22
        case SSP_CMD_GOTLM: // 0x21
            SSP_SendStatus();
 8002bac:	f7ff fd8a 	bl	80026c4 <SSP_SendStatus>
            return; // SSP_SendStatus handles the response
 8002bb0:	e022      	b.n	8002bf8 <SSP_ProcessReceivedFrame+0x360>

        default:
            response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002bb2:	2341      	movs	r3, #65	@ 0x41
 8002bb4:	73bb      	strb	r3, [r7, #14]
            break;
 8002bb6:	bf00      	nop
    }

    // Send the response
    uint16_t frame_len;
    SSP_ConstructFrame(&response, ssp_tx_buffer, &frame_len);
 8002bb8:	f107 020a 	add.w	r2, r7, #10
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	491e      	ldr	r1, [pc, #120]	@ (8002c3c <SSP_ProcessReceivedFrame+0x3a4>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 f96d 	bl	8004ea2 <SSP_ConstructFrame>
    // Set DE pin high to transmit
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2102      	movs	r1, #2
 8002bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bd0:	f004 fcda 	bl	8007588 <HAL_GPIO_WritePin>
    SSP_TransmitFrame(&husart2, ssp_tx_buffer, frame_len);
 8002bd4:	897b      	ldrh	r3, [r7, #10]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4918      	ldr	r1, [pc, #96]	@ (8002c3c <SSP_ProcessReceivedFrame+0x3a4>)
 8002bda:	4819      	ldr	r0, [pc, #100]	@ (8002c40 <SSP_ProcessReceivedFrame+0x3a8>)
 8002bdc:	f002 f9e3 	bl	8004fa6 <SSP_TransmitFrame>
    // Set DE pin low to receive
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2102      	movs	r1, #2
 8002be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002be8:	f004 fcce 	bl	8007588 <HAL_GPIO_WritePin>
 8002bec:	e004      	b.n	8002bf8 <SSP_ProcessReceivedFrame+0x360>
        return;
 8002bee:	bf00      	nop
 8002bf0:	e002      	b.n	8002bf8 <SSP_ProcessReceivedFrame+0x360>
        return; // Ignore reply frames
 8002bf2:	bf00      	nop
 8002bf4:	e000      	b.n	8002bf8 <SSP_ProcessReceivedFrame+0x360>
        return;
 8002bf6:	bf00      	nop
}
 8002bf8:	3790      	adds	r7, #144	@ 0x90
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	deadbeef 	.word	0xdeadbeef
 8002c04:	00000000 	.word	0x00000000
 8002c08:	08011130 	.word	0x08011130
 8002c0c:	20000620 	.word	0x20000620
 8002c10:	0801115c 	.word	0x0801115c
 8002c14:	08011174 	.word	0x08011174
 8002c18:	20000619 	.word	0x20000619
 8002c1c:	0801118c 	.word	0x0801118c
 8002c20:	080111c0 	.word	0x080111c0
 8002c24:	080111f8 	.word	0x080111f8
 8002c28:	20000008 	.word	0x20000008
 8002c2c:	08011228 	.word	0x08011228
 8002c30:	0801123c 	.word	0x0801123c
 8002c34:	0807f810 	.word	0x0807f810
 8002c38:	0801125c 	.word	0x0801125c
 8002c3c:	2000056c 	.word	0x2000056c
 8002c40:	20000490 	.word	0x20000490

08002c44 <ChargeBattery>:
  * @brief  Implements the CC-CV charging algorithm
  * @retval HAL_StatusTypeDef
  * @note   Checks all 4 cells (Cells 1, 2, 3, 4) for maximum voltage
  */
HAL_StatusTypeDef ChargeBattery(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
    int16_t temperature_1, temperature_2;
    HAL_StatusTypeDef status;

    // Read temperatures from both sensors
    status = Temperature_Read(&hi2c1, &hi2c2, &temperature_1, &temperature_2);
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	1cba      	adds	r2, r7, #2
 8002c4e:	4952      	ldr	r1, [pc, #328]	@ (8002d98 <ChargeBattery+0x154>)
 8002c50:	4852      	ldr	r0, [pc, #328]	@ (8002d9c <ChargeBattery+0x158>)
 8002c52:	f7fe fdcb 	bl	80017ec <Temperature_Read>
 8002c56:	4603      	mov	r3, r0
 8002c58:	733b      	strb	r3, [r7, #12]
    if (status != HAL_OK || temperature_1 == INT16_MIN || temperature_2 == INT16_MIN)
 8002c5a:	7b3b      	ldrb	r3, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <ChargeBattery+0x30>
 8002c60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c64:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002c68:	d004      	beq.n	8002c74 <ChargeBattery+0x30>
 8002c6a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c6e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002c72:	d10d      	bne.n	8002c90 <ChargeBattery+0x4c>
    {
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); // Disable EPS power (EPS_EN)
 8002c74:	2200      	movs	r2, #0
 8002c76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c7a:	4849      	ldr	r0, [pc, #292]	@ (8002da0 <ChargeBattery+0x15c>)
 8002c7c:	f004 fc84 	bl	8007588 <HAL_GPIO_WritePin>
        in_cv_mode = 0;
 8002c80:	4b48      	ldr	r3, [pc, #288]	@ (8002da4 <ChargeBattery+0x160>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
        charge_start_time = 0;
 8002c86:	4b48      	ldr	r3, [pc, #288]	@ (8002da8 <ChargeBattery+0x164>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e07f      	b.n	8002d90 <ChargeBattery+0x14c>
    }

    // Compute the highest temperature
    int16_t highest_temp = (temperature_1 > temperature_2) ? temperature_1 : temperature_2;
 8002c90:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002c94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	bfb8      	it	lt
 8002c9c:	4613      	movlt	r3, r2
 8002c9e:	817b      	strh	r3, [r7, #10]

    // Check for over-temperature condition
    if (highest_temp > battery_config.overtemp_threshold || pcb_temperature > battery_config.overtemp_threshold)
 8002ca0:	4b42      	ldr	r3, [pc, #264]	@ (8002dac <ChargeBattery+0x168>)
 8002ca2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ca6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	dc07      	bgt.n	8002cbe <ChargeBattery+0x7a>
 8002cae:	4b3f      	ldr	r3, [pc, #252]	@ (8002dac <ChargeBattery+0x168>)
 8002cb0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8002db0 <ChargeBattery+0x16c>)
 8002cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	da0d      	bge.n	8002cda <ChargeBattery+0x96>
    {
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002cc4:	4836      	ldr	r0, [pc, #216]	@ (8002da0 <ChargeBattery+0x15c>)
 8002cc6:	f004 fc5f 	bl	8007588 <HAL_GPIO_WritePin>
        in_cv_mode = 0;
 8002cca:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <ChargeBattery+0x160>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
        charge_start_time = 0;
 8002cd0:	4b35      	ldr	r3, [pc, #212]	@ (8002da8 <ChargeBattery+0x164>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e05a      	b.n	8002d90 <ChargeBattery+0x14c>
    }

    // CC-CV charging logic
    if (!in_cv_mode)
 8002cda:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <ChargeBattery+0x160>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d139      	bne.n	8002d56 <ChargeBattery+0x112>
    {
        // Constant Current (CC) mode
        if (charge_start_time == 0)
 8002ce2:	4b31      	ldr	r3, [pc, #196]	@ (8002da8 <ChargeBattery+0x164>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d104      	bne.n	8002cf4 <ChargeBattery+0xb0>
        {
            charge_start_time = HAL_GetTick();
 8002cea:	f002 fb69 	bl	80053c0 <HAL_GetTick>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8002da8 <ChargeBattery+0x164>)
 8002cf2:	6013      	str	r3, [r2, #0]
        }

        // Check if we should switch to CV mode (based on voltage)
        int16_t max_voltage = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	737b      	strb	r3, [r7, #13]
 8002cfc:	e01e      	b.n	8002d3c <ChargeBattery+0xf8>
        {
            if (group_voltages_1[i] > max_voltage) max_voltage = group_voltages_1[i];
 8002cfe:	7b7b      	ldrb	r3, [r7, #13]
 8002d00:	4a2c      	ldr	r2, [pc, #176]	@ (8002db4 <ChargeBattery+0x170>)
 8002d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dd04      	ble.n	8002d1a <ChargeBattery+0xd6>
 8002d10:	7b7b      	ldrb	r3, [r7, #13]
 8002d12:	4a28      	ldr	r2, [pc, #160]	@ (8002db4 <ChargeBattery+0x170>)
 8002d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d18:	81fb      	strh	r3, [r7, #14]
            if (group_voltages_2[i] > max_voltage) max_voltage = group_voltages_2[i];
 8002d1a:	7b7b      	ldrb	r3, [r7, #13]
 8002d1c:	4a26      	ldr	r2, [pc, #152]	@ (8002db8 <ChargeBattery+0x174>)
 8002d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dd04      	ble.n	8002d36 <ChargeBattery+0xf2>
 8002d2c:	7b7b      	ldrb	r3, [r7, #13]
 8002d2e:	4a22      	ldr	r2, [pc, #136]	@ (8002db8 <ChargeBattery+0x174>)
 8002d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d34:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8002d36:	7b7b      	ldrb	r3, [r7, #13]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	737b      	strb	r3, [r7, #13]
 8002d3c:	7b7b      	ldrb	r3, [r7, #13]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d9dd      	bls.n	8002cfe <ChargeBattery+0xba>
        }
        if (max_voltage > battery_config.cv_threshold)
 8002d42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d46:	4a19      	ldr	r2, [pc, #100]	@ (8002dac <ChargeBattery+0x168>)
 8002d48:	8b12      	ldrh	r2, [r2, #24]
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	dd1f      	ble.n	8002d8e <ChargeBattery+0x14a>
        {
            in_cv_mode = 1;
 8002d4e:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <ChargeBattery+0x160>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e01b      	b.n	8002d8e <ChargeBattery+0x14a>
        }
    }
    else
    {
        // Constant Voltage (CV) mode
        uint32_t charge_duration = (HAL_GetTick() - charge_start_time) / 1000;
 8002d56:	f002 fb33 	bl	80053c0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	4b12      	ldr	r3, [pc, #72]	@ (8002da8 <ChargeBattery+0x164>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	4a16      	ldr	r2, [pc, #88]	@ (8002dbc <ChargeBattery+0x178>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	607b      	str	r3, [r7, #4]
        if (charge_duration > battery_config.max_charge_time)
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dac <ChargeBattery+0x168>)
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d90b      	bls.n	8002d8e <ChargeBattery+0x14a>
        {
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d7c:	4808      	ldr	r0, [pc, #32]	@ (8002da0 <ChargeBattery+0x15c>)
 8002d7e:	f004 fc03 	bl	8007588 <HAL_GPIO_WritePin>
            in_cv_mode = 0;
 8002d82:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <ChargeBattery+0x160>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
            charge_start_time = 0;
 8002d88:	4b07      	ldr	r3, [pc, #28]	@ (8002da8 <ChargeBattery+0x164>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
        }
    }

    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200002f0 	.word	0x200002f0
 8002d9c:	2000029c 	.word	0x2000029c
 8002da0:	48001000 	.word	0x48001000
 8002da4:	20000618 	.word	0x20000618
 8002da8:	20000614 	.word	0x20000614
 8002dac:	2000000c 	.word	0x2000000c
 8002db0:	200004f8 	.word	0x200004f8
 8002db4:	200004e0 	.word	0x200004e0
 8002db8:	200004e8 	.word	0x200004e8
 8002dbc:	10624dd3 	.word	0x10624dd3

08002dc0 <Bootloader_Check>:
/**
  * @brief  Checks if the system should enter bootloader mode for firmware update
  * @retval None
  */
void Bootloader_Check(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
    // Read the firmware update flag from flash
    uint32_t firmware_update_flag = *(volatile uint32_t *)FIRMWARE_UPDATE_FLAG_ADDR;
 8002dc6:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <Bootloader_Check+0x54>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	607b      	str	r3, [r7, #4]

    if (firmware_update_flag == 0xDEADBEEF) // Magic number to indicate firmware update mode
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a12      	ldr	r2, [pc, #72]	@ (8002e18 <Bootloader_Check+0x58>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d115      	bne.n	8002e00 <Bootloader_Check+0x40>
    {
        firmware_update_mode = 1;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <Bootloader_Check+0x5c>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
        Log_Error("Entering firmware update mode");
 8002dda:	4811      	ldr	r0, [pc, #68]	@ (8002e20 <Bootloader_Check+0x60>)
 8002ddc:	f7fe fe02 	bl	80019e4 <Log_Error>

        // Clear the firmware update flag
        HAL_FLASH_Unlock();
 8002de0:	f004 f800 	bl	8006de4 <HAL_FLASH_Unlock>
        Flash_Erase(FLASH_LOG_PAGE); // Erase the page containing the flag
 8002de4:	2080      	movs	r0, #128	@ 0x80
 8002de6:	f7fe fde3 	bl	80019b0 <Flash_Erase>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FIRMWARE_UPDATE_FLAG_ADDR, 0xFFFFFFFF);
 8002dea:	f04f 32ff 	mov.w	r2, #4294967295
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	4908      	ldr	r1, [pc, #32]	@ (8002e14 <Bootloader_Check+0x54>)
 8002df4:	2000      	movs	r0, #0
 8002df6:	f003 ff89 	bl	8006d0c <HAL_FLASH_Program>
        HAL_FLASH_Lock();
 8002dfa:	f004 f815 	bl	8006e28 <HAL_FLASH_Lock>
    else
    {
        firmware_update_mode = 0;
        Log_Error("Booting to application");
    }
}
 8002dfe:	e005      	b.n	8002e0c <Bootloader_Check+0x4c>
        firmware_update_mode = 0;
 8002e00:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <Bootloader_Check+0x5c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
        Log_Error("Booting to application");
 8002e06:	4807      	ldr	r0, [pc, #28]	@ (8002e24 <Bootloader_Check+0x64>)
 8002e08:	f7fe fdec 	bl	80019e4 <Log_Error>
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	0807f810 	.word	0x0807f810
 8002e18:	deadbeef 	.word	0xdeadbeef
 8002e1c:	20000638 	.word	0x20000638
 8002e20:	08011284 	.word	0x08011284
 8002e24:	080112a4 	.word	0x080112a4

08002e28 <Bootloader_FirmwareUpdate>:
/**
  * @brief  Handles the firmware update process over RS485
  * @retval None
  */
void Bootloader_FirmwareUpdate(void)
{
 8002e28:	b5b0      	push	{r4, r5, r7, lr}
 8002e2a:	b0d0      	sub	sp, #320	@ 0x140
 8002e2c:	af00      	add	r7, sp, #0
    SSP_FrameTypeDef received_frame = {0};
 8002e2e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002e32:	2246      	movs	r2, #70	@ 0x46
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f00a f87a 	bl	800cf30 <memset>
    uint32_t last_packet_time = HAL_GetTick();
 8002e3c:	f002 fac0 	bl	80053c0 <HAL_GetTick>
 8002e40:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    uint32_t current_address = APP_START_ADDR;
 8002e44:	4bc6      	ldr	r3, [pc, #792]	@ (8003160 <Bootloader_FirmwareUpdate+0x338>)
 8002e46:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    uint32_t total_bytes_received = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    uint32_t expected_firmware_size = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    uint8_t firmware_buffer[FIRMWARE_UPDATE_PACKET_SIZE];
    uint16_t calculated_crc = 0xFFFF;
 8002e56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e5a:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126

    Log_Error("Waiting for firmware update packets...");
 8002e5e:	48c1      	ldr	r0, [pc, #772]	@ (8003164 <Bootloader_FirmwareUpdate+0x33c>)
 8002e60:	f7fe fdc0 	bl	80019e4 <Log_Error>

    HAL_FLASH_Unlock();
 8002e64:	f003 ffbe 	bl	8006de4 <HAL_FLASH_Unlock>
    for (uint32_t addr = APP_START_ADDR; addr < APP_END_ADDR; addr += FLASH_PAGE_SIZE) {
 8002e68:	4bbd      	ldr	r3, [pc, #756]	@ (8003160 <Bootloader_FirmwareUpdate+0x338>)
 8002e6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002e6e:	e00d      	b.n	8002e8c <Bootloader_FirmwareUpdate+0x64>
        Flash_Erase((addr - FLASH_BASE) / FLASH_PAGE_SIZE);
 8002e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e74:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8002e78:	0adb      	lsrs	r3, r3, #11
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fd98 	bl	80019b0 <Flash_Erase>
    for (uint32_t addr = APP_START_ADDR; addr < APP_END_ADDR; addr += FLASH_PAGE_SIZE) {
 8002e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e88:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e90:	4ab5      	ldr	r2, [pc, #724]	@ (8003168 <Bootloader_FirmwareUpdate+0x340>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d9ec      	bls.n	8002e70 <Bootloader_FirmwareUpdate+0x48>
    }
    HAL_FLASH_Lock();
 8002e96:	f003 ffc7 	bl	8006e28 <HAL_FLASH_Lock>

    while (1) {
        if (HAL_GetTick() - last_packet_time > FIRMWARE_UPDATE_TIMEOUT) {
 8002e9a:	f002 fa91 	bl	80053c0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d904      	bls.n	8002eb8 <Bootloader_FirmwareUpdate+0x90>
            Log_Error("Firmware update timeout, rebooting...");
 8002eae:	48af      	ldr	r0, [pc, #700]	@ (800316c <Bootloader_FirmwareUpdate+0x344>)
 8002eb0:	f7fe fd98 	bl	80019e4 <Log_Error>
            HAL_NVIC_SystemReset();
 8002eb4:	f003 ff19 	bl	8006cea <HAL_NVIC_SystemReset>
        }

        if (SSP_ReceiveFrame(&husart2, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &received_frame) == HAL_OK) {
 8002eb8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002ebc:	2245      	movs	r2, #69	@ 0x45
 8002ebe:	49ac      	ldr	r1, [pc, #688]	@ (8003170 <Bootloader_FirmwareUpdate+0x348>)
 8002ec0:	48ac      	ldr	r0, [pc, #688]	@ (8003174 <Bootloader_FirmwareUpdate+0x34c>)
 8002ec2:	f002 f883 	bl	8004fcc <SSP_ReceiveFrame>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e6      	bne.n	8002e9a <Bootloader_FirmwareUpdate+0x72>
            last_packet_time = HAL_GetTick();
 8002ecc:	f002 fa78 	bl	80053c0 <HAL_GetTick>
 8002ed0:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c

            if (received_frame.dest != SSP_ADDR_EPS && received_frame.dest != SSP_ADDR_BROADCAST) {
 8002ed4:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d004      	beq.n	8002ee6 <Bootloader_FirmwareUpdate+0xbe>
 8002edc:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8002ee0:	2bff      	cmp	r3, #255	@ 0xff
 8002ee2:	f040 8139 	bne.w	8003158 <Bootloader_FirmwareUpdate+0x330>
                continue;
            }

            if (received_frame.cmd_id & SSP_FRAME_TYPE_REPLY) {
 8002ee6:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 8134 	bne.w	800315c <Bootloader_FirmwareUpdate+0x334>
                continue;
            }

            SSP_FrameTypeDef response = {0};
 8002ef4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ef8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002efc:	4618      	mov	r0, r3
 8002efe:	2346      	movs	r3, #70	@ 0x46
 8002f00:	461a      	mov	r2, r3
 8002f02:	2100      	movs	r1, #0
 8002f04:	f00a f814 	bl	800cf30 <memset>
            response.dest = received_frame.src;
 8002f08:	f897 20c9 	ldrb.w	r2, [r7, #201]	@ 0xc9
 8002f0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f10:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f14:	701a      	strb	r2, [r3, #0]
            response.src = SSP_ADDR_EPS;
 8002f16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f1a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f1e:	2201      	movs	r2, #1
 8002f20:	705a      	strb	r2, [r3, #1]
            response.data_len = 1;
 8002f22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f26:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	70da      	strb	r2, [r3, #3]
            response.data[0] = received_frame.cmd_id;
 8002f2e:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 8002f32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f36:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f3a:	711a      	strb	r2, [r3, #4]

            switch (received_frame.cmd_id & 0x3F) {
 8002f3c:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f44:	2b40      	cmp	r3, #64	@ 0x40
 8002f46:	f040 80e4 	bne.w	8003112 <Bootloader_FirmwareUpdate+0x2ea>
                case SSP_CMD_FIRMWARE_UPDATE:
                    if (received_frame.data_len < 4 && total_bytes_received == 0) {
 8002f4a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d80a      	bhi.n	8002f68 <Bootloader_FirmwareUpdate+0x140>
 8002f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <Bootloader_FirmwareUpdate+0x140>
                        response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002f5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f5e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f62:	2241      	movs	r2, #65	@ 0x41
 8002f64:	709a      	strb	r2, [r3, #2]
                        break;
 8002f66:	e0dc      	b.n	8003122 <Bootloader_FirmwareUpdate+0x2fa>
                    }

                    if (total_bytes_received == 0) {
 8002f68:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11b      	bne.n	8002fa8 <Bootloader_FirmwareUpdate+0x180>
                        expected_firmware_size = (received_frame.data[0] << 24) |
 8002f70:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002f74:	061a      	lsls	r2, r3, #24
                                                 (received_frame.data[1] << 16) |
 8002f76:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002f7a:	041b      	lsls	r3, r3, #16
                        expected_firmware_size = (received_frame.data[0] << 24) |
 8002f7c:	431a      	orrs	r2, r3
                                                 (received_frame.data[2] << 8) |
 8002f7e:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002f82:	021b      	lsls	r3, r3, #8
                                                 (received_frame.data[1] << 16) |
 8002f84:	4313      	orrs	r3, r2
                                                 received_frame.data[3];
 8002f86:	f897 20cf 	ldrb.w	r2, [r7, #207]	@ 0xcf
                                                 (received_frame.data[2] << 8) |
 8002f8a:	4313      	orrs	r3, r2
                        expected_firmware_size = (received_frame.data[0] << 24) |
 8002f8c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
                        Log_Error("Firmware update started, expected size: %lu bytes", expected_firmware_size);
 8002f90:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8002f94:	4878      	ldr	r0, [pc, #480]	@ (8003178 <Bootloader_FirmwareUpdate+0x350>)
 8002f96:	f7fe fd25 	bl	80019e4 <Log_Error>
                        response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002f9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f9e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fa2:	2240      	movs	r2, #64	@ 0x40
 8002fa4:	709a      	strb	r2, [r3, #2]
                                HAL_Delay(100);
                                HAL_NVIC_SystemReset();
                            }
                        }
                    }
                    break;
 8002fa6:	e0bb      	b.n	8003120 <Bootloader_FirmwareUpdate+0x2f8>
                        if (received_frame.data_len > FIRMWARE_UPDATE_PACKET_SIZE) {
 8002fa8:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002fac:	2b80      	cmp	r3, #128	@ 0x80
 8002fae:	d906      	bls.n	8002fbe <Bootloader_FirmwareUpdate+0x196>
                            response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002fb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fb4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fb8:	2241      	movs	r2, #65	@ 0x41
 8002fba:	709a      	strb	r2, [r3, #2]
                            break;
 8002fbc:	e0b1      	b.n	8003122 <Bootloader_FirmwareUpdate+0x2fa>
                        memcpy(firmware_buffer, received_frame.data, received_frame.data_len);
 8002fbe:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002fc8:	1d19      	adds	r1, r3, #4
 8002fca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f00a f853 	bl	800d07a <memcpy>
                        HAL_FLASH_Unlock();
 8002fd4:	f003 ff06 	bl	8006de4 <HAL_FLASH_Unlock>
                        for (uint32_t i = 0; i < received_frame.data_len; i += 8) {
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002fde:	e017      	b.n	8003010 <Bootloader_FirmwareUpdate+0x1e8>
                            uint64_t data = *(uint64_t *)(firmware_buffer + i);
 8002fe0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002fe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002fe8:	4413      	add	r3, r2
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
                            HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_address + i, data);
 8002ff2:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8002ff6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ffa:	18d1      	adds	r1, r2, r3
 8002ffc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8003000:	2000      	movs	r0, #0
 8003002:	f003 fe83 	bl	8006d0c <HAL_FLASH_Program>
                        for (uint32_t i = 0; i < received_frame.data_len; i += 8) {
 8003006:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800300a:	3308      	adds	r3, #8
 800300c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003010:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8003014:	461a      	mov	r2, r3
 8003016:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800301a:	4293      	cmp	r3, r2
 800301c:	d3e0      	bcc.n	8002fe0 <Bootloader_FirmwareUpdate+0x1b8>
                        HAL_FLASH_Lock();
 800301e:	f003 ff03 	bl	8006e28 <HAL_FLASH_Lock>
                        calculated_crc = CalculateCRC16(firmware_buffer, received_frame.data_len);
 8003022:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8003026:	461a      	mov	r2, r3
 8003028:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f001 fb6e 	bl	8004710 <CalculateCRC16>
 8003034:	4603      	mov	r3, r0
 8003036:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
                        total_bytes_received += received_frame.data_len;
 800303a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800303e:	461a      	mov	r2, r3
 8003040:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003044:	4413      	add	r3, r2
 8003046:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                        current_address += received_frame.data_len;
 800304a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800304e:	461a      	mov	r2, r3
 8003050:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003054:	4413      	add	r3, r2
 8003056:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                        Log_Error("Received %lu/%lu bytes", total_bytes_received, expected_firmware_size);
 800305a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800305e:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8003062:	4846      	ldr	r0, [pc, #280]	@ (800317c <Bootloader_FirmwareUpdate+0x354>)
 8003064:	f7fe fcbe 	bl	80019e4 <Log_Error>
                        response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8003068:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800306c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003070:	2240      	movs	r2, #64	@ 0x40
 8003072:	709a      	strb	r2, [r3, #2]
                        if (total_bytes_received >= expected_firmware_size) {
 8003074:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003078:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800307c:	429a      	cmp	r2, r3
 800307e:	d34f      	bcc.n	8003120 <Bootloader_FirmwareUpdate+0x2f8>
                            uint16_t received_crc = (firmware_buffer[received_frame.data_len - 2] << 8) |
 8003080:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8003084:	3b02      	subs	r3, #2
 8003086:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800308a:	443b      	add	r3, r7
 800308c:	f813 3cf8 	ldrb.w	r3, [r3, #-248]
 8003090:	b21b      	sxth	r3, r3
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	b21a      	sxth	r2, r3
                                                    firmware_buffer[received_frame.data_len - 1];
 8003096:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800309a:	3b01      	subs	r3, #1
 800309c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80030a0:	443b      	add	r3, r7
 80030a2:	f813 3cf8 	ldrb.w	r3, [r3, #-248]
 80030a6:	b21b      	sxth	r3, r3
                            uint16_t received_crc = (firmware_buffer[received_frame.data_len - 2] << 8) |
 80030a8:	4313      	orrs	r3, r2
 80030aa:	b21b      	sxth	r3, r3
 80030ac:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
                            if (calculated_crc == received_crc) {
 80030b0:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80030b4:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d121      	bne.n	8003100 <Bootloader_FirmwareUpdate+0x2d8>
                                HAL_FLASH_Unlock();
 80030bc:	f003 fe92 	bl	8006de4 <HAL_FLASH_Unlock>
                                HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, APP_VALIDITY_FLAG_ADDR, 0xA5A5A5A5);
 80030c0:	f04f 32a5 	mov.w	r2, #2779096485	@ 0xa5a5a5a5
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	492d      	ldr	r1, [pc, #180]	@ (8003180 <Bootloader_FirmwareUpdate+0x358>)
 80030ca:	2000      	movs	r0, #0
 80030cc:	f003 fe1e 	bl	8006d0c <HAL_FLASH_Program>
                                uint64_t crc_data = calculated_crc;
 80030d0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80030d4:	2200      	movs	r2, #0
 80030d6:	461c      	mov	r4, r3
 80030d8:	4615      	mov	r5, r2
 80030da:	e9c7 4546 	strd	r4, r5, [r7, #280]	@ 0x118
                                HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, APP_END_ADDR - 8, crc_data);
 80030de:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80030e2:	4928      	ldr	r1, [pc, #160]	@ (8003184 <Bootloader_FirmwareUpdate+0x35c>)
 80030e4:	2000      	movs	r0, #0
 80030e6:	f003 fe11 	bl	8006d0c <HAL_FLASH_Program>
                                HAL_FLASH_Lock();
 80030ea:	f003 fe9d 	bl	8006e28 <HAL_FLASH_Lock>
                                Log_Error("Firmware update completed successfully, rebooting...");
 80030ee:	4826      	ldr	r0, [pc, #152]	@ (8003188 <Bootloader_FirmwareUpdate+0x360>)
 80030f0:	f7fe fc78 	bl	80019e4 <Log_Error>
                                HAL_Delay(100);
 80030f4:	2064      	movs	r0, #100	@ 0x64
 80030f6:	f002 f96f 	bl	80053d8 <HAL_Delay>
                                HAL_NVIC_SystemReset();
 80030fa:	f003 fdf6 	bl	8006cea <HAL_NVIC_SystemReset>
                    break;
 80030fe:	e00f      	b.n	8003120 <Bootloader_FirmwareUpdate+0x2f8>
                                Log_Error("Firmware CRC16 mismatch, rebooting without setting validity flag...");
 8003100:	4822      	ldr	r0, [pc, #136]	@ (800318c <Bootloader_FirmwareUpdate+0x364>)
 8003102:	f7fe fc6f 	bl	80019e4 <Log_Error>
                                HAL_Delay(100);
 8003106:	2064      	movs	r0, #100	@ 0x64
 8003108:	f002 f966 	bl	80053d8 <HAL_Delay>
                                HAL_NVIC_SystemReset();
 800310c:	f003 fded 	bl	8006cea <HAL_NVIC_SystemReset>
                    break;
 8003110:	e006      	b.n	8003120 <Bootloader_FirmwareUpdate+0x2f8>

                default:
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8003112:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003116:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800311a:	2241      	movs	r2, #65	@ 0x41
 800311c:	709a      	strb	r2, [r3, #2]
                    break;
 800311e:	e000      	b.n	8003122 <Bootloader_FirmwareUpdate+0x2fa>
                    break;
 8003120:	bf00      	nop
            }

            uint16_t frame_len;
            SSP_ConstructFrame(&response, ssp_tx_buffer, &frame_len);
 8003122:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 8003126:	463b      	mov	r3, r7
 8003128:	4919      	ldr	r1, [pc, #100]	@ (8003190 <Bootloader_FirmwareUpdate+0x368>)
 800312a:	4618      	mov	r0, r3
 800312c:	f001 feb9 	bl	8004ea2 <SSP_ConstructFrame>
            HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET);
 8003130:	2201      	movs	r2, #1
 8003132:	2102      	movs	r1, #2
 8003134:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003138:	f004 fa26 	bl	8007588 <HAL_GPIO_WritePin>
            SSP_TransmitFrame(&husart2, ssp_tx_buffer, frame_len);
 800313c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003140:	461a      	mov	r2, r3
 8003142:	4913      	ldr	r1, [pc, #76]	@ (8003190 <Bootloader_FirmwareUpdate+0x368>)
 8003144:	480b      	ldr	r0, [pc, #44]	@ (8003174 <Bootloader_FirmwareUpdate+0x34c>)
 8003146:	f001 ff2e 	bl	8004fa6 <SSP_TransmitFrame>
            HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 800314a:	2200      	movs	r2, #0
 800314c:	2102      	movs	r1, #2
 800314e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003152:	f004 fa19 	bl	8007588 <HAL_GPIO_WritePin>
 8003156:	e6a0      	b.n	8002e9a <Bootloader_FirmwareUpdate+0x72>
                continue;
 8003158:	bf00      	nop
 800315a:	e69e      	b.n	8002e9a <Bootloader_FirmwareUpdate+0x72>
                continue;
 800315c:	bf00      	nop
        if (HAL_GetTick() - last_packet_time > FIRMWARE_UPDATE_TIMEOUT) {
 800315e:	e69c      	b.n	8002e9a <Bootloader_FirmwareUpdate+0x72>
 8003160:	08004000 	.word	0x08004000
 8003164:	080112bc 	.word	0x080112bc
 8003168:	0807f7fe 	.word	0x0807f7fe
 800316c:	080112e4 	.word	0x080112e4
 8003170:	200005b4 	.word	0x200005b4
 8003174:	20000490 	.word	0x20000490
 8003178:	0801130c 	.word	0x0801130c
 800317c:	08011340 	.word	0x08011340
 8003180:	0807f820 	.word	0x0807f820
 8003184:	0807f7f7 	.word	0x0807f7f7
 8003188:	08011358 	.word	0x08011358
 800318c:	08011390 	.word	0x08011390
 8003190:	2000056c 	.word	0x2000056c

08003194 <IsApplicationValid>:
/**
  * @brief  Jumps to the application code
  * @retval None
  */
static uint8_t IsApplicationValid(uint32_t start_addr)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
    uint16_t crc = CalculateCRC16((uint8_t *)start_addr, APP_END_ADDR - start_addr - 8);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <IsApplicationValid+0x44>)
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	f001 fab3 	bl	8004710 <CalculateCRC16>
 80031aa:	4603      	mov	r3, r0
 80031ac:	81fb      	strh	r3, [r7, #14]
    uint16_t stored_crc = *(uint16_t *)(APP_END_ADDR - 8);
 80031ae:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <IsApplicationValid+0x44>)
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	81bb      	strh	r3, [r7, #12]
    return (crc == stored_crc) && (*(uint32_t *)APP_VALIDITY_FLAG_ADDR == 0xA5A5A5A5);
 80031b4:	89fa      	ldrh	r2, [r7, #14]
 80031b6:	89bb      	ldrh	r3, [r7, #12]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d106      	bne.n	80031ca <IsApplicationValid+0x36>
 80031bc:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <IsApplicationValid+0x48>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 80031c4:	d101      	bne.n	80031ca <IsApplicationValid+0x36>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <IsApplicationValid+0x38>
 80031ca:	2300      	movs	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	0807f7f7 	.word	0x0807f7f7
 80031dc:	0807f820 	.word	0x0807f820

080031e0 <JumpToApplication>:

void JumpToApplication(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
    if (IsApplicationValid(APP_START_ADDR)) {
 80031e6:	481f      	ldr	r0, [pc, #124]	@ (8003264 <JumpToApplication+0x84>)
 80031e8:	f7ff ffd4 	bl	8003194 <IsApplicationValid>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00e      	beq.n	8003210 <JumpToApplication+0x30>
        uint32_t app_jump_address = *(volatile uint32_t *)(APP_START_ADDR + 4);
 80031f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <JumpToApplication+0x88>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
        void (*app_reset_handler)(void) = (void (*)(void))app_jump_address;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	60bb      	str	r3, [r7, #8]
        __set_MSP(*(volatile uint32_t *)APP_START_ADDR);
 80031fc:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <JumpToApplication+0x84>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f383 8808 	msr	MSP, r3
}
 8003208:	bf00      	nop
        app_reset_handler();
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4798      	blx	r3
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
                HAL_Delay(500);
            }
        }
    }
}
 800320e:	e025      	b.n	800325c <JumpToApplication+0x7c>
        Log_Error("Main application invalid, falling back to backup...");
 8003210:	4816      	ldr	r0, [pc, #88]	@ (800326c <JumpToApplication+0x8c>)
 8003212:	f7fe fbe7 	bl	80019e4 <Log_Error>
        if (IsApplicationValid(BACKUP_START_ADDR)) {
 8003216:	4816      	ldr	r0, [pc, #88]	@ (8003270 <JumpToApplication+0x90>)
 8003218:	f7ff ffbc 	bl	8003194 <IsApplicationValid>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00e      	beq.n	8003240 <JumpToApplication+0x60>
            uint32_t backup_jump_address = *(volatile uint32_t *)(BACKUP_START_ADDR + 4);
 8003222:	4b14      	ldr	r3, [pc, #80]	@ (8003274 <JumpToApplication+0x94>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	617b      	str	r3, [r7, #20]
            void (*backup_reset_handler)(void) = (void (*)(void))backup_jump_address;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	613b      	str	r3, [r7, #16]
            __set_MSP(*(volatile uint32_t *)BACKUP_START_ADDR);
 800322c:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <JumpToApplication+0x90>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f383 8808 	msr	MSP, r3
}
 8003238:	bf00      	nop
            backup_reset_handler();
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4798      	blx	r3
}
 800323e:	e00d      	b.n	800325c <JumpToApplication+0x7c>
            Log_Error("Backup application also invalid, halting...");
 8003240:	480d      	ldr	r0, [pc, #52]	@ (8003278 <JumpToApplication+0x98>)
 8003242:	f7fe fbcf 	bl	80019e4 <Log_Error>
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003246:	2101      	movs	r1, #1
 8003248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800324c:	f004 f9b4 	bl	80075b8 <HAL_GPIO_TogglePin>
                HAL_Delay(500);
 8003250:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003254:	f002 f8c0 	bl	80053d8 <HAL_Delay>
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003258:	bf00      	nop
 800325a:	e7f4      	b.n	8003246 <JumpToApplication+0x66>
}
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	08004000 	.word	0x08004000
 8003268:	08004004 	.word	0x08004004
 800326c:	080113d4 	.word	0x080113d4
 8003270:	08040000 	.word	0x08040000
 8003274:	08040004 	.word	0x08040004
 8003278:	08011408 	.word	0x08011408

0800327c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003280:	b0dc      	sub	sp, #368	@ 0x170
 8003282:	af08      	add	r7, sp, #32
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8003284:	f002 f833 	bl	80052ee <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8003288:	f000 fbc4 	bl	8003a14 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800328c:	f000 fe02 	bl	8003e94 <MX_GPIO_Init>
    MX_I2C1_Init();
 8003290:	f000 fc12 	bl	8003ab8 <MX_I2C1_Init>
    MX_I2C2_Init();
 8003294:	f000 fc50 	bl	8003b38 <MX_I2C2_Init>
    MX_I2C3_Init();
 8003298:	f000 fc8e 	bl	8003bb8 <MX_I2C3_Init>
    MX_RTC_Init();
 800329c:	f000 fccc 	bl	8003c38 <MX_RTC_Init>
    MX_TIM4_Init();
 80032a0:	f000 fd30 	bl	8003d04 <MX_TIM4_Init>
    MX_USART1_UART_Init();
 80032a4:	f000 fd94 	bl	8003dd0 <MX_USART1_UART_Init>
    MX_USART2_Init();
 80032a8:	f000 fdc2 	bl	8003e30 <MX_USART2_Init>
    MX_ADC1_Init();
 80032ac:	f7fe fb12 	bl	80018d4 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80032b0:	2108      	movs	r1, #8
 80032b2:	487f      	ldr	r0, [pc, #508]	@ (80034b0 <main+0x234>)
 80032b4:	f006 feb4 	bl	800a020 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80032b8:	210c      	movs	r1, #12
 80032ba:	487d      	ldr	r0, [pc, #500]	@ (80034b0 <main+0x234>)
 80032bc:	f006 feb0 	bl	800a020 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80032c0:	4b7b      	ldr	r3, [pc, #492]	@ (80034b0 <main+0x234>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2200      	movs	r2, #0
 80032c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80032c8:	4b79      	ldr	r3, [pc, #484]	@ (80034b0 <main+0x234>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2200      	movs	r2, #0
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

    RTC_TimeTypeDef sTime = {0};
 80032d0:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80032e0:	2300      	movs	r3, #0
 80032e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    sTime.Hours = 12;
 80032e6:	230c      	movs	r3, #12
 80032e8:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
    sTime.Minutes = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
    sTime.Seconds = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    sDate.Year = 25;
 80032f8:	2319      	movs	r3, #25
 80032fa:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
    sDate.Month = 3;
 80032fe:	2303      	movs	r3, #3
 8003300:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
    sDate.Date = 28;
 8003304:	231c      	movs	r3, #28
 8003306:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
    sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800330a:	2305      	movs	r3, #5
 800330c:	f887 3120 	strb.w	r3, [r7, #288]	@ 0x120
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003310:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8003314:	2200      	movs	r2, #0
 8003316:	4619      	mov	r1, r3
 8003318:	4866      	ldr	r0, [pc, #408]	@ (80034b4 <main+0x238>)
 800331a:	f006 fb43 	bl	80099a4 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800331e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003322:	2200      	movs	r2, #0
 8003324:	4619      	mov	r1, r3
 8003326:	4863      	ldr	r0, [pc, #396]	@ (80034b4 <main+0x238>)
 8003328:	f006 fc35 	bl	8009b96 <HAL_RTC_SetDate>

    Log_Init();
 800332c:	f7fe fc36 	bl	8001b9c <Log_Init>

    // Check if we should enter bootloader mode
    Bootloader_Check();
 8003330:	f7ff fd46 	bl	8002dc0 <Bootloader_Check>

    if (firmware_update_mode)
 8003334:	4b60      	ldr	r3, [pc, #384]	@ (80034b8 <main+0x23c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <main+0xc8>
    {
        Bootloader_FirmwareUpdate();
 800333c:	f7ff fd74 	bl	8002e28 <Bootloader_FirmwareUpdate>
        // If we return from Bootloader_FirmwareUpdate, something went wrong, so reboot
        HAL_NVIC_SystemReset();
 8003340:	f003 fcd3 	bl	8006cea <HAL_NVIC_SystemReset>
    }

    // Jump to the application
    JumpToApplication();
 8003344:	f7ff ff4c 	bl	80031e0 <JumpToApplication>

    // The following code will only execute if the jump fails
    Log_Error("Failed to jump to application, entering normal operation");
 8003348:	485c      	ldr	r0, [pc, #368]	@ (80034bc <main+0x240>)
 800334a:	f7fe fb4b 	bl	80019e4 <Log_Error>

    if (BQ76920_Init(&hi2c1) != HAL_OK)
 800334e:	485c      	ldr	r0, [pc, #368]	@ (80034c0 <main+0x244>)
 8003350:	f7fd fe66 	bl	8001020 <BQ76920_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <main+0xe8>
    {
        Log_Error("BQ76920 (I2C1) initialization failed");
 800335a:	485a      	ldr	r0, [pc, #360]	@ (80034c4 <main+0x248>)
 800335c:	f7fe fb42 	bl	80019e4 <Log_Error>
        Error_Handler();
 8003360:	f000 fe3e 	bl	8003fe0 <Error_Handler>
    }

    if (BQ76920_Init(&hi2c2) != HAL_OK)
 8003364:	4858      	ldr	r0, [pc, #352]	@ (80034c8 <main+0x24c>)
 8003366:	f7fd fe5b 	bl	8001020 <BQ76920_Init>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <main+0xfe>
    {
        Log_Error("BQ76920 (I2C2) initialization failed");
 8003370:	4856      	ldr	r0, [pc, #344]	@ (80034cc <main+0x250>)
 8003372:	f7fe fb37 	bl	80019e4 <Log_Error>
        Error_Handler();
 8003376:	f000 fe33 	bl	8003fe0 <Error_Handler>
    }

    KalmanFilter_Init(&soc_kf, INITIAL_SOC, 1.0, 0.01, 1.0);
 800337a:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800337e:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 80034d0 <main+0x254>
 8003382:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003386:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 80034d4 <main+0x258>
 800338a:	4853      	ldr	r0, [pc, #332]	@ (80034d8 <main+0x25c>)
 800338c:	f001 f9fd 	bl	800478a <KalmanFilter_Init>
    KalmanFilter_Init(&soh_kf, INITIAL_SOH, 1.0, 0.01, 1.0);
 8003390:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8003394:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 80034d0 <main+0x254>
 8003398:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800339c:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 80034dc <main+0x260>
 80033a0:	484f      	ldr	r0, [pc, #316]	@ (80034e0 <main+0x264>)
 80033a2:	f001 f9f2 	bl	800478a <KalmanFilter_Init>

    PID_Init();
 80033a6:	f001 fa5b 	bl	8004860 <PID_Init>

    bms_online = 1;
 80033aa:	4b4e      	ldr	r3, [pc, #312]	@ (80034e4 <main+0x268>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]

    // Debug LED: Start blinking to indicate application startup (post-flashing)
    startup_blink_start = HAL_GetTick();
 80033b0:	f002 f806 	bl	80053c0 <HAL_GetTick>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4a4c      	ldr	r2, [pc, #304]	@ (80034e8 <main+0x26c>)
 80033b8:	6013      	str	r3, [r2, #0]
    last_blink_toggle = HAL_GetTick();
 80033ba:	f002 f801 	bl	80053c0 <HAL_GetTick>
 80033be:	4603      	mov	r3, r0
 80033c0:	4a4a      	ldr	r2, [pc, #296]	@ (80034ec <main+0x270>)
 80033c2:	6013      	str	r3, [r2, #0]

    // Initialize battery configuration (in a real system, load from flash or EEPROM)
    initial_capacity = battery_config.nominal_capacity;
 80033c4:	4b4a      	ldr	r3, [pc, #296]	@ (80034f0 <main+0x274>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a4a      	ldr	r2, [pc, #296]	@ (80034f4 <main+0x278>)
 80033ca:	6013      	str	r3, [r2, #0]
    actual_capacity = battery_config.nominal_capacity;
 80033cc:	4b48      	ldr	r3, [pc, #288]	@ (80034f0 <main+0x274>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a49      	ldr	r2, [pc, #292]	@ (80034f8 <main+0x27c>)
 80033d2:	6013      	str	r3, [r2, #0]
    coulomb_count = (INITIAL_SOC / 100.0) * battery_config.nominal_capacity;
 80033d4:	4b46      	ldr	r3, [pc, #280]	@ (80034f0 <main+0x274>)
 80033d6:	edd3 7a00 	vldr	s15, [r3]
 80033da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80033de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e2:	4b46      	ldr	r3, [pc, #280]	@ (80034fc <main+0x280>)
 80033e4:	edc3 7a00 	vstr	s15, [r3]
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    uint32_t last_log_read = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    uint32_t last_status_send = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    uint32_t last_time_sync = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    while (1)
    {
        // Debug LED: Blink rapidly for 5 seconds after startup
        if (HAL_GetTick() - startup_blink_start < STARTUP_BLINK_DURATION)
 80033fa:	f001 ffe1 	bl	80053c0 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b39      	ldr	r3, [pc, #228]	@ (80034e8 <main+0x26c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3287 	movw	r2, #4999	@ 0x1387
 800340a:	4293      	cmp	r3, r2
 800340c:	d812      	bhi.n	8003434 <main+0x1b8>
        {
            if (HAL_GetTick() - last_blink_toggle >= BLINK_INTERVAL)
 800340e:	f001 ffd7 	bl	80053c0 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	4b35      	ldr	r3, [pc, #212]	@ (80034ec <main+0x270>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2bc7      	cmp	r3, #199	@ 0xc7
 800341c:	d910      	bls.n	8003440 <main+0x1c4>
            {
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800341e:	2101      	movs	r1, #1
 8003420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003424:	f004 f8c8 	bl	80075b8 <HAL_GPIO_TogglePin>
                last_blink_toggle = HAL_GetTick();
 8003428:	f001 ffca 	bl	80053c0 <HAL_GetTick>
 800342c:	4603      	mov	r3, r0
 800342e:	4a2f      	ldr	r2, [pc, #188]	@ (80034ec <main+0x270>)
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e005      	b.n	8003440 <main+0x1c4>
            }
        }
        else
        {
            // After 5 seconds, turn off the LED
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003434:	2200      	movs	r2, #0
 8003436:	2101      	movs	r1, #1
 8003438:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800343c:	f004 f8a4 	bl	8007588 <HAL_GPIO_WritePin>
        }

        // Step 1: Read data from the first BQ76920 (IC2)
        if (BQ76920_ReadVoltages(&hi2c1, group_voltages_1, 0) != HAL_OK)
 8003440:	2200      	movs	r2, #0
 8003442:	492f      	ldr	r1, [pc, #188]	@ (8003500 <main+0x284>)
 8003444:	481e      	ldr	r0, [pc, #120]	@ (80034c0 <main+0x244>)
 8003446:	f7fd fe0f 	bl	8001068 <BQ76920_ReadVoltages>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d015      	beq.n	800347c <main+0x200>
        {
            Log_Error("Error reading BQ76920 (I2C1) group voltages");
 8003450:	482c      	ldr	r0, [pc, #176]	@ (8003504 <main+0x288>)
 8003452:	f7fe fac7 	bl	80019e4 <Log_Error>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8003456:	2300      	movs	r3, #0
 8003458:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
 800345c:	e00a      	b.n	8003474 <main+0x1f8>
            {
                group_voltages_1[i] = 0;
 800345e:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8003462:	4a27      	ldr	r2, [pc, #156]	@ (8003500 <main+0x284>)
 8003464:	2100      	movs	r1, #0
 8003466:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 800346a:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 800346e:	3301      	adds	r3, #1
 8003470:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
 8003474:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8003478:	2b03      	cmp	r3, #3
 800347a:	d9f0      	bls.n	800345e <main+0x1e2>
            }
        }
        if (BQ76920_ReadCurrent(&hi2c1, &pack_current_1) != HAL_OK)
 800347c:	4922      	ldr	r1, [pc, #136]	@ (8003508 <main+0x28c>)
 800347e:	4810      	ldr	r0, [pc, #64]	@ (80034c0 <main+0x244>)
 8003480:	f7fd feba 	bl	80011f8 <BQ76920_ReadCurrent>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <main+0x214>
        {
            Log_Error("Error reading BQ76920 (I2C1) current");
 800348a:	4820      	ldr	r0, [pc, #128]	@ (800350c <main+0x290>)
 800348c:	f7fe faaa 	bl	80019e4 <Log_Error>
        }

        // Step 2: Read data from the second BQ76920 (IC4)
        if (BQ76920_ReadVoltages(&hi2c2, group_voltages_2, 0) != HAL_OK)
 8003490:	2200      	movs	r2, #0
 8003492:	491f      	ldr	r1, [pc, #124]	@ (8003510 <main+0x294>)
 8003494:	480c      	ldr	r0, [pc, #48]	@ (80034c8 <main+0x24c>)
 8003496:	f7fd fde7 	bl	8001068 <BQ76920_ReadVoltages>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d04a      	beq.n	8003536 <main+0x2ba>
        {
            Log_Error("Error reading BQ76920 (I2C2) group voltages");
 80034a0:	481c      	ldr	r0, [pc, #112]	@ (8003514 <main+0x298>)
 80034a2:	f7fe fa9f 	bl	80019e4 <Log_Error>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	f887 3142 	strb.w	r3, [r7, #322]	@ 0x142
 80034ac:	e03f      	b.n	800352e <main+0x2b2>
 80034ae:	bf00      	nop
 80034b0:	200003bc 	.word	0x200003bc
 80034b4:	20000398 	.word	0x20000398
 80034b8:	20000638 	.word	0x20000638
 80034bc:	08011434 	.word	0x08011434
 80034c0:	2000029c 	.word	0x2000029c
 80034c4:	08011470 	.word	0x08011470
 80034c8:	200002f0 	.word	0x200002f0
 80034cc:	08011498 	.word	0x08011498
 80034d0:	3c23d70a 	.word	0x3c23d70a
 80034d4:	42480000 	.word	0x42480000
 80034d8:	200004fc 	.word	0x200004fc
 80034dc:	42c80000 	.word	0x42c80000
 80034e0:	2000050c 	.word	0x2000050c
 80034e4:	200005fb 	.word	0x200005fb
 80034e8:	20000630 	.word	0x20000630
 80034ec:	20000634 	.word	0x20000634
 80034f0:	2000000c 	.word	0x2000000c
 80034f4:	20000564 	.word	0x20000564
 80034f8:	20000568 	.word	0x20000568
 80034fc:	20000560 	.word	0x20000560
 8003500:	200004e0 	.word	0x200004e0
 8003504:	080114c0 	.word	0x080114c0
 8003508:	200004f0 	.word	0x200004f0
 800350c:	080114ec 	.word	0x080114ec
 8003510:	200004e8 	.word	0x200004e8
 8003514:	08011514 	.word	0x08011514
            {
                group_voltages_2[i] = 0;
 8003518:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 800351c:	4a8e      	ldr	r2, [pc, #568]	@ (8003758 <main+0x4dc>)
 800351e:	2100      	movs	r1, #0
 8003520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8003524:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 8003528:	3301      	adds	r3, #1
 800352a:	f887 3142 	strb.w	r3, [r7, #322]	@ 0x142
 800352e:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 8003532:	2b03      	cmp	r3, #3
 8003534:	d9f0      	bls.n	8003518 <main+0x29c>
            }
        }
        if (BQ76920_ReadCurrent(&hi2c2, &pack_current_2) != HAL_OK)
 8003536:	4989      	ldr	r1, [pc, #548]	@ (800375c <main+0x4e0>)
 8003538:	4889      	ldr	r0, [pc, #548]	@ (8003760 <main+0x4e4>)
 800353a:	f7fd fe5d 	bl	80011f8 <BQ76920_ReadCurrent>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <main+0x2ce>
        {
            Log_Error("Error reading BQ76920 (I2C2) current");
 8003544:	4887      	ldr	r0, [pc, #540]	@ (8003764 <main+0x4e8>)
 8003546:	f7fe fa4d 	bl	80019e4 <Log_Error>
        }

        // Step 2.5: Read temperatures from both sensors (NTC-1 and NTC-2)
        if (Temperature_Read(&hi2c1, &hi2c2, &temperature_1, &temperature_2) != HAL_OK)
 800354a:	4b87      	ldr	r3, [pc, #540]	@ (8003768 <main+0x4ec>)
 800354c:	4a87      	ldr	r2, [pc, #540]	@ (800376c <main+0x4f0>)
 800354e:	4984      	ldr	r1, [pc, #528]	@ (8003760 <main+0x4e4>)
 8003550:	4887      	ldr	r0, [pc, #540]	@ (8003770 <main+0x4f4>)
 8003552:	f7fe f94b 	bl	80017ec <Temperature_Read>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <main+0x2f6>
        {
            Log_Error("Error reading temperatures (I2C1/I2C2)");
 800355c:	4885      	ldr	r0, [pc, #532]	@ (8003774 <main+0x4f8>)
 800355e:	f7fe fa41 	bl	80019e4 <Log_Error>
            temperature_1 = INT16_MIN; // Sentinel value to indicate error
 8003562:	4b82      	ldr	r3, [pc, #520]	@ (800376c <main+0x4f0>)
 8003564:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003568:	801a      	strh	r2, [r3, #0]
            temperature_2 = INT16_MIN; // Sentinel value to indicate error
 800356a:	4b7f      	ldr	r3, [pc, #508]	@ (8003768 <main+0x4ec>)
 800356c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003570:	801a      	strh	r2, [r3, #0]
        }

        // Step 3: Check for redundancy discrepancies
        uint8_t discrepancy_flag = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        BQ76920_CheckRedundancy(group_voltages_1, group_voltages_2, pack_current_1, pack_current_2, &discrepancy_flag);
 8003578:	4b7f      	ldr	r3, [pc, #508]	@ (8003778 <main+0x4fc>)
 800357a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800357e:	4b77      	ldr	r3, [pc, #476]	@ (800375c <main+0x4e0>)
 8003580:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003584:	f207 131f 	addw	r3, r7, #287	@ 0x11f
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	460b      	mov	r3, r1
 800358c:	4972      	ldr	r1, [pc, #456]	@ (8003758 <main+0x4dc>)
 800358e:	487b      	ldr	r0, [pc, #492]	@ (800377c <main+0x500>)
 8003590:	f7fd ff98 	bl	80014c4 <BQ76920_CheckRedundancy>
        if (discrepancy_flag)
 8003594:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <main+0x332>
        {
            error_flags |= ERROR_DISCREPANCY;
 800359c:	4b78      	ldr	r3, [pc, #480]	@ (8003780 <main+0x504>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035a4:	4a76      	ldr	r2, [pc, #472]	@ (8003780 <main+0x504>)
 80035a6:	6013      	str	r3, [r2, #0]
            Log_Error("Redundancy discrepancy detected");
 80035a8:	4876      	ldr	r0, [pc, #472]	@ (8003784 <main+0x508>)
 80035aa:	f7fe fa1b 	bl	80019e4 <Log_Error>
        }

        // Step 4: Read internal temperature
        pcb_temperature = Read_Internal_Temperature();
 80035ae:	f7ff f85b 	bl	8002668 <Read_Internal_Temperature>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b74      	ldr	r3, [pc, #464]	@ (8003788 <main+0x50c>)
 80035b8:	801a      	strh	r2, [r3, #0]

        // Step 5: Check BQ76920 status flags (replaces manual OV/UV and overcurrent checks)
        BQ76920_CheckStatus(&hi2c1, &hi2c2, &error_flags);
 80035ba:	4a71      	ldr	r2, [pc, #452]	@ (8003780 <main+0x504>)
 80035bc:	4968      	ldr	r1, [pc, #416]	@ (8003760 <main+0x4e4>)
 80035be:	486c      	ldr	r0, [pc, #432]	@ (8003770 <main+0x4f4>)
 80035c0:	f7fd ffc0 	bl	8001544 <BQ76920_CheckStatus>

        // Step 6: Check temperature limits
        int16_t highest_temp = (temperature_1 > temperature_2) ? temperature_1 : temperature_2;
 80035c4:	4b68      	ldr	r3, [pc, #416]	@ (8003768 <main+0x4ec>)
 80035c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035ca:	4b68      	ldr	r3, [pc, #416]	@ (800376c <main+0x4f0>)
 80035cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bfb8      	it	lt
 80035d4:	4613      	movlt	r3, r2
 80035d6:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        int16_t lowest_temp = (temperature_1 < temperature_2) ? temperature_1 : temperature_2;
 80035da:	4b63      	ldr	r3, [pc, #396]	@ (8003768 <main+0x4ec>)
 80035dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035e0:	4b62      	ldr	r3, [pc, #392]	@ (800376c <main+0x4f0>)
 80035e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e6:	4293      	cmp	r3, r2
 80035e8:	bfa8      	it	ge
 80035ea:	4613      	movge	r3, r2
 80035ec:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
        if (highest_temp > battery_config.overtemp_threshold || pcb_temperature > battery_config.overtemp_threshold)
 80035f0:	4b66      	ldr	r3, [pc, #408]	@ (800378c <main+0x510>)
 80035f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80035f6:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	@ 0x13e
 80035fa:	429a      	cmp	r2, r3
 80035fc:	dc07      	bgt.n	800360e <main+0x392>
 80035fe:	4b63      	ldr	r3, [pc, #396]	@ (800378c <main+0x510>)
 8003600:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8003604:	4b60      	ldr	r3, [pc, #384]	@ (8003788 <main+0x50c>)
 8003606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800360a:	429a      	cmp	r2, r3
 800360c:	da08      	bge.n	8003620 <main+0x3a4>
        {
            error_flags |= ERROR_OVERTEMP;
 800360e:	4b5c      	ldr	r3, [pc, #368]	@ (8003780 <main+0x504>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f043 0320 	orr.w	r3, r3, #32
 8003616:	4a5a      	ldr	r2, [pc, #360]	@ (8003780 <main+0x504>)
 8003618:	6013      	str	r3, [r2, #0]
            Log_Error("Overtemperature detected");
 800361a:	485d      	ldr	r0, [pc, #372]	@ (8003790 <main+0x514>)
 800361c:	f7fe f9e2 	bl	80019e4 <Log_Error>
        }
        if (lowest_temp < battery_config.undertemp_threshold)
 8003620:	4b5a      	ldr	r3, [pc, #360]	@ (800378c <main+0x510>)
 8003622:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003626:	f9b7 213c 	ldrsh.w	r2, [r7, #316]	@ 0x13c
 800362a:	429a      	cmp	r2, r3
 800362c:	da08      	bge.n	8003640 <main+0x3c4>
        {
            error_flags |= ERROR_UNDERTEMP;
 800362e:	4b54      	ldr	r3, [pc, #336]	@ (8003780 <main+0x504>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003636:	4a52      	ldr	r2, [pc, #328]	@ (8003780 <main+0x504>)
 8003638:	6013      	str	r3, [r2, #0]
            Log_Error("Undertemperature detected");
 800363a:	4856      	ldr	r0, [pc, #344]	@ (8003794 <main+0x518>)
 800363c:	f7fe f9d2 	bl	80019e4 <Log_Error>
        }

        // Step 7: Update timers
        total_operating_time = HAL_GetTick() / 1000;
 8003640:	f001 febe 	bl	80053c0 <HAL_GetTick>
 8003644:	4603      	mov	r3, r0
 8003646:	4a54      	ldr	r2, [pc, #336]	@ (8003798 <main+0x51c>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	4a53      	ldr	r2, [pc, #332]	@ (800379c <main+0x520>)
 8003650:	6013      	str	r3, [r2, #0]
        int16_t total_current = (pack_current_1 + pack_current_2) / 2;
 8003652:	4b49      	ldr	r3, [pc, #292]	@ (8003778 <main+0x4fc>)
 8003654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003658:	461a      	mov	r2, r3
 800365a:	4b40      	ldr	r3, [pc, #256]	@ (800375c <main+0x4e0>)
 800365c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003660:	4413      	add	r3, r2
 8003662:	0fda      	lsrs	r2, r3, #31
 8003664:	4413      	add	r3, r2
 8003666:	105b      	asrs	r3, r3, #1
 8003668:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
        if (total_current < 0) {
 800366c:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	@ 0x13a
 8003670:	2b00      	cmp	r3, #0
 8003672:	da2b      	bge.n	80036cc <main+0x450>
            total_charge_time += (uint32_t)LOOP_TIME;
 8003674:	4b4a      	ldr	r3, [pc, #296]	@ (80037a0 <main+0x524>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a49      	ldr	r2, [pc, #292]	@ (80037a0 <main+0x524>)
 800367a:	6013      	str	r3, [r2, #0]
            if (soc < 20.0 && !charging_started) {
 800367c:	4b49      	ldr	r3, [pc, #292]	@ (80037a4 <main+0x528>)
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368e:	d506      	bpl.n	800369e <main+0x422>
 8003690:	4b45      	ldr	r3, [pc, #276]	@ (80037a8 <main+0x52c>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d102      	bne.n	800369e <main+0x422>
                charging_started = 1;
 8003698:	4b43      	ldr	r3, [pc, #268]	@ (80037a8 <main+0x52c>)
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
            }
            if (soc >= 100.0 && charging_started) {
 800369e:	4b41      	ldr	r3, [pc, #260]	@ (80037a4 <main+0x528>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80037ac <main+0x530>
 80036a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b0:	db14      	blt.n	80036dc <main+0x460>
 80036b2:	4b3d      	ldr	r3, [pc, #244]	@ (80037a8 <main+0x52c>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d010      	beq.n	80036dc <main+0x460>
                charge_cycle_count++;
 80036ba:	4b3d      	ldr	r3, [pc, #244]	@ (80037b0 <main+0x534>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3301      	adds	r3, #1
 80036c0:	4a3b      	ldr	r2, [pc, #236]	@ (80037b0 <main+0x534>)
 80036c2:	6013      	str	r3, [r2, #0]
                charging_started = 0;
 80036c4:	4b38      	ldr	r3, [pc, #224]	@ (80037a8 <main+0x52c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e007      	b.n	80036dc <main+0x460>
            }
        } else if (total_current > 0) {
 80036cc:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	@ 0x13a
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	dd03      	ble.n	80036dc <main+0x460>
            total_discharge_time += (uint32_t)LOOP_TIME;
 80036d4:	4b37      	ldr	r3, [pc, #220]	@ (80037b4 <main+0x538>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a36      	ldr	r2, [pc, #216]	@ (80037b4 <main+0x538>)
 80036da:	6013      	str	r3, [r2, #0]
        }

        // Step 8: Balance cells
        if (BQ76920_BalanceCells(&hi2c1, group_voltages_1, 0, &balancing_mask_1) != HAL_OK)
 80036dc:	4b36      	ldr	r3, [pc, #216]	@ (80037b8 <main+0x53c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	4926      	ldr	r1, [pc, #152]	@ (800377c <main+0x500>)
 80036e2:	4823      	ldr	r0, [pc, #140]	@ (8003770 <main+0x4f4>)
 80036e4:	f7fd fdd6 	bl	8001294 <BQ76920_BalanceCells>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <main+0x478>
        {
            Log_Error("Error balancing groups (I2C1)");
 80036ee:	4833      	ldr	r0, [pc, #204]	@ (80037bc <main+0x540>)
 80036f0:	f7fe f978 	bl	80019e4 <Log_Error>
        }
        if (BQ76920_BalanceCells(&hi2c2, group_voltages_2, 0, &balancing_mask_2) != HAL_OK)
 80036f4:	4b32      	ldr	r3, [pc, #200]	@ (80037c0 <main+0x544>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	4917      	ldr	r1, [pc, #92]	@ (8003758 <main+0x4dc>)
 80036fa:	4819      	ldr	r0, [pc, #100]	@ (8003760 <main+0x4e4>)
 80036fc:	f7fd fdca 	bl	8001294 <BQ76920_BalanceCells>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <main+0x490>
        {
            Log_Error("Error balancing groups (I2C2)");
 8003706:	482f      	ldr	r0, [pc, #188]	@ (80037c4 <main+0x548>)
 8003708:	f7fe f96c 	bl	80019e4 <Log_Error>
        }
        balancing_active = (balancing_mask_1 || balancing_mask_2) ? 1 : 0;
 800370c:	4b2a      	ldr	r3, [pc, #168]	@ (80037b8 <main+0x53c>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <main+0x4a0>
 8003714:	4b2a      	ldr	r3, [pc, #168]	@ (80037c0 <main+0x544>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <main+0x4a4>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <main+0x4a6>
 8003720:	2300      	movs	r3, #0
 8003722:	b2da      	uxtb	r2, r3
 8003724:	4b28      	ldr	r3, [pc, #160]	@ (80037c8 <main+0x54c>)
 8003726:	701a      	strb	r2, [r3, #0]

        // Step 9: Control heaters
        PID_Control(lowest_temp);
 8003728:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	@ 0x13c
 800372c:	4618      	mov	r0, r3
 800372e:	f001 f8af 	bl	8004890 <PID_Control>

        // Step 10: Update SOC and SOH
        Update_SOC_SOH();
 8003732:	f7fe fa59 	bl	8001be8 <Update_SOC_SOH>

        // Step 11: Update BMS mode
        Update_BMS_Mode();
 8003736:	f7fe fb2f 	bl	8001d98 <Update_BMS_Mode>

        // Step 12: Apply CC-CV charging control
        ChargeBattery();
 800373a:	f7ff fa83 	bl	8002c44 <ChargeBattery>

        // Step 13: Log data
        char message[MESSAGE_SIZE];
        snprintf(message, sizeof(message), "Time: %lu | ", HAL_GetTick());
 800373e:	f001 fe3f 	bl	80053c0 <HAL_GetTick>
 8003742:	4603      	mov	r3, r0
 8003744:	f107 0010 	add.w	r0, r7, #16
 8003748:	4a20      	ldr	r2, [pc, #128]	@ (80037cc <main+0x550>)
 800374a:	2138      	movs	r1, #56	@ 0x38
 800374c:	f009 fb18 	bl	800cd80 <sniprintf>
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8003750:	2300      	movs	r3, #0
 8003752:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141
 8003756:	e05f      	b.n	8003818 <main+0x59c>
 8003758:	200004e8 	.word	0x200004e8
 800375c:	200004f2 	.word	0x200004f2
 8003760:	200002f0 	.word	0x200002f0
 8003764:	08011540 	.word	0x08011540
 8003768:	200004f6 	.word	0x200004f6
 800376c:	200004f4 	.word	0x200004f4
 8003770:	2000029c 	.word	0x2000029c
 8003774:	08011568 	.word	0x08011568
 8003778:	200004f0 	.word	0x200004f0
 800377c:	200004e0 	.word	0x200004e0
 8003780:	200005fc 	.word	0x200005fc
 8003784:	08011590 	.word	0x08011590
 8003788:	200004f8 	.word	0x200004f8
 800378c:	2000000c 	.word	0x2000000c
 8003790:	080115b0 	.word	0x080115b0
 8003794:	080115cc 	.word	0x080115cc
 8003798:	10624dd3 	.word	0x10624dd3
 800379c:	2000060c 	.word	0x2000060c
 80037a0:	20000604 	.word	0x20000604
 80037a4:	20000000 	.word	0x20000000
 80037a8:	20000610 	.word	0x20000610
 80037ac:	42c80000 	.word	0x42c80000
 80037b0:	20000600 	.word	0x20000600
 80037b4:	20000608 	.word	0x20000608
 80037b8:	2000061a 	.word	0x2000061a
 80037bc:	080115e8 	.word	0x080115e8
 80037c0:	2000061b 	.word	0x2000061b
 80037c4:	08011608 	.word	0x08011608
 80037c8:	2000061c 	.word	0x2000061c
 80037cc:	08011628 	.word	0x08011628
        {
            char group_data[20];
            snprintf(group_data, sizeof(group_data), "Cell%d: %dmV ", i + 1, group_voltages_1[i]);
 80037d0:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 80037da:	497f      	ldr	r1, [pc, #508]	@ (80039d8 <main+0x75c>)
 80037dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80037e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	4a7c      	ldr	r2, [pc, #496]	@ (80039dc <main+0x760>)
 80037ea:	2114      	movs	r1, #20
 80037ec:	f009 fac8 	bl	800cd80 <sniprintf>
            strncat(message, group_data, MESSAGE_SIZE - strlen(message) - 1);
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fc fd3b 	bl	8000270 <strlen>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8003800:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8003804:	f107 0310 	add.w	r3, r7, #16
 8003808:	4618      	mov	r0, r3
 800380a:	f009 fb99 	bl	800cf40 <strncat>
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 800380e:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 8003812:	3301      	adds	r3, #1
 8003814:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141
 8003818:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 800381c:	2b03      	cmp	r3, #3
 800381e:	d9d7      	bls.n	80037d0 <main+0x554>
        }
        char temp_data[88];
        snprintf(temp_data, sizeof(temp_data), "I1: %dmA I2: %dmA T1: %dC T2: %dC PCB: %dC SOC: %.1f%% SOH: %.1f%%",
 8003820:	4b6f      	ldr	r3, [pc, #444]	@ (80039e0 <main+0x764>)
 8003822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003826:	4698      	mov	r8, r3
 8003828:	4b6e      	ldr	r3, [pc, #440]	@ (80039e4 <main+0x768>)
 800382a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382e:	461e      	mov	r6, r3
 8003830:	4b6d      	ldr	r3, [pc, #436]	@ (80039e8 <main+0x76c>)
 8003832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	4b6c      	ldr	r3, [pc, #432]	@ (80039ec <main+0x770>)
 800383a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	4b6b      	ldr	r3, [pc, #428]	@ (80039f0 <main+0x774>)
 8003842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	4b6a      	ldr	r3, [pc, #424]	@ (80039f4 <main+0x778>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fc fe7b 	bl	8000548 <__aeabi_f2d>
 8003852:	4604      	mov	r4, r0
 8003854:	460d      	mov	r5, r1
 8003856:	4b68      	ldr	r3, [pc, #416]	@ (80039f8 <main+0x77c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fe74 	bl	8000548 <__aeabi_f2d>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8003868:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800386c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	9203      	str	r2, [sp, #12]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	9202      	str	r2, [sp, #8]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	9600      	str	r6, [sp, #0]
 800387e:	4643      	mov	r3, r8
 8003880:	4a5e      	ldr	r2, [pc, #376]	@ (80039fc <main+0x780>)
 8003882:	2158      	movs	r1, #88	@ 0x58
 8003884:	f009 fa7c 	bl	800cd80 <sniprintf>
                 pack_current_1, pack_current_2, temperature_1, temperature_2, pcb_temperature, soc, soh);
        strncat(message, temp_data, MESSAGE_SIZE - strlen(message) - 1);
 8003888:	f107 0310 	add.w	r3, r7, #16
 800388c:	4618      	mov	r0, r3
 800388e:	f7fc fcef 	bl	8000270 <strlen>
 8003892:	4603      	mov	r3, r0
 8003894:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8003898:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800389c:	f107 0310 	add.w	r3, r7, #16
 80038a0:	4618      	mov	r0, r3
 80038a2:	f009 fb4d 	bl	800cf40 <strncat>
        Log_Error(message);
 80038a6:	f107 0310 	add.w	r3, r7, #16
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe f89a 	bl	80019e4 <Log_Error>

        // Step 14: Send logs every 10 seconds
        if (HAL_GetTick() - last_log_read >= 10000)
 80038b0:	f001 fd86 	bl	80053c0 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d905      	bls.n	80038d0 <main+0x654>
        {
            Log_Read_All();
 80038c4:	f7fe f922 	bl	8001b0c <Log_Read_All>
            last_log_read = HAL_GetTick();
 80038c8:	f001 fd7a 	bl	80053c0 <HAL_GetTick>
 80038cc:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
        }

        // Step 15: Send status every 5 seconds
        if (HAL_GetTick() - last_status_send >= 5000)
 80038d0:	f001 fd76 	bl	80053c0 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3287 	movw	r2, #4999	@ 0x1387
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d905      	bls.n	80038f0 <main+0x674>
        {
            SSP_SendStatus();
 80038e4:	f7fe feee 	bl	80026c4 <SSP_SendStatus>
            last_status_send = HAL_GetTick();
 80038e8:	f001 fd6a 	bl	80053c0 <HAL_GetTick>
 80038ec:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
        }

        // Step 16: Synchronize time with OBC every 60 seconds
        if (HAL_GetTick() - last_time_sync >= 60000)
 80038f0:	f001 fd66 	bl	80053c0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003900:	4293      	cmp	r3, r2
 8003902:	d94b      	bls.n	800399c <main+0x720>
        {
            SSP_TimeTypeDef time = {0};
 8003904:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	809a      	strh	r2, [r3, #4]
            if (SSP_RequestTime(&husart2, &time) == HAL_OK)
 800390e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8003912:	4619      	mov	r1, r3
 8003914:	483a      	ldr	r0, [pc, #232]	@ (8003a00 <main+0x784>)
 8003916:	f001 fc31 	bl	800517c <SSP_RequestTime>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d136      	bne.n	800398e <main+0x712>
            {
                RTC_TimeTypeDef sTime = {0};
 8003920:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
                RTC_DateTypeDef sDate = {0};
 8003930:	2300      	movs	r3, #0
 8003932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                sTime.Hours = time.hour;
 8003936:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800393a:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
                sTime.Minutes = time.minute;
 800393e:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 8003942:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
                sTime.Seconds = time.second;
 8003946:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 800394a:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
                sDate.Year = (uint8_t)(time.year - 2000); // Assuming year is since 2000
 800394e:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8003952:	3330      	adds	r3, #48	@ 0x30
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
                sDate.Month = time.month;
 800395a:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 800395e:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
                sDate.Date = time.day;
 8003962:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8003966:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
                HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800396a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800396e:	2200      	movs	r2, #0
 8003970:	4619      	mov	r1, r3
 8003972:	4824      	ldr	r0, [pc, #144]	@ (8003a04 <main+0x788>)
 8003974:	f006 f816 	bl	80099a4 <HAL_RTC_SetTime>
                HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003978:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800397c:	2200      	movs	r2, #0
 800397e:	4619      	mov	r1, r3
 8003980:	4820      	ldr	r0, [pc, #128]	@ (8003a04 <main+0x788>)
 8003982:	f006 f908 	bl	8009b96 <HAL_RTC_SetDate>
                Log_Error("Time synchronized with OBC");
 8003986:	4820      	ldr	r0, [pc, #128]	@ (8003a08 <main+0x78c>)
 8003988:	f7fe f82c 	bl	80019e4 <Log_Error>
 800398c:	e002      	b.n	8003994 <main+0x718>
            }
            else
            {
                Log_Error("Failed to synchronize time with OBC");
 800398e:	481f      	ldr	r0, [pc, #124]	@ (8003a0c <main+0x790>)
 8003990:	f7fe f828 	bl	80019e4 <Log_Error>
            }
            last_time_sync = HAL_GetTick();
 8003994:	f001 fd14 	bl	80053c0 <HAL_GetTick>
 8003998:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
        }

        // Step 17: Process received SSP frames
        SSP_FrameTypeDef received_frame = {0};
 800399c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80039a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039a4:	4618      	mov	r0, r3
 80039a6:	2346      	movs	r3, #70	@ 0x46
 80039a8:	461a      	mov	r2, r3
 80039aa:	2100      	movs	r1, #0
 80039ac:	f009 fac0 	bl	800cf30 <memset>
        if (SSP_ReceiveFrame(&husart2, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &received_frame) == HAL_OK)
 80039b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80039b4:	2245      	movs	r2, #69	@ 0x45
 80039b6:	4916      	ldr	r1, [pc, #88]	@ (8003a10 <main+0x794>)
 80039b8:	4811      	ldr	r0, [pc, #68]	@ (8003a00 <main+0x784>)
 80039ba:	f001 fb07 	bl	8004fcc <SSP_ReceiveFrame>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d104      	bne.n	80039ce <main+0x752>
        {
            SSP_ProcessReceivedFrame(&received_frame);
 80039c4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe ff65 	bl	8002898 <SSP_ProcessReceivedFrame>
        }

        HAL_Delay((uint32_t)(LOOP_TIME * 1000));
 80039ce:	2064      	movs	r0, #100	@ 0x64
 80039d0:	f001 fd02 	bl	80053d8 <HAL_Delay>
    {
 80039d4:	e511      	b.n	80033fa <main+0x17e>
 80039d6:	bf00      	nop
 80039d8:	200004e0 	.word	0x200004e0
 80039dc:	08011638 	.word	0x08011638
 80039e0:	200004f0 	.word	0x200004f0
 80039e4:	200004f2 	.word	0x200004f2
 80039e8:	200004f4 	.word	0x200004f4
 80039ec:	200004f6 	.word	0x200004f6
 80039f0:	200004f8 	.word	0x200004f8
 80039f4:	20000000 	.word	0x20000000
 80039f8:	20000004 	.word	0x20000004
 80039fc:	08011648 	.word	0x08011648
 8003a00:	20000490 	.word	0x20000490
 8003a04:	20000398 	.word	0x20000398
 8003a08:	0801168c 	.word	0x0801168c
 8003a0c:	080116a8 	.word	0x080116a8
 8003a10:	200005b4 	.word	0x200005b4

08003a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b096      	sub	sp, #88	@ 0x58
 8003a18:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a1a:	f107 0314 	add.w	r3, r7, #20
 8003a1e:	2244      	movs	r2, #68	@ 0x44
 8003a20:	2100      	movs	r1, #0
 8003a22:	4618      	mov	r0, r3
 8003a24:	f009 fa84 	bl	800cf30 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a28:	463b      	mov	r3, r7
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	605a      	str	r2, [r3, #4]
 8003a30:	609a      	str	r2, [r3, #8]
 8003a32:	60da      	str	r2, [r3, #12]
 8003a34:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003a36:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003a3a:	f004 fc19 	bl	8008270 <HAL_PWREx_ControlVoltageScaling>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <SystemClock_Config+0x34>
    {
        Error_Handler();
 8003a44:	f000 facc 	bl	8003fe0 <Error_Handler>
    }

    /** Configure LSE Drive Capability
    */
    HAL_PWR_EnableBkUpAccess();
 8003a48:	f004 fbf4 	bl	8008234 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003a4c:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <SystemClock_Config+0xa0>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a52:	4a18      	ldr	r2, [pc, #96]	@ (8003ab4 <SystemClock_Config+0xa0>)
 8003a54:	f023 0318 	bic.w	r3, r3, #24
 8003a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003a5c:	2305      	movs	r3, #5
 8003a5e:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a64:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003a66:	2301      	movs	r3, #1
 8003a68:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a6e:	f107 0314 	add.w	r3, r7, #20
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 fc52 	bl	800831c <HAL_RCC_OscConfig>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <SystemClock_Config+0x6e>
    {
        Error_Handler();
 8003a7e:	f000 faaf 	bl	8003fe0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a82:	230f      	movs	r3, #15
 8003a84:	603b      	str	r3, [r7, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003a86:	2302      	movs	r3, #2
 8003a88:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a96:	463b      	mov	r3, r7
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f005 f81a 	bl	8008ad4 <HAL_RCC_ClockConfig>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <SystemClock_Config+0x96>
    {
        Error_Handler();
 8003aa6:	f000 fa9b 	bl	8003fe0 <Error_Handler>
    }
}
 8003aaa:	bf00      	nop
 8003aac:	3758      	adds	r7, #88	@ 0x58
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8003abc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003abe:	4a1c      	ldr	r2, [pc, #112]	@ (8003b30 <MX_I2C1_Init+0x78>)
 8003ac0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00210607; // 400 kHz with 8 MHz system clock
 8003ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b34 <MX_I2C1_Init+0x7c>)
 8003ac6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8003ac8:	4b18      	ldr	r3, [pc, #96]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ace:	4b17      	ldr	r3, [pc, #92]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ad4:	4b15      	ldr	r3, [pc, #84]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8003ada:	4b14      	ldr	r3, [pc, #80]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ae0:	4b12      	ldr	r3, [pc, #72]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ae6:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003aec:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003af2:	480e      	ldr	r0, [pc, #56]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003af4:	f003 fd7a 	bl	80075ec <HAL_I2C_Init>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_I2C1_Init+0x4a>
    {
        Error_Handler();
 8003afe:	f000 fa6f 	bl	8003fe0 <Error_Handler>
    }

    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b02:	2100      	movs	r1, #0
 8003b04:	4809      	ldr	r0, [pc, #36]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003b06:	f004 fafd 	bl	8008104 <HAL_I2CEx_ConfigAnalogFilter>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_I2C1_Init+0x5c>
    {
        Error_Handler();
 8003b10:	f000 fa66 	bl	8003fe0 <Error_Handler>
    }

    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003b14:	2100      	movs	r1, #0
 8003b16:	4805      	ldr	r0, [pc, #20]	@ (8003b2c <MX_I2C1_Init+0x74>)
 8003b18:	f004 fb3f 	bl	800819a <HAL_I2CEx_ConfigDigitalFilter>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_I2C1_Init+0x6e>
    {
        Error_Handler();
 8003b22:	f000 fa5d 	bl	8003fe0 <Error_Handler>
    }
}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	2000029c 	.word	0x2000029c
 8003b30:	40005400 	.word	0x40005400
 8003b34:	00210607 	.word	0x00210607

08003b38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
    hi2c2.Instance = I2C2;
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb0 <MX_I2C2_Init+0x78>)
 8003b40:	601a      	str	r2, [r3, #0]
    hi2c2.Init.Timing = 0x00210607; // 400 kHz with 8 MHz system clock
 8003b42:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b44:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb4 <MX_I2C2_Init+0x7c>)
 8003b46:	605a      	str	r2, [r3, #4]
    hi2c2.Init.OwnAddress1 = 0;
 8003b48:	4b18      	ldr	r3, [pc, #96]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b4e:	4b17      	ldr	r3, [pc, #92]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	60da      	str	r2, [r3, #12]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b54:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	611a      	str	r2, [r3, #16]
    hi2c2.Init.OwnAddress2 = 0;
 8003b5a:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b60:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b66:	4b11      	ldr	r3, [pc, #68]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b72:	480e      	ldr	r0, [pc, #56]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b74:	f003 fd3a 	bl	80075ec <HAL_I2C_Init>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_I2C2_Init+0x4a>
    {
        Error_Handler();
 8003b7e:	f000 fa2f 	bl	8003fe0 <Error_Handler>
    }

    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b82:	2100      	movs	r1, #0
 8003b84:	4809      	ldr	r0, [pc, #36]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b86:	f004 fabd 	bl	8008104 <HAL_I2CEx_ConfigAnalogFilter>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <MX_I2C2_Init+0x5c>
    {
        Error_Handler();
 8003b90:	f000 fa26 	bl	8003fe0 <Error_Handler>
    }

    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003b94:	2100      	movs	r1, #0
 8003b96:	4805      	ldr	r0, [pc, #20]	@ (8003bac <MX_I2C2_Init+0x74>)
 8003b98:	f004 faff 	bl	800819a <HAL_I2CEx_ConfigDigitalFilter>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <MX_I2C2_Init+0x6e>
    {
        Error_Handler();
 8003ba2:	f000 fa1d 	bl	8003fe0 <Error_Handler>
    }
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200002f0 	.word	0x200002f0
 8003bb0:	40005800 	.word	0x40005800
 8003bb4:	00210607 	.word	0x00210607

08003bb8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
    hi2c3.Instance = I2C3;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003c30 <MX_I2C3_Init+0x78>)
 8003bc0:	601a      	str	r2, [r3, #0]
    hi2c3.Init.Timing = 0x00210607; // 400 kHz with 8 MHz system clock
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c34 <MX_I2C3_Init+0x7c>)
 8003bc6:	605a      	str	r2, [r3, #4]
    hi2c3.Init.OwnAddress1 = 0;
 8003bc8:	4b18      	ldr	r3, [pc, #96]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bce:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	60da      	str	r2, [r3, #12]
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bd4:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	611a      	str	r2, [r3, #16]
    hi2c3.Init.OwnAddress2 = 0;
 8003bda:	4b14      	ldr	r3, [pc, #80]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	615a      	str	r2, [r3, #20]
    hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003be0:	4b12      	ldr	r3, [pc, #72]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	619a      	str	r2, [r3, #24]
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003be6:	4b11      	ldr	r3, [pc, #68]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	61da      	str	r2, [r3, #28]
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bec:	4b0f      	ldr	r3, [pc, #60]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003bf2:	480e      	ldr	r0, [pc, #56]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003bf4:	f003 fcfa 	bl	80075ec <HAL_I2C_Init>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_I2C3_Init+0x4a>
    {
        Error_Handler();
 8003bfe:	f000 f9ef 	bl	8003fe0 <Error_Handler>
    }

    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c02:	2100      	movs	r1, #0
 8003c04:	4809      	ldr	r0, [pc, #36]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003c06:	f004 fa7d 	bl	8008104 <HAL_I2CEx_ConfigAnalogFilter>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_I2C3_Init+0x5c>
    {
        Error_Handler();
 8003c10:	f000 f9e6 	bl	8003fe0 <Error_Handler>
    }

    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003c14:	2100      	movs	r1, #0
 8003c16:	4805      	ldr	r0, [pc, #20]	@ (8003c2c <MX_I2C3_Init+0x74>)
 8003c18:	f004 fabf 	bl	800819a <HAL_I2CEx_ConfigDigitalFilter>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_I2C3_Init+0x6e>
    {
        Error_Handler();
 8003c22:	f000 f9dd 	bl	8003fe0 <Error_Handler>
    }
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000344 	.word	0x20000344
 8003c30:	40005c00 	.word	0x40005c00
 8003c34:	00210607 	.word	0x00210607

08003c38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	603b      	str	r3, [r7, #0]

    hrtc.Instance = RTC;
 8003c50:	4b2a      	ldr	r3, [pc, #168]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003c52:	4a2b      	ldr	r2, [pc, #172]	@ (8003d00 <MX_RTC_Init+0xc8>)
 8003c54:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c56:	4b29      	ldr	r3, [pc, #164]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8003c5c:	4b27      	ldr	r3, [pc, #156]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003c5e:	227f      	movs	r2, #127	@ 0x7f
 8003c60:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8003c62:	4b26      	ldr	r3, [pc, #152]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003c64:	22ff      	movs	r2, #255	@ 0xff
 8003c66:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c68:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003c6e:	4b23      	ldr	r3, [pc, #140]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c74:	4b21      	ldr	r3, [pc, #132]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	619a      	str	r2, [r3, #24]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c7a:	4b20      	ldr	r3, [pc, #128]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c80:	481e      	ldr	r0, [pc, #120]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003c82:	f005 fe07 	bl	8009894 <HAL_RTC_Init>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_RTC_Init+0x58>
    {
        Error_Handler();
 8003c8c:	f000 f9a8 	bl	8003fe0 <Error_Handler>
    }

    sTime.Hours = 0x0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	71bb      	strb	r3, [r7, #6]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4814      	ldr	r0, [pc, #80]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003cac:	f005 fe7a 	bl	80099a4 <HAL_RTC_SetTime>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MX_RTC_Init+0x82>
    {
        Error_Handler();
 8003cb6:	f000 f993 	bl	8003fe0 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003cca:	463b      	mov	r3, r7
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4619      	mov	r1, r3
 8003cd0:	480a      	ldr	r0, [pc, #40]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003cd2:	f005 ff60 	bl	8009b96 <HAL_RTC_SetDate>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_RTC_Init+0xa8>
    {
        Error_Handler();
 8003cdc:	f000 f980 	bl	8003fe0 <Error_Handler>
    }

    if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4805      	ldr	r0, [pc, #20]	@ (8003cfc <MX_RTC_Init+0xc4>)
 8003ce6:	f006 f8fb 	bl	8009ee0 <HAL_RTCEx_SetTimeStamp>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_RTC_Init+0xbc>
    {
        Error_Handler();
 8003cf0:	f000 f976 	bl	8003fe0 <Error_Handler>
    }
}
 8003cf4:	bf00      	nop
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20000398 	.word	0x20000398
 8003d00:	40002800 	.word	0x40002800

08003d04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	@ 0x28
 8003d08:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d0a:	f107 031c 	add.w	r3, r7, #28
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8003d16:	463b      	mov	r3, r7
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
 8003d24:	615a      	str	r2, [r3, #20]
 8003d26:	619a      	str	r2, [r3, #24]

    htim4.Instance = TIM4;
 8003d28:	4b27      	ldr	r3, [pc, #156]	@ (8003dc8 <MX_TIM4_Init+0xc4>)
 8003d2a:	4a28      	ldr	r2, [pc, #160]	@ (8003dcc <MX_TIM4_Init+0xc8>)
 8003d2c:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 79;
 8003d2e:	4b26      	ldr	r3, [pc, #152]	@ (8003dc8 <MX_TIM4_Init+0xc4>)
 8003d30:	224f      	movs	r2, #79	@ 0x4f
 8003d32:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d34:	4b24      	ldr	r3, [pc, #144]	@ (8003dc8 <MX_TIM4_Init+0xc4>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 999;
 8003d3a:	4b23      	ldr	r3, [pc, #140]	@ (8003dc8 <MX_TIM4_Init+0xc4>)
 8003d3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003d40:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d42:	4b21      	ldr	r3, [pc, #132]	@ (8003dc8 <MX_TIM4_Init+0xc4>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d48:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc8 <MX_TIM4_Init+0xc4>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003d4e:	481e      	ldr	r0, [pc, #120]	@ (8003dc8 <MX_TIM4_Init+0xc4>)
 8003d50:	f006 f90e 	bl	8009f70 <HAL_TIM_PWM_Init>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_TIM4_Init+0x5a>
    {
        Error_Handler();
 8003d5a:	f000 f941 	bl	8003fe0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d66:	f107 031c 	add.w	r3, r7, #28
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4816      	ldr	r0, [pc, #88]	@ (8003dc8 <MX_TIM4_Init+0xc4>)
 8003d6e:	f006 ff13 	bl	800ab98 <HAL_TIMEx_MasterConfigSynchronization>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <MX_TIM4_Init+0x78>
    {
        Error_Handler();
 8003d78:	f000 f932 	bl	8003fe0 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d7c:	2360      	movs	r3, #96	@ 0x60
 8003d7e:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	2208      	movs	r2, #8
 8003d90:	4619      	mov	r1, r3
 8003d92:	480d      	ldr	r0, [pc, #52]	@ (8003dc8 <MX_TIM4_Init+0xc4>)
 8003d94:	f006 fa4a 	bl	800a22c <HAL_TIM_PWM_ConfigChannel>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_TIM4_Init+0x9e>
    {
        Error_Handler();
 8003d9e:	f000 f91f 	bl	8003fe0 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003da2:	463b      	mov	r3, r7
 8003da4:	220c      	movs	r2, #12
 8003da6:	4619      	mov	r1, r3
 8003da8:	4807      	ldr	r0, [pc, #28]	@ (8003dc8 <MX_TIM4_Init+0xc4>)
 8003daa:	f006 fa3f 	bl	800a22c <HAL_TIM_PWM_ConfigChannel>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_TIM4_Init+0xb4>
    {
        Error_Handler();
 8003db4:	f000 f914 	bl	8003fe0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */
    HAL_TIM_PWM_MspInit(&htim4);
 8003db8:	4803      	ldr	r0, [pc, #12]	@ (8003dc8 <MX_TIM4_Init+0xc4>)
 8003dba:	f000 fac7 	bl	800434c <HAL_TIM_PWM_MspInit>
    /* USER CODE END TIM4_Init 2 */
}
 8003dbe:	bf00      	nop
 8003dc0:	3728      	adds	r7, #40	@ 0x28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	200003bc 	.word	0x200003bc
 8003dcc:	40000800 	.word	0x40000800

08003dd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8003dd4:	4b14      	ldr	r3, [pc, #80]	@ (8003e28 <MX_USART1_UART_Init+0x58>)
 8003dd6:	4a15      	ldr	r2, [pc, #84]	@ (8003e2c <MX_USART1_UART_Init+0x5c>)
 8003dd8:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8003dda:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <MX_USART1_UART_Init+0x58>)
 8003ddc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003de0:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003de2:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <MX_USART1_UART_Init+0x58>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8003de8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e28 <MX_USART1_UART_Init+0x58>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8003dee:	4b0e      	ldr	r3, [pc, #56]	@ (8003e28 <MX_USART1_UART_Init+0x58>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <MX_USART1_UART_Init+0x58>)
 8003df6:	220c      	movs	r2, #12
 8003df8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <MX_USART1_UART_Init+0x58>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e00:	4b09      	ldr	r3, [pc, #36]	@ (8003e28 <MX_USART1_UART_Init+0x58>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e06:	4b08      	ldr	r3, [pc, #32]	@ (8003e28 <MX_USART1_UART_Init+0x58>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <MX_USART1_UART_Init+0x58>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e12:	4805      	ldr	r0, [pc, #20]	@ (8003e28 <MX_USART1_UART_Init+0x58>)
 8003e14:	f006 ff48 	bl	800aca8 <HAL_UART_Init>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_USART1_UART_Init+0x52>
    {
        Error_Handler();
 8003e1e:	f000 f8df 	bl	8003fe0 <Error_Handler>
    }
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000408 	.word	0x20000408
 8003e2c:	40013800 	.word	0x40013800

08003e30 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
    husart2.Instance = USART2;
 8003e34:	4b15      	ldr	r3, [pc, #84]	@ (8003e8c <MX_USART2_Init+0x5c>)
 8003e36:	4a16      	ldr	r2, [pc, #88]	@ (8003e90 <MX_USART2_Init+0x60>)
 8003e38:	601a      	str	r2, [r3, #0]
    husart2.Init.BaudRate = 115200;
 8003e3a:	4b14      	ldr	r3, [pc, #80]	@ (8003e8c <MX_USART2_Init+0x5c>)
 8003e3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e40:	605a      	str	r2, [r3, #4]
    husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8003e42:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <MX_USART2_Init+0x5c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	609a      	str	r2, [r3, #8]
    husart2.Init.StopBits = USART_STOPBITS_1;
 8003e48:	4b10      	ldr	r3, [pc, #64]	@ (8003e8c <MX_USART2_Init+0x5c>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60da      	str	r2, [r3, #12]
    husart2.Init.Parity = USART_PARITY_NONE;
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e8c <MX_USART2_Init+0x5c>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	611a      	str	r2, [r3, #16]
    husart2.Init.Mode = USART_MODE_TX_RX;
 8003e54:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <MX_USART2_Init+0x5c>)
 8003e56:	220c      	movs	r2, #12
 8003e58:	615a      	str	r2, [r3, #20]
    husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e8c <MX_USART2_Init+0x5c>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	619a      	str	r2, [r3, #24]
    husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8003e60:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <MX_USART2_Init+0x5c>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	61da      	str	r2, [r3, #28]
    husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8003e66:	4b09      	ldr	r3, [pc, #36]	@ (8003e8c <MX_USART2_Init+0x5c>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	621a      	str	r2, [r3, #32]
    if (HAL_USART_Init(&husart2) != HAL_OK)
 8003e6c:	4807      	ldr	r0, [pc, #28]	@ (8003e8c <MX_USART2_Init+0x5c>)
 8003e6e:	f007 fcc6 	bl	800b7fe <HAL_USART_Init>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <MX_USART2_Init+0x4c>
    {
        Error_Handler();
 8003e78:	f000 f8b2 	bl	8003fe0 <Error_Handler>
    }
    // Manually control the DE pin for RS485
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET); // Receive mode by default
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2102      	movs	r1, #2
 8003e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e84:	f003 fb80 	bl	8007588 <HAL_GPIO_WritePin>
}
 8003e88:	bf00      	nop
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000490 	.word	0x20000490
 8003e90:	40004400 	.word	0x40004400

08003e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	@ 0x28
 8003e98:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eae:	4a49      	ldr	r2, [pc, #292]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003eb0:	f043 0304 	orr.w	r3, r3, #4
 8003eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eb6:	4b47      	ldr	r3, [pc, #284]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ec2:	4b44      	ldr	r3, [pc, #272]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	4a43      	ldr	r2, [pc, #268]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ece:	4b41      	ldr	r3, [pc, #260]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eda:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	4a3d      	ldr	r2, [pc, #244]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef2:	4b38      	ldr	r3, [pc, #224]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef6:	4a37      	ldr	r2, [pc, #220]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003ef8:	f043 0302 	orr.w	r3, r3, #2
 8003efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003efe:	4b35      	ldr	r3, [pc, #212]	@ (8003fd4 <MX_GPIO_Init+0x140>)
 8003f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f12:	f003 fb39 	bl	8007588 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8003f16:	2200      	movs	r2, #0
 8003f18:	2102      	movs	r1, #2
 8003f1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f1e:	f003 fb33 	bl	8007588 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin (PC3) */
    GPIO_InitStruct.Pin = LED_Pin;
 8003f22:	2301      	movs	r3, #1
 8003f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f26:	2301      	movs	r3, #1
 8003f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003f32:	f107 0314 	add.w	r3, r7, #20
 8003f36:	4619      	mov	r1, r3
 8003f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f3c:	f003 f97a 	bl	8007234 <HAL_GPIO_Init>

    /*Configure GPIO pin : RS4852_DE_Pin */
    GPIO_InitStruct.Pin = RS4852_DE_Pin;
 8003f40:	2302      	movs	r3, #2
 8003f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f44:	2301      	movs	r3, #1
 8003f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS4852_DE_GPIO_Port, &GPIO_InitStruct);
 8003f50:	f107 0314 	add.w	r3, r7, #20
 8003f54:	4619      	mov	r1, r3
 8003f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f5a:	f003 f96b 	bl	8007234 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB4 for BOOT output (first BQ76920, with diode D2) */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f5e:	2310      	movs	r3, #16
 8003f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f62:	2301      	movs	r3, #1
 8003f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f6e:	f107 0314 	add.w	r3, r7, #20
 8003f72:	4619      	mov	r1, r3
 8003f74:	4818      	ldr	r0, [pc, #96]	@ (8003fd8 <MX_GPIO_Init+0x144>)
 8003f76:	f003 f95d 	bl	8007234 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC7 for BOOT2 output (second BQ76920, with diode D1) */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f7a:	2380      	movs	r3, #128	@ 0x80
 8003f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4812      	ldr	r0, [pc, #72]	@ (8003fdc <MX_GPIO_Init+0x148>)
 8003f92:	f003 f94f 	bl	8007234 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB5 for ALERT input (first BQ76920) */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f96:	2320      	movs	r3, #32
 8003f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP; // Use pull-up for open-drain alert signal
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa2:	f107 0314 	add.w	r3, r7, #20
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	480b      	ldr	r0, [pc, #44]	@ (8003fd8 <MX_GPIO_Init+0x144>)
 8003faa:	f003 f943 	bl	8007234 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA12 for ALERT2 input (second BQ76920) */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP; // Use pull-up for open-drain alert signal
 8003fb8:	2301      	movs	r3, #1
 8003fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbc:	f107 0314 	add.w	r3, r7, #20
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fc6:	f003 f935 	bl	8007234 <HAL_GPIO_Init>
}
 8003fca:	bf00      	nop
 8003fcc:	3728      	adds	r7, #40	@ 0x28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	48000400 	.word	0x48000400
 8003fdc:	48000800 	.word	0x48000800

08003fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003fe4:	b672      	cpsid	i
}
 8003fe6:	bf00      	nop
    __disable_irq();
    while (1)
    {
        // Debug LED: Blink rapidly to indicate error
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003fe8:	2101      	movs	r1, #1
 8003fea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fee:	f003 fae3 	bl	80075b8 <HAL_GPIO_TogglePin>
        HAL_Delay(BLINK_INTERVAL);
 8003ff2:	20c8      	movs	r0, #200	@ 0xc8
 8003ff4:	f001 f9f0 	bl	80053d8 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003ff8:	bf00      	nop
 8003ffa:	e7f5      	b.n	8003fe8 <Error_Handler+0x8>

08003ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004002:	4b0f      	ldr	r3, [pc, #60]	@ (8004040 <HAL_MspInit+0x44>)
 8004004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004006:	4a0e      	ldr	r2, [pc, #56]	@ (8004040 <HAL_MspInit+0x44>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6613      	str	r3, [r2, #96]	@ 0x60
 800400e:	4b0c      	ldr	r3, [pc, #48]	@ (8004040 <HAL_MspInit+0x44>)
 8004010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	607b      	str	r3, [r7, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4b09      	ldr	r3, [pc, #36]	@ (8004040 <HAL_MspInit+0x44>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401e:	4a08      	ldr	r2, [pc, #32]	@ (8004040 <HAL_MspInit+0x44>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004024:	6593      	str	r3, [r2, #88]	@ 0x58
 8004026:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <HAL_MspInit+0x44>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000

08004044 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b0ac      	sub	sp, #176	@ 0xb0
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	2288      	movs	r2, #136	@ 0x88
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f008 ff63 	bl	800cf30 <memset>
  if(hadc->Instance==ADC1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a27      	ldr	r2, [pc, #156]	@ (800410c <HAL_ADC_MspInit+0xc8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d146      	bne.n	8004102 <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004074:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004078:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800407a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800407e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8004082:	2303      	movs	r3, #3
 8004084:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800408a:	2308      	movs	r3, #8
 800408c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800408e:	2307      	movs	r3, #7
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004092:	2302      	movs	r3, #2
 8004094:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004096:	2302      	movs	r3, #2
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800409a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800409e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040a0:	f107 0314 	add.w	r3, r7, #20
 80040a4:	4618      	mov	r0, r3
 80040a6:	f004 ff39 	bl	8008f1c <HAL_RCCEx_PeriphCLKConfig>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80040b0:	f7ff ff96 	bl	8003fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80040b4:	4b16      	ldr	r3, [pc, #88]	@ (8004110 <HAL_ADC_MspInit+0xcc>)
 80040b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b8:	4a15      	ldr	r2, [pc, #84]	@ (8004110 <HAL_ADC_MspInit+0xcc>)
 80040ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040c0:	4b13      	ldr	r3, [pc, #76]	@ (8004110 <HAL_ADC_MspInit+0xcc>)
 80040c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040cc:	4b10      	ldr	r3, [pc, #64]	@ (8004110 <HAL_ADC_MspInit+0xcc>)
 80040ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d0:	4a0f      	ldr	r2, [pc, #60]	@ (8004110 <HAL_ADC_MspInit+0xcc>)
 80040d2:	f043 0302 	orr.w	r3, r3, #2
 80040d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004110 <HAL_ADC_MspInit+0xcc>)
 80040da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80040e4:	2302      	movs	r3, #2
 80040e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80040ea:	230b      	movs	r3, #11
 80040ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80040fa:	4619      	mov	r1, r3
 80040fc:	4805      	ldr	r0, [pc, #20]	@ (8004114 <HAL_ADC_MspInit+0xd0>)
 80040fe:	f003 f899 	bl	8007234 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004102:	bf00      	nop
 8004104:	37b0      	adds	r7, #176	@ 0xb0
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	50040000 	.word	0x50040000
 8004110:	40021000 	.word	0x40021000
 8004114:	48000400 	.word	0x48000400

08004118 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b0b0      	sub	sp, #192	@ 0xc0
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004120:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004134:	2288      	movs	r2, #136	@ 0x88
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	f008 fef9 	bl	800cf30 <memset>
  if(hi2c->Instance==I2C1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a63      	ldr	r2, [pc, #396]	@ (80042d0 <HAL_I2C_MspInit+0x1b8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d13b      	bne.n	80041c0 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004148:	2340      	movs	r3, #64	@ 0x40
 800414a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800414c:	2300      	movs	r3, #0
 800414e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004154:	4618      	mov	r0, r3
 8004156:	f004 fee1 	bl	8008f1c <HAL_RCCEx_PeriphCLKConfig>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004160:	f7ff ff3e 	bl	8003fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004164:	4b5b      	ldr	r3, [pc, #364]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 8004166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004168:	4a5a      	ldr	r2, [pc, #360]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 800416a:	f043 0302 	orr.w	r3, r3, #2
 800416e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004170:	4b58      	ldr	r3, [pc, #352]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 8004172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	623b      	str	r3, [r7, #32]
 800417a:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800417c:	23c0      	movs	r3, #192	@ 0xc0
 800417e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004182:	2312      	movs	r3, #18
 8004184:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	2300      	movs	r3, #0
 800418a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418e:	2303      	movs	r3, #3
 8004190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004194:	2304      	movs	r3, #4
 8004196:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800419a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800419e:	4619      	mov	r1, r3
 80041a0:	484d      	ldr	r0, [pc, #308]	@ (80042d8 <HAL_I2C_MspInit+0x1c0>)
 80041a2:	f003 f847 	bl	8007234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041a6:	4b4b      	ldr	r3, [pc, #300]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041aa:	4a4a      	ldr	r2, [pc, #296]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 80041ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b2:	4b48      	ldr	r3, [pc, #288]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80041be:	e082      	b.n	80042c6 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a45      	ldr	r2, [pc, #276]	@ (80042dc <HAL_I2C_MspInit+0x1c4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d13c      	bne.n	8004244 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80041ce:	2300      	movs	r3, #0
 80041d0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041d6:	4618      	mov	r0, r3
 80041d8:	f004 fea0 	bl	8008f1c <HAL_RCCEx_PeriphCLKConfig>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80041e2:	f7ff fefd 	bl	8003fe0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e6:	4b3b      	ldr	r3, [pc, #236]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 80041e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ea:	4a3a      	ldr	r2, [pc, #232]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041f2:	4b38      	ldr	r3, [pc, #224]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 80041f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80041fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004202:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004206:	2312      	movs	r3, #18
 8004208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420c:	2300      	movs	r3, #0
 800420e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004212:	2303      	movs	r3, #3
 8004214:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004218:	2304      	movs	r3, #4
 800421a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800421e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004222:	4619      	mov	r1, r3
 8004224:	482c      	ldr	r0, [pc, #176]	@ (80042d8 <HAL_I2C_MspInit+0x1c0>)
 8004226:	f003 f805 	bl	8007234 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800422a:	4b2a      	ldr	r3, [pc, #168]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 800422c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422e:	4a29      	ldr	r2, [pc, #164]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 8004230:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004234:	6593      	str	r3, [r2, #88]	@ 0x58
 8004236:	4b27      	ldr	r3, [pc, #156]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697b      	ldr	r3, [r7, #20]
}
 8004242:	e040      	b.n	80042c6 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a25      	ldr	r2, [pc, #148]	@ (80042e0 <HAL_I2C_MspInit+0x1c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d13b      	bne.n	80042c6 <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800424e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004252:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004254:	2300      	movs	r3, #0
 8004256:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800425c:	4618      	mov	r0, r3
 800425e:	f004 fe5d 	bl	8008f1c <HAL_RCCEx_PeriphCLKConfig>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8004268:	f7ff feba 	bl	8003fe0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800426c:	4b19      	ldr	r3, [pc, #100]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 800426e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004270:	4a18      	ldr	r2, [pc, #96]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004278:	4b16      	ldr	r3, [pc, #88]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 800427a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004284:	2303      	movs	r3, #3
 8004286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800428a:	2312      	movs	r3, #18
 800428c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004296:	2303      	movs	r3, #3
 8004298:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800429c:	2304      	movs	r3, #4
 800429e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042a2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80042a6:	4619      	mov	r1, r3
 80042a8:	480e      	ldr	r0, [pc, #56]	@ (80042e4 <HAL_I2C_MspInit+0x1cc>)
 80042aa:	f002 ffc3 	bl	8007234 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80042ae:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 80042b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b2:	4a08      	ldr	r2, [pc, #32]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 80042b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ba:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <HAL_I2C_MspInit+0x1bc>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
}
 80042c6:	bf00      	nop
 80042c8:	37c0      	adds	r7, #192	@ 0xc0
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40005400 	.word	0x40005400
 80042d4:	40021000 	.word	0x40021000
 80042d8:	48000400 	.word	0x48000400
 80042dc:	40005800 	.word	0x40005800
 80042e0:	40005c00 	.word	0x40005c00
 80042e4:	48000800 	.word	0x48000800

080042e8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b0a4      	sub	sp, #144	@ 0x90
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042f0:	f107 0308 	add.w	r3, r7, #8
 80042f4:	2288      	movs	r2, #136	@ 0x88
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f008 fe19 	bl	800cf30 <memset>
  if(hrtc->Instance==RTC)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a10      	ldr	r2, [pc, #64]	@ (8004344 <HAL_RTC_MspInit+0x5c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d118      	bne.n	800433a <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004308:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800430c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800430e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004312:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004316:	f107 0308 	add.w	r3, r7, #8
 800431a:	4618      	mov	r0, r3
 800431c:	f004 fdfe 	bl	8008f1c <HAL_RCCEx_PeriphCLKConfig>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004326:	f7ff fe5b 	bl	8003fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800432a:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <HAL_RTC_MspInit+0x60>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004330:	4a05      	ldr	r2, [pc, #20]	@ (8004348 <HAL_RTC_MspInit+0x60>)
 8004332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004336:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800433a:	bf00      	nop
 800433c:	3790      	adds	r7, #144	@ 0x90
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40002800 	.word	0x40002800
 8004348:	40021000 	.word	0x40021000

0800434c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a0a      	ldr	r2, [pc, #40]	@ (8004384 <HAL_TIM_PWM_MspInit+0x38>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d10b      	bne.n	8004376 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800435e:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <HAL_TIM_PWM_MspInit+0x3c>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004362:	4a09      	ldr	r2, [pc, #36]	@ (8004388 <HAL_TIM_PWM_MspInit+0x3c>)
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	6593      	str	r3, [r2, #88]	@ 0x58
 800436a:	4b07      	ldr	r3, [pc, #28]	@ (8004388 <HAL_TIM_PWM_MspInit+0x3c>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8004376:	bf00      	nop
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40000800 	.word	0x40000800
 8004388:	40021000 	.word	0x40021000

0800438c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b0ac      	sub	sp, #176	@ 0xb0
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004394:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043a4:	f107 0314 	add.w	r3, r7, #20
 80043a8:	2288      	movs	r2, #136	@ 0x88
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f008 fdbf 	bl	800cf30 <memset>
  if(huart->Instance==USART1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a22      	ldr	r2, [pc, #136]	@ (8004440 <HAL_UART_MspInit+0xb4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d13c      	bne.n	8004436 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80043bc:	2301      	movs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80043c0:	2300      	movs	r3, #0
 80043c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043c4:	f107 0314 	add.w	r3, r7, #20
 80043c8:	4618      	mov	r0, r3
 80043ca:	f004 fda7 	bl	8008f1c <HAL_RCCEx_PeriphCLKConfig>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80043d4:	f7ff fe04 	bl	8003fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <HAL_UART_MspInit+0xb8>)
 80043da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043dc:	4a19      	ldr	r2, [pc, #100]	@ (8004444 <HAL_UART_MspInit+0xb8>)
 80043de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80043e4:	4b17      	ldr	r3, [pc, #92]	@ (8004444 <HAL_UART_MspInit+0xb8>)
 80043e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f0:	4b14      	ldr	r3, [pc, #80]	@ (8004444 <HAL_UART_MspInit+0xb8>)
 80043f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f4:	4a13      	ldr	r2, [pc, #76]	@ (8004444 <HAL_UART_MspInit+0xb8>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043fc:	4b11      	ldr	r3, [pc, #68]	@ (8004444 <HAL_UART_MspInit+0xb8>)
 80043fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004408:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800440c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004410:	2302      	movs	r3, #2
 8004412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800441c:	2303      	movs	r3, #3
 800441e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004422:	2307      	movs	r3, #7
 8004424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004428:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800442c:	4619      	mov	r1, r3
 800442e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004432:	f002 feff 	bl	8007234 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004436:	bf00      	nop
 8004438:	37b0      	adds	r7, #176	@ 0xb0
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40013800 	.word	0x40013800
 8004444:	40021000 	.word	0x40021000

08004448 <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b0ac      	sub	sp, #176	@ 0xb0
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004450:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	2288      	movs	r2, #136	@ 0x88
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f008 fd61 	bl	800cf30 <memset>
  if(husart->Instance==USART2)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a21      	ldr	r2, [pc, #132]	@ (80044f8 <HAL_USART_MspInit+0xb0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d13b      	bne.n	80044f0 <HAL_USART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004478:	2302      	movs	r3, #2
 800447a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800447c:	2300      	movs	r3, #0
 800447e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004480:	f107 0314 	add.w	r3, r7, #20
 8004484:	4618      	mov	r0, r3
 8004486:	f004 fd49 	bl	8008f1c <HAL_RCCEx_PeriphCLKConfig>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8004490:	f7ff fda6 	bl	8003fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004494:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <HAL_USART_MspInit+0xb4>)
 8004496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004498:	4a18      	ldr	r2, [pc, #96]	@ (80044fc <HAL_USART_MspInit+0xb4>)
 800449a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800449e:	6593      	str	r3, [r2, #88]	@ 0x58
 80044a0:	4b16      	ldr	r3, [pc, #88]	@ (80044fc <HAL_USART_MspInit+0xb4>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ac:	4b13      	ldr	r3, [pc, #76]	@ (80044fc <HAL_USART_MspInit+0xb4>)
 80044ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b0:	4a12      	ldr	r2, [pc, #72]	@ (80044fc <HAL_USART_MspInit+0xb4>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044b8:	4b10      	ldr	r3, [pc, #64]	@ (80044fc <HAL_USART_MspInit+0xb4>)
 80044ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|GPIO_PIN_3|GPIO_PIN_4;
 80044c4:	231c      	movs	r3, #28
 80044c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ca:	2302      	movs	r3, #2
 80044cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d6:	2303      	movs	r3, #3
 80044d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044dc:	2307      	movs	r3, #7
 80044de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80044e6:	4619      	mov	r1, r3
 80044e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044ec:	f002 fea2 	bl	8007234 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80044f0:	bf00      	nop
 80044f2:	37b0      	adds	r7, #176	@ 0xb0
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40004400 	.word	0x40004400
 80044fc:	40021000 	.word	0x40021000

08004500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004504:	bf00      	nop
 8004506:	e7fd      	b.n	8004504 <NMI_Handler+0x4>

08004508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800450c:	bf00      	nop
 800450e:	e7fd      	b.n	800450c <HardFault_Handler+0x4>

08004510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <MemManage_Handler+0x4>

08004518 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <BusFault_Handler+0x4>

08004520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <UsageFault_Handler+0x4>

08004528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004536:	b480      	push	{r7}
 8004538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004548:	bf00      	nop
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004556:	f000 ff1f 	bl	8005398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}

0800455e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0
  return 1;
 8004562:	2301      	movs	r3, #1
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <_kill>:

int _kill(int pid, int sig)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004578:	f008 fd52 	bl	800d020 <__errno>
 800457c:	4603      	mov	r3, r0
 800457e:	2216      	movs	r2, #22
 8004580:	601a      	str	r2, [r3, #0]
  return -1;
 8004582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <_exit>:

void _exit (int status)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004596:	f04f 31ff 	mov.w	r1, #4294967295
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff ffe7 	bl	800456e <_kill>
  while (1) {}    /* Make sure we hang here */
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <_exit+0x12>

080045a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e00a      	b.n	80045cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045b6:	f3af 8000 	nop.w
 80045ba:	4601      	mov	r1, r0
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	60ba      	str	r2, [r7, #8]
 80045c2:	b2ca      	uxtb	r2, r1
 80045c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	3301      	adds	r3, #1
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	dbf0      	blt.n	80045b6 <_read+0x12>
  }

  return len;
 80045d4:	687b      	ldr	r3, [r7, #4]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b086      	sub	sp, #24
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e009      	b.n	8004604 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	60ba      	str	r2, [r7, #8]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	3301      	adds	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	dbf1      	blt.n	80045f0 <_write+0x12>
  }
  return len;
 800460c:	687b      	ldr	r3, [r7, #4]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <_close>:

int _close(int file)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800461e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800463e:	605a      	str	r2, [r3, #4]
  return 0;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <_isatty>:

int _isatty(int file)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004656:	2301      	movs	r3, #1
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004688:	4a14      	ldr	r2, [pc, #80]	@ (80046dc <_sbrk+0x5c>)
 800468a:	4b15      	ldr	r3, [pc, #84]	@ (80046e0 <_sbrk+0x60>)
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004694:	4b13      	ldr	r3, [pc, #76]	@ (80046e4 <_sbrk+0x64>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800469c:	4b11      	ldr	r3, [pc, #68]	@ (80046e4 <_sbrk+0x64>)
 800469e:	4a12      	ldr	r2, [pc, #72]	@ (80046e8 <_sbrk+0x68>)
 80046a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046a2:	4b10      	ldr	r3, [pc, #64]	@ (80046e4 <_sbrk+0x64>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d207      	bcs.n	80046c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046b0:	f008 fcb6 	bl	800d020 <__errno>
 80046b4:	4603      	mov	r3, r0
 80046b6:	220c      	movs	r2, #12
 80046b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046ba:	f04f 33ff 	mov.w	r3, #4294967295
 80046be:	e009      	b.n	80046d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046c0:	4b08      	ldr	r3, [pc, #32]	@ (80046e4 <_sbrk+0x64>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046c6:	4b07      	ldr	r3, [pc, #28]	@ (80046e4 <_sbrk+0x64>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	4a05      	ldr	r2, [pc, #20]	@ (80046e4 <_sbrk+0x64>)
 80046d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046d2:	68fb      	ldr	r3, [r7, #12]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20018000 	.word	0x20018000
 80046e0:	00000400 	.word	0x00000400
 80046e4:	20000644 	.word	0x20000644
 80046e8:	20000838 	.word	0x20000838

080046ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80046f0:	4b06      	ldr	r3, [pc, #24]	@ (800470c <SystemInit+0x20>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f6:	4a05      	ldr	r2, [pc, #20]	@ (800470c <SystemInit+0x20>)
 80046f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	e000ed00 	.word	0xe000ed00

08004710 <CalculateCRC16>:
#include "crc16.h"
uint16_t CalculateCRC16(const uint8_t *data, uint32_t length) {
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 800471a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800471e:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < length; i++) {
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	e026      	b.n	8004774 <CalculateCRC16+0x64>
        crc ^= data[i];
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4413      	add	r3, r2
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	8afb      	ldrh	r3, [r7, #22]
 8004732:	4053      	eors	r3, r2
 8004734:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) {
 8004736:	2300      	movs	r3, #0
 8004738:	73fb      	strb	r3, [r7, #15]
 800473a:	e015      	b.n	8004768 <CalculateCRC16+0x58>
            if (crc & 0x0001) {
 800473c:	8afb      	ldrh	r3, [r7, #22]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <CalculateCRC16+0x4c>
                crc >>= 1;
 8004746:	8afb      	ldrh	r3, [r7, #22]
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 800474c:	8afb      	ldrh	r3, [r7, #22]
 800474e:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8004752:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8004756:	43db      	mvns	r3, r3
 8004758:	82fb      	strh	r3, [r7, #22]
 800475a:	e002      	b.n	8004762 <CalculateCRC16+0x52>
            } else {
                crc >>= 1;
 800475c:	8afb      	ldrh	r3, [r7, #22]
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) {
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	3301      	adds	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	2b07      	cmp	r3, #7
 800476c:	d9e6      	bls.n	800473c <CalculateCRC16+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	3301      	adds	r3, #1
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d3d4      	bcc.n	8004726 <CalculateCRC16+0x16>
            }
        }
    }
    return crc;
 800477c:	8afb      	ldrh	r3, [r7, #22]
}
 800477e:	4618      	mov	r0, r3
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <KalmanFilter_Init>:
  * @param  process_noise: How wobbly our battery’s behavior might be (Q)
  * @param  measurement_noise: How shaky our sensor readings are (R)
  * @retval None (just sets things up)
  */
void KalmanFilter_Init(KalmanFilter *kf, float initial_state, float initial_variance, float process_noise, float measurement_noise)
{
 800478a:	b480      	push	{r7}
 800478c:	b087      	sub	sp, #28
 800478e:	af00      	add	r7, sp, #0
 8004790:	6178      	str	r0, [r7, #20]
 8004792:	ed87 0a04 	vstr	s0, [r7, #16]
 8004796:	edc7 0a03 	vstr	s1, [r7, #12]
 800479a:	ed87 1a02 	vstr	s2, [r7, #8]
 800479e:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->state = initial_state;              // Our first guess (e.g., 50% charge)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	601a      	str	r2, [r3, #0]
    kf->variance = initial_variance;        // How much we trust that guess (small = more trust)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]
    kf->process_noise = process_noise;      // How much the battery might surprise us
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]
    kf->measurement_noise = measurement_noise; // How much our sensors wiggle
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	60da      	str	r2, [r3, #12]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <KalmanFilter_Update>:
  * @param  kf: The filter’s toolbox with our current guess
  * @param  measurement: A new, wobbly reading from the battery sensor
  * @retval The updated, smoother guess (e.g., new SOC %)
  */
float KalmanFilter_Update(KalmanFilter *kf, float measurement)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	ed87 0a00 	vstr	s0, [r7]
    // Step 1: Guess Ahead (Prediction)
    // Add some wiggle room because the battery might change a bit on its own
    kf->variance += kf->process_noise;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	edd3 7a02 	vldr	s15, [r3, #8]
 80047de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	edc3 7a01 	vstr	s15, [r3, #4]

    // Step 2: Fix the Guess (Update)
    // Figure out how much to trust the new measurement vs. our old guess
    float kalman_gain = kf->variance / (kf->variance + kf->measurement_noise);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80047fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004802:	edc7 7a03 	vstr	s15, [r7, #12]
    // Tweak our guess using the new reading, but only a little if it’s shaky
    kf->state += kalman_gain * (measurement - kf->state);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	ed93 7a00 	vldr	s14, [r3]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	edd3 7a00 	vldr	s15, [r3]
 8004812:	edd7 6a00 	vldr	s13, [r7]
 8004816:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800481a:	edd7 7a03 	vldr	s15, [r7, #12]
 800481e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	edc3 7a00 	vstr	s15, [r3]
    // We’re more sure now, so shrink the wiggle room
    kf->variance *= (1.0f - kalman_gain);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004836:	edd7 7a03 	vldr	s15, [r7, #12]
 800483a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	edc3 7a01 	vstr	s15, [r3, #4]

    // Give back the new, smoother guess
    return kf->state;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	ee07 3a90 	vmov	s15, r3
}
 8004850:	eeb0 0a67 	vmov.f32	s0, s15
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <PID_Init>:
/**
  * @brief  Initializes the PID controller
  * @retval None
  */
void PID_Init(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
    integral = 0.0;
 8004864:	4b07      	ldr	r3, [pc, #28]	@ (8004884 <PID_Init+0x24>)
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
    previous_error = 0.0;
 800486c:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <PID_Init+0x28>)
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
    last_duty_cycle = 0;
 8004874:	4b05      	ldr	r3, [pc, #20]	@ (800488c <PID_Init+0x2c>)
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000648 	.word	0x20000648
 8004888:	2000064c 	.word	0x2000064c
 800488c:	20000650 	.word	0x20000650

08004890 <PID_Control>:
  * @brief  Controls the heaters using PID and PWM
  * @param  temp: Current temperature in degrees Celsius
  * @retval None
  */
void PID_Control(int16_t temp)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b096      	sub	sp, #88	@ 0x58
 8004894:	af02      	add	r7, sp, #8
 8004896:	4603      	mov	r3, r0
 8004898:	80fb      	strh	r3, [r7, #6]
    if (temp >= TEMP_UPPER_LIMIT) {
 800489a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800489e:	2b3b      	cmp	r3, #59	@ 0x3b
 80048a0:	dd0c      	ble.n	80048bc <PID_Control+0x2c>
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); // HEATER2
 80048a2:	4b4a      	ldr	r3, [pc, #296]	@ (80049cc <PID_Control+0x13c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2200      	movs	r2, #0
 80048a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); // HEATER1
 80048aa:	4b48      	ldr	r3, [pc, #288]	@ (80049cc <PID_Control+0x13c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	641a      	str	r2, [r3, #64]	@ 0x40
        integral = 0.0;
 80048b2:	4b47      	ldr	r3, [pc, #284]	@ (80049d0 <PID_Control+0x140>)
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
        return;
 80048ba:	e084      	b.n	80049c6 <PID_Control+0x136>
    }

    float error = TARGET_TEMP - temp;
 80048bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048c0:	f1c3 0319 	rsb	r3, r3, #25
 80048c4:	ee07 3a90 	vmov	s15, r3
 80048c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048cc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    integral += error * DT;
 80048d0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80048d4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80049d4 <PID_Control+0x144>
 80048d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048dc:	4b3c      	ldr	r3, [pc, #240]	@ (80049d0 <PID_Control+0x140>)
 80048de:	edd3 7a00 	vldr	s15, [r3]
 80048e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048e6:	4b3a      	ldr	r3, [pc, #232]	@ (80049d0 <PID_Control+0x140>)
 80048e8:	edc3 7a00 	vstr	s15, [r3]
    float derivative = (error - previous_error) / DT;
 80048ec:	4b3a      	ldr	r3, [pc, #232]	@ (80049d8 <PID_Control+0x148>)
 80048ee:	edd3 7a00 	vldr	s15, [r3]
 80048f2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80048f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048fa:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80049d4 <PID_Control+0x144>
 80048fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004902:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float output = KP * error + KI * integral + KD * derivative;
 8004906:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800490a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800490e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004912:	4b2f      	ldr	r3, [pc, #188]	@ (80049d0 <PID_Control+0x140>)
 8004914:	edd3 7a00 	vldr	s15, [r3]
 8004918:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80049d4 <PID_Control+0x144>
 800491c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004924:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800492c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    if (output < 0) output = 0;
 8004930:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004934:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	d502      	bpl.n	8004944 <PID_Control+0xb4>
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (output > 100) output = 100;
 8004944:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004948:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80049dc <PID_Control+0x14c>
 800494c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004954:	dd01      	ble.n	800495a <PID_Control+0xca>
 8004956:	4b22      	ldr	r3, [pc, #136]	@ (80049e0 <PID_Control+0x150>)
 8004958:	64fb      	str	r3, [r7, #76]	@ 0x4c

    uint32_t duty_cycle = (uint32_t)(output * 10); // 0-1000 range for PWM
 800495a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800495e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800496a:	ee17 3a90 	vmov	r3, s15
 800496e:	643b      	str	r3, [r7, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle); // HEATER2
 8004970:	4b16      	ldr	r3, [pc, #88]	@ (80049cc <PID_Control+0x13c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004976:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, duty_cycle); // HEATER1
 8004978:	4b14      	ldr	r3, [pc, #80]	@ (80049cc <PID_Control+0x13c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800497e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (labs((int32_t)duty_cycle - (int32_t)last_duty_cycle) > 50) {
 8004980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004982:	4a18      	ldr	r2, [pc, #96]	@ (80049e4 <PID_Control+0x154>)
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfb8      	it	lt
 800498c:	425b      	neglt	r3, r3
 800498e:	2b32      	cmp	r3, #50	@ 0x32
 8004990:	dd16      	ble.n	80049c0 <PID_Control+0x130>
        char message[56];
        snprintf(message, sizeof(message), "Heater duty cycle: %lu%%, Temp: %dC", duty_cycle / 10, temp);
 8004992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004994:	4a14      	ldr	r2, [pc, #80]	@ (80049e8 <PID_Control+0x158>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	08da      	lsrs	r2, r3, #3
 800499c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049a0:	f107 0008 	add.w	r0, r7, #8
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4613      	mov	r3, r2
 80049a8:	4a10      	ldr	r2, [pc, #64]	@ (80049ec <PID_Control+0x15c>)
 80049aa:	2138      	movs	r1, #56	@ 0x38
 80049ac:	f008 f9e8 	bl	800cd80 <sniprintf>
        Log_Error(message);
 80049b0:	f107 0308 	add.w	r3, r7, #8
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fd f815 	bl	80019e4 <Log_Error>
        last_duty_cycle = duty_cycle;
 80049ba:	4a0a      	ldr	r2, [pc, #40]	@ (80049e4 <PID_Control+0x154>)
 80049bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049be:	6013      	str	r3, [r2, #0]
    }

    previous_error = error;
 80049c0:	4a05      	ldr	r2, [pc, #20]	@ (80049d8 <PID_Control+0x148>)
 80049c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c4:	6013      	str	r3, [r2, #0]
}
 80049c6:	3750      	adds	r7, #80	@ 0x50
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	200003bc 	.word	0x200003bc
 80049d0:	20000648 	.word	0x20000648
 80049d4:	3dcccccd 	.word	0x3dcccccd
 80049d8:	2000064c 	.word	0x2000064c
 80049dc:	42c80000 	.word	0x42c80000
 80049e0:	42c80000 	.word	0x42c80000
 80049e4:	20000650 	.word	0x20000650
 80049e8:	cccccccd 	.word	0xcccccccd
 80049ec:	080116cc 	.word	0x080116cc

080049f0 <SSP_CalculateCRC>:
  * @param  data: Pointer to the data
  * @param  len: Length of the data
  * @retval CRC-16 value
  */
static uint16_t SSP_CalculateCRC(uint8_t *data, uint16_t len)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 80049fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a00:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++) {
 8004a02:	2300      	movs	r3, #0
 8004a04:	81bb      	strh	r3, [r7, #12]
 8004a06:	e026      	b.n	8004a56 <SSP_CalculateCRC+0x66>
        crc ^= data[i];
 8004a08:	89bb      	ldrh	r3, [r7, #12]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	89fb      	ldrh	r3, [r7, #14]
 8004a14:	4053      	eors	r3, r2
 8004a16:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8004a18:	2300      	movs	r3, #0
 8004a1a:	72fb      	strb	r3, [r7, #11]
 8004a1c:	e015      	b.n	8004a4a <SSP_CalculateCRC+0x5a>
            if (crc & 0x0001) {
 8004a1e:	89fb      	ldrh	r3, [r7, #14]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <SSP_CalculateCRC+0x4e>
                crc >>= 1;
 8004a28:	89fb      	ldrh	r3, [r7, #14]
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001; // CRC-16-CCITT polynomial (bit-reversed)
 8004a2e:	89fb      	ldrh	r3, [r7, #14]
 8004a30:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8004a34:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	81fb      	strh	r3, [r7, #14]
 8004a3c:	e002      	b.n	8004a44 <SSP_CalculateCRC+0x54>
            } else {
                crc >>= 1;
 8004a3e:	89fb      	ldrh	r3, [r7, #14]
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8004a44:	7afb      	ldrb	r3, [r7, #11]
 8004a46:	3301      	adds	r3, #1
 8004a48:	72fb      	strb	r3, [r7, #11]
 8004a4a:	7afb      	ldrb	r3, [r7, #11]
 8004a4c:	2b07      	cmp	r3, #7
 8004a4e:	d9e6      	bls.n	8004a1e <SSP_CalculateCRC+0x2e>
    for (uint16_t i = 0; i < len; i++) {
 8004a50:	89bb      	ldrh	r3, [r7, #12]
 8004a52:	3301      	adds	r3, #1
 8004a54:	81bb      	strh	r3, [r7, #12]
 8004a56:	89ba      	ldrh	r2, [r7, #12]
 8004a58:	887b      	ldrh	r3, [r7, #2]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d3d4      	bcc.n	8004a08 <SSP_CalculateCRC+0x18>
            }
        }
    }
    return crc;
 8004a5e:	89fb      	ldrh	r3, [r7, #14]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <SSP_PackTelemetry>:
  * @param  telemetry: Pointer to the telemetry data
  * @param  frame: Pointer to the SSP frame to fill
  * @retval None
  */
void SSP_PackTelemetry(SSP_TelemetryTypeDef *telemetry, SSP_FrameTypeDef *frame)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
    frame->dest = SSP_ADDR_OBC;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	701a      	strb	r2, [r3, #0]
    frame->src = SSP_ADDR_EPS;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	705a      	strb	r2, [r3, #1]
    frame->cmd_id = SSP_CMD_GOSTM | SSP_FRAME_TYPE_REPLY; // Reply frame
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2265      	movs	r2, #101	@ 0x65
 8004a86:	709a      	strb	r2, [r3, #2]
    frame->data_len = 43; // Total size of telemetry data
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	222b      	movs	r2, #43	@ 0x2b
 8004a8c:	70da      	strb	r2, [r3, #3]

    uint8_t *data = frame->data;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	3304      	adds	r3, #4
 8004a92:	60bb      	str	r3, [r7, #8]
    uint8_t index = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	73fb      	strb	r3, [r7, #15]

    data[index++] = telemetry->mode;
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	73fa      	strb	r2, [r7, #15]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	7812      	ldrb	r2, [r2, #0]
 8004aa8:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_enabled;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	73fa      	strb	r2, [r7, #15]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	7852      	ldrb	r2, [r2, #1]
 8004aba:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->discharge_enabled;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	73fa      	strb	r2, [r7, #15]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	7892      	ldrb	r2, [r2, #2]
 8004acc:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_immediately;
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	73fa      	strb	r2, [r7, #15]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4413      	add	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	78d2      	ldrb	r2, [r2, #3]
 8004ade:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->bms_online;
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	73fa      	strb	r2, [r7, #15]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4413      	add	r3, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	7912      	ldrb	r2, [r2, #4]
 8004af0:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 24) & 0xFF;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0e1a      	lsrs	r2, r3, #24
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	1c59      	adds	r1, r3, #1
 8004afc:	73f9      	strb	r1, [r7, #15]
 8004afe:	4619      	mov	r1, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	440b      	add	r3, r1
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 16) & 0xFF;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	0c1a      	lsrs	r2, r3, #16
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	1c59      	adds	r1, r3, #1
 8004b12:	73f9      	strb	r1, [r7, #15]
 8004b14:	4619      	mov	r1, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	440b      	add	r3, r1
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 8) & 0xFF;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	0a1a      	lsrs	r2, r3, #8
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	1c59      	adds	r1, r3, #1
 8004b28:	73f9      	strb	r1, [r7, #15]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	440b      	add	r3, r1
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->error_flags & 0xFF;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	73f9      	strb	r1, [r7, #15]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	440b      	add	r3, r1
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_voltage_1 >> 8) & 0xFF;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	899b      	ldrh	r3, [r3, #12]
 8004b4c:	0a1b      	lsrs	r3, r3, #8
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	1c59      	adds	r1, r3, #1
 8004b54:	73f9      	strb	r1, [r7, #15]
 8004b56:	4619      	mov	r1, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	440b      	add	r3, r1
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_voltage_1 & 0xFF;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	899a      	ldrh	r2, [r3, #12]
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	1c59      	adds	r1, r3, #1
 8004b68:	73f9      	strb	r1, [r7, #15]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	440b      	add	r3, r1
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_voltage_2 >> 8) & 0xFF;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	89db      	ldrh	r3, [r3, #14]
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	1c59      	adds	r1, r3, #1
 8004b80:	73f9      	strb	r1, [r7, #15]
 8004b82:	4619      	mov	r1, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	440b      	add	r3, r1
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_voltage_2 & 0xFF;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	89da      	ldrh	r2, [r3, #14]
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	1c59      	adds	r1, r3, #1
 8004b94:	73f9      	strb	r1, [r7, #15]
 8004b96:	4619      	mov	r1, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	440b      	add	r3, r1
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_current_1 >> 8) & 0xFF;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004ba6:	121b      	asrs	r3, r3, #8
 8004ba8:	b21a      	sxth	r2, r3
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	1c59      	adds	r1, r3, #1
 8004bae:	73f9      	strb	r1, [r7, #15]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	440b      	add	r3, r1
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_current_1 & 0xFF;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	1c59      	adds	r1, r3, #1
 8004bc4:	73f9      	strb	r1, [r7, #15]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	440b      	add	r3, r1
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_current_2 >> 8) & 0xFF;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004bd6:	121b      	asrs	r3, r3, #8
 8004bd8:	b21a      	sxth	r2, r3
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	1c59      	adds	r1, r3, #1
 8004bde:	73f9      	strb	r1, [r7, #15]
 8004be0:	4619      	mov	r1, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	440b      	add	r3, r1
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_current_2 & 0xFF;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	1c59      	adds	r1, r3, #1
 8004bf4:	73f9      	strb	r1, [r7, #15]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	440b      	add	r3, r1
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->soc;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	73fa      	strb	r2, [r7, #15]
 8004c06:	461a      	mov	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	7d12      	ldrb	r2, [r2, #20]
 8004c10:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->soh;
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	73fa      	strb	r2, [r7, #15]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	7d52      	ldrb	r2, [r2, #21]
 8004c22:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->temp_1 >> 8) & 0xFF;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004c2a:	121b      	asrs	r3, r3, #8
 8004c2c:	b21a      	sxth	r2, r3
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	1c59      	adds	r1, r3, #1
 8004c32:	73f9      	strb	r1, [r7, #15]
 8004c34:	4619      	mov	r1, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	440b      	add	r3, r1
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->temp_1 & 0xFF;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	1c59      	adds	r1, r3, #1
 8004c48:	73f9      	strb	r1, [r7, #15]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	440b      	add	r3, r1
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->temp_2 >> 8) & 0xFF;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004c5a:	121b      	asrs	r3, r3, #8
 8004c5c:	b21a      	sxth	r2, r3
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	1c59      	adds	r1, r3, #1
 8004c62:	73f9      	strb	r1, [r7, #15]
 8004c64:	4619      	mov	r1, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	440b      	add	r3, r1
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->temp_2 & 0xFF;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	1c59      	adds	r1, r3, #1
 8004c78:	73f9      	strb	r1, [r7, #15]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	440b      	add	r3, r1
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pcb_temp >> 8) & 0xFF;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004c8a:	121b      	asrs	r3, r3, #8
 8004c8c:	b21a      	sxth	r2, r3
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	1c59      	adds	r1, r3, #1
 8004c92:	73f9      	strb	r1, [r7, #15]
 8004c94:	4619      	mov	r1, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	440b      	add	r3, r1
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pcb_temp & 0xFF;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	73f9      	strb	r1, [r7, #15]
 8004caa:	4619      	mov	r1, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	440b      	add	r3, r1
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	73bb      	strb	r3, [r7, #14]
 8004cb8:	e020      	b.n	8004cfc <SSP_PackTelemetry+0x290>
        data[index++] = (telemetry->group_voltages[i] >> 8) & 0xFF;
 8004cba:	7bbb      	ldrb	r3, [r7, #14]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	4413      	add	r3, r2
 8004cc4:	889b      	ldrh	r3, [r3, #4]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	1c59      	adds	r1, r3, #1
 8004cce:	73f9      	strb	r1, [r7, #15]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	440b      	add	r3, r1
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
        data[index++] = telemetry->group_voltages[i] & 0xFF;
 8004cda:	7bbb      	ldrb	r3, [r7, #14]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	4413      	add	r3, r2
 8004ce4:	889a      	ldrh	r2, [r3, #4]
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	1c59      	adds	r1, r3, #1
 8004cea:	73f9      	strb	r1, [r7, #15]
 8004cec:	4619      	mov	r1, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	440b      	add	r3, r1
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8004cf6:	7bbb      	ldrb	r3, [r7, #14]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	73bb      	strb	r3, [r7, #14]
 8004cfc:	7bbb      	ldrb	r3, [r7, #14]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d9db      	bls.n	8004cba <SSP_PackTelemetry+0x24e>
    }
    data[index++] = telemetry->balancing_active;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	73fa      	strb	r2, [r7, #15]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8004d14:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->balancing_mask_1;
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	73fa      	strb	r2, [r7, #15]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8004d28:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->balancing_mask_2;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	73fa      	strb	r2, [r7, #15]
 8004d30:	461a      	mov	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8004d3c:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 24) & 0xFF;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d42:	0e1a      	lsrs	r2, r3, #24
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	1c59      	adds	r1, r3, #1
 8004d48:	73f9      	strb	r1, [r7, #15]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	440b      	add	r3, r1
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 16) & 0xFF;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d58:	0c1a      	lsrs	r2, r3, #16
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	1c59      	adds	r1, r3, #1
 8004d5e:	73f9      	strb	r1, [r7, #15]
 8004d60:	4619      	mov	r1, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	440b      	add	r3, r1
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 8) & 0xFF;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6e:	0a1a      	lsrs	r2, r3, #8
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	1c59      	adds	r1, r3, #1
 8004d74:	73f9      	strb	r1, [r7, #15]
 8004d76:	4619      	mov	r1, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	440b      	add	r3, r1
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_cycle_count & 0xFF;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	73f9      	strb	r1, [r7, #15]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	440b      	add	r3, r1
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 24) & 0xFF;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	0e1a      	lsrs	r2, r3, #24
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	1c59      	adds	r1, r3, #1
 8004d9e:	73f9      	strb	r1, [r7, #15]
 8004da0:	4619      	mov	r1, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	440b      	add	r3, r1
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 16) & 0xFF;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	0c1a      	lsrs	r2, r3, #16
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	1c59      	adds	r1, r3, #1
 8004db4:	73f9      	strb	r1, [r7, #15]
 8004db6:	4619      	mov	r1, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	440b      	add	r3, r1
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 8) & 0xFF;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	0a1a      	lsrs	r2, r3, #8
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	73f9      	strb	r1, [r7, #15]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	440b      	add	r3, r1
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_charge_time & 0xFF;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	1c59      	adds	r1, r3, #1
 8004dde:	73f9      	strb	r1, [r7, #15]
 8004de0:	4619      	mov	r1, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	440b      	add	r3, r1
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 24) & 0xFF;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dee:	0e1a      	lsrs	r2, r3, #24
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	1c59      	adds	r1, r3, #1
 8004df4:	73f9      	strb	r1, [r7, #15]
 8004df6:	4619      	mov	r1, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	440b      	add	r3, r1
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 16) & 0xFF;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	0c1a      	lsrs	r2, r3, #16
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	1c59      	adds	r1, r3, #1
 8004e0a:	73f9      	strb	r1, [r7, #15]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	440b      	add	r3, r1
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 8) & 0xFF;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1a:	0a1a      	lsrs	r2, r3, #8
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	1c59      	adds	r1, r3, #1
 8004e20:	73f9      	strb	r1, [r7, #15]
 8004e22:	4619      	mov	r1, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	440b      	add	r3, r1
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_discharge_time & 0xFF;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	1c59      	adds	r1, r3, #1
 8004e34:	73f9      	strb	r1, [r7, #15]
 8004e36:	4619      	mov	r1, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	440b      	add	r3, r1
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 24) & 0xFF;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e44:	0e1a      	lsrs	r2, r3, #24
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	1c59      	adds	r1, r3, #1
 8004e4a:	73f9      	strb	r1, [r7, #15]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	440b      	add	r3, r1
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 16) & 0xFF;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5a:	0c1a      	lsrs	r2, r3, #16
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	1c59      	adds	r1, r3, #1
 8004e60:	73f9      	strb	r1, [r7, #15]
 8004e62:	4619      	mov	r1, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	440b      	add	r3, r1
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 8) & 0xFF;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e70:	0a1a      	lsrs	r2, r3, #8
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	1c59      	adds	r1, r3, #1
 8004e76:	73f9      	strb	r1, [r7, #15]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	440b      	add	r3, r1
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_operating_time & 0xFF;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	1c59      	adds	r1, r3, #1
 8004e8a:	73f9      	strb	r1, [r7, #15]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	440b      	add	r3, r1
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
}
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <SSP_ConstructFrame>:
  * @param  buffer: Buffer to store the constructed frame
  * @param  frame_len: Pointer to store the frame length
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef SSP_ConstructFrame(SSP_FrameTypeDef *frame, uint8_t *buffer, uint16_t *frame_len)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
    uint8_t index = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	75fb      	strb	r3, [r7, #23]

    buffer[index++] = SSP_FLAG; // Start flag
 8004eb2:	7dfb      	ldrb	r3, [r7, #23]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	75fa      	strb	r2, [r7, #23]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	227e      	movs	r2, #126	@ 0x7e
 8004ec0:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->dest;
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	75fa      	strb	r2, [r7, #23]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4413      	add	r3, r2
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->src;
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	75fa      	strb	r2, [r7, #23]
 8004eda:	461a      	mov	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4413      	add	r3, r2
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	7852      	ldrb	r2, [r2, #1]
 8004ee4:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->cmd_id;
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	75fa      	strb	r2, [r7, #23]
 8004eec:	461a      	mov	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	7892      	ldrb	r2, [r2, #2]
 8004ef6:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->data_len;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	75fa      	strb	r2, [r7, #23]
 8004efe:	461a      	mov	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4413      	add	r3, r2
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	78d2      	ldrb	r2, [r2, #3]
 8004f08:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < frame->data_len; i++) {
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75bb      	strb	r3, [r7, #22]
 8004f0e:	e00d      	b.n	8004f2c <SSP_ConstructFrame+0x8a>
        buffer[index++] = frame->data[i];
 8004f10:	7dba      	ldrb	r2, [r7, #22]
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
 8004f14:	1c59      	adds	r1, r3, #1
 8004f16:	75f9      	strb	r1, [r7, #23]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	440b      	add	r3, r1
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	440a      	add	r2, r1
 8004f22:	7912      	ldrb	r2, [r2, #4]
 8004f24:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame->data_len; i++) {
 8004f26:	7dbb      	ldrb	r3, [r7, #22]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	75bb      	strb	r3, [r7, #22]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	78db      	ldrb	r3, [r3, #3]
 8004f30:	7dba      	ldrb	r2, [r7, #22]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d3ec      	bcc.n	8004f10 <SSP_ConstructFrame+0x6e>
    }

    frame->crc = SSP_CalculateCRC(&buffer[1], frame->data_len + 4);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	78db      	ldrb	r3, [r3, #3]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f7ff fd53 	bl	80049f0 <SSP_CalculateCRC>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    buffer[index++] = (frame->crc >> 8) & 0xFF; // CRC_1 (MSB)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f5a:	0a1b      	lsrs	r3, r3, #8
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	1c59      	adds	r1, r3, #1
 8004f62:	75f9      	strb	r1, [r7, #23]
 8004f64:	4619      	mov	r1, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	440b      	add	r3, r1
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->crc & 0xFF;        // CRC_0 (LSB)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	1c59      	adds	r1, r3, #1
 8004f78:	75f9      	strb	r1, [r7, #23]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	440b      	add	r3, r1
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
    buffer[index++] = SSP_FLAG; // End flag
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	75fa      	strb	r2, [r7, #23]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4413      	add	r3, r2
 8004f90:	227e      	movs	r2, #126	@ 0x7e
 8004f92:	701a      	strb	r2, [r3, #0]

    *frame_len = index;
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <SSP_TransmitFrame>:
  * @param  buffer: Buffer containing the frame
  * @param  frame_len: Length of the frame
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef SSP_TransmitFrame(USART_HandleTypeDef *husart, uint8_t *buffer, uint16_t frame_len)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	80fb      	strh	r3, [r7, #6]
    return HAL_USART_Transmit(husart, buffer, frame_len, HAL_MAX_DELAY);
 8004fb4:	88fa      	ldrh	r2, [r7, #6]
 8004fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f006 fc68 	bl	800b892 <HAL_USART_Transmit>
 8004fc2:	4603      	mov	r3, r0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <SSP_ReceiveFrame>:
  * @param  buffer_len: Length of the buffer
  * @param  frame: Pointer to the SSP frame structure to fill
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef SSP_ReceiveFrame(USART_HandleTypeDef *husart, uint8_t *buffer, uint16_t buffer_len, SSP_FrameTypeDef *frame)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	80fb      	strh	r3, [r7, #6]
    uint16_t index = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	82fb      	strh	r3, [r7, #22]
    uint8_t byte;

    // Wait for start flag
    while (1) {
        if (HAL_USART_Receive(husart, &byte, 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8004fe0:	f107 0111 	add.w	r1, r7, #17
 8004fe4:	2364      	movs	r3, #100	@ 0x64
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f006 fcff 	bl	800b9ec <HAL_USART_Receive>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <SSP_ReceiveFrame+0x2c>
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0bd      	b.n	8005174 <SSP_ReceiveFrame+0x1a8>
        if (byte == SSP_FLAG) break;
 8004ff8:	7c7b      	ldrb	r3, [r7, #17]
 8004ffa:	2b7e      	cmp	r3, #126	@ 0x7e
 8004ffc:	d000      	beq.n	8005000 <SSP_ReceiveFrame+0x34>
        if (HAL_USART_Receive(husart, &byte, 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8004ffe:	e7ef      	b.n	8004fe0 <SSP_ReceiveFrame+0x14>
        if (byte == SSP_FLAG) break;
 8005000:	bf00      	nop
    }
    buffer[index++] = byte;
 8005002:	8afb      	ldrh	r3, [r7, #22]
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	82fa      	strh	r2, [r7, #22]
 8005008:	461a      	mov	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4413      	add	r3, r2
 800500e:	7c7a      	ldrb	r2, [r7, #17]
 8005010:	701a      	strb	r2, [r3, #0]

    // Read header
    while (index < SSP_HEADER_SIZE) {
 8005012:	e00f      	b.n	8005034 <SSP_ReceiveFrame+0x68>
        if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8005014:	8afb      	ldrh	r3, [r7, #22]
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	82fa      	strh	r2, [r7, #22]
 800501a:	461a      	mov	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	1899      	adds	r1, r3, r2
 8005020:	2364      	movs	r3, #100	@ 0x64
 8005022:	2201      	movs	r2, #1
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f006 fce1 	bl	800b9ec <HAL_USART_Receive>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <SSP_ReceiveFrame+0x68>
 8005030:	2303      	movs	r3, #3
 8005032:	e09f      	b.n	8005174 <SSP_ReceiveFrame+0x1a8>
    while (index < SSP_HEADER_SIZE) {
 8005034:	8afb      	ldrh	r3, [r7, #22]
 8005036:	2b04      	cmp	r3, #4
 8005038:	d9ec      	bls.n	8005014 <SSP_ReceiveFrame+0x48>
    }

    frame->dest = buffer[1];
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	785a      	ldrb	r2, [r3, #1]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	701a      	strb	r2, [r3, #0]
    frame->src = buffer[2];
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	789a      	ldrb	r2, [r3, #2]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	705a      	strb	r2, [r3, #1]
    frame->cmd_id = buffer[3];
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	78da      	ldrb	r2, [r3, #3]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	709a      	strb	r2, [r3, #2]
    frame->data_len = buffer[4];
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	791a      	ldrb	r2, [r3, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	70da      	strb	r2, [r3, #3]

    if (frame->data_len > SSP_MAX_DATA_LEN) return HAL_ERROR;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	78db      	ldrb	r3, [r3, #3]
 800505e:	2b40      	cmp	r3, #64	@ 0x40
 8005060:	d901      	bls.n	8005066 <SSP_ReceiveFrame+0x9a>
 8005062:	2301      	movs	r3, #1
 8005064:	e086      	b.n	8005174 <SSP_ReceiveFrame+0x1a8>

    // Read data
    for (uint8_t i = 0; i < frame->data_len; i++) {
 8005066:	2300      	movs	r3, #0
 8005068:	757b      	strb	r3, [r7, #21]
 800506a:	e01c      	b.n	80050a6 <SSP_ReceiveFrame+0xda>
        if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 800506c:	8afb      	ldrh	r3, [r7, #22]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	82fa      	strh	r2, [r7, #22]
 8005072:	461a      	mov	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	1899      	adds	r1, r3, r2
 8005078:	2364      	movs	r3, #100	@ 0x64
 800507a:	2201      	movs	r2, #1
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f006 fcb5 	bl	800b9ec <HAL_USART_Receive>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <SSP_ReceiveFrame+0xc0>
 8005088:	2303      	movs	r3, #3
 800508a:	e073      	b.n	8005174 <SSP_ReceiveFrame+0x1a8>
        frame->data[i] = buffer[index - 1];
 800508c:	8afb      	ldrh	r3, [r7, #22]
 800508e:	3b01      	subs	r3, #1
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	441a      	add	r2, r3
 8005094:	7d7b      	ldrb	r3, [r7, #21]
 8005096:	7811      	ldrb	r1, [r2, #0]
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	4413      	add	r3, r2
 800509c:	460a      	mov	r2, r1
 800509e:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < frame->data_len; i++) {
 80050a0:	7d7b      	ldrb	r3, [r7, #21]
 80050a2:	3301      	adds	r3, #1
 80050a4:	757b      	strb	r3, [r7, #21]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	78db      	ldrb	r3, [r3, #3]
 80050aa:	7d7a      	ldrb	r2, [r7, #21]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d3dd      	bcc.n	800506c <SSP_ReceiveFrame+0xa0>
    }

    // Read CRC and end flag
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 80050b0:	8afb      	ldrh	r3, [r7, #22]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	82fa      	strh	r2, [r7, #22]
 80050b6:	461a      	mov	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	1899      	adds	r1, r3, r2
 80050bc:	2364      	movs	r3, #100	@ 0x64
 80050be:	2201      	movs	r2, #1
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f006 fc93 	bl	800b9ec <HAL_USART_Receive>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <SSP_ReceiveFrame+0x104>
 80050cc:	2303      	movs	r3, #3
 80050ce:	e051      	b.n	8005174 <SSP_ReceiveFrame+0x1a8>
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 80050d0:	8afb      	ldrh	r3, [r7, #22]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	82fa      	strh	r2, [r7, #22]
 80050d6:	461a      	mov	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	1899      	adds	r1, r3, r2
 80050dc:	2364      	movs	r3, #100	@ 0x64
 80050de:	2201      	movs	r2, #1
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f006 fc83 	bl	800b9ec <HAL_USART_Receive>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <SSP_ReceiveFrame+0x124>
 80050ec:	2303      	movs	r3, #3
 80050ee:	e041      	b.n	8005174 <SSP_ReceiveFrame+0x1a8>
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 80050f0:	8afb      	ldrh	r3, [r7, #22]
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	82fa      	strh	r2, [r7, #22]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	1899      	adds	r1, r3, r2
 80050fc:	2364      	movs	r3, #100	@ 0x64
 80050fe:	2201      	movs	r2, #1
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f006 fc73 	bl	800b9ec <HAL_USART_Receive>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <SSP_ReceiveFrame+0x144>
 800510c:	2303      	movs	r3, #3
 800510e:	e031      	b.n	8005174 <SSP_ReceiveFrame+0x1a8>

    if (buffer[index - 1] != SSP_FLAG) return HAL_ERROR;
 8005110:	8afb      	ldrh	r3, [r7, #22]
 8005112:	3b01      	subs	r3, #1
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	4413      	add	r3, r2
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b7e      	cmp	r3, #126	@ 0x7e
 800511c:	d001      	beq.n	8005122 <SSP_ReceiveFrame+0x156>
 800511e:	2301      	movs	r3, #1
 8005120:	e028      	b.n	8005174 <SSP_ReceiveFrame+0x1a8>

    frame->crc = (buffer[index - 3] << 8) | buffer[index - 2];
 8005122:	8afb      	ldrh	r3, [r7, #22]
 8005124:	3b03      	subs	r3, #3
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	4413      	add	r3, r2
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	b21b      	sxth	r3, r3
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	b21a      	sxth	r2, r3
 8005132:	8afb      	ldrh	r3, [r7, #22]
 8005134:	3b02      	subs	r3, #2
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	440b      	add	r3, r1
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b21b      	sxth	r3, r3
 800513e:	4313      	orrs	r3, r2
 8005140:	b21b      	sxth	r3, r3
 8005142:	b29a      	uxth	r2, r3
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    uint16_t calc_crc = SSP_CalculateCRC(&buffer[1], frame->data_len + 4);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	78db      	ldrb	r3, [r3, #3]
 8005152:	3304      	adds	r3, #4
 8005154:	b29b      	uxth	r3, r3
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f7ff fc49 	bl	80049f0 <SSP_CalculateCRC>
 800515e:	4603      	mov	r3, r0
 8005160:	827b      	strh	r3, [r7, #18]
    if (frame->crc != calc_crc) return HAL_ERROR;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005168:	8a7a      	ldrh	r2, [r7, #18]
 800516a:	429a      	cmp	r2, r3
 800516c:	d001      	beq.n	8005172 <SSP_ReceiveFrame+0x1a6>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <SSP_ReceiveFrame+0x1a8>

    return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <SSP_RequestTime>:
  * @param  husart: Pointer to the USART handle
  * @param  time: Pointer to the time structure to fill
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef SSP_RequestTime(USART_HandleTypeDef *husart, SSP_TimeTypeDef *time)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b0a6      	sub	sp, #152	@ 0x98
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
    SSP_FrameTypeDef frame = {0};
 8005186:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800518a:	2246      	movs	r2, #70	@ 0x46
 800518c:	2100      	movs	r1, #0
 800518e:	4618      	mov	r0, r3
 8005190:	f007 fece 	bl	800cf30 <memset>
    uint16_t frame_len;

    // Construct the time request frame
    frame.dest = SSP_ADDR_OBC;
 8005194:	2302      	movs	r3, #2
 8005196:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    frame.src = SSP_ADDR_EPS;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    frame.cmd_id = SSP_CMD_GTIME;
 80051a0:	2323      	movs	r3, #35	@ 0x23
 80051a2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    frame.data_len = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

    SSP_ConstructFrame(&frame, ssp_tx_buffer, &frame_len);
 80051ac:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80051b0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80051b4:	4937      	ldr	r1, [pc, #220]	@ (8005294 <SSP_RequestTime+0x118>)
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff fe73 	bl	8004ea2 <SSP_ConstructFrame>
    HAL_StatusTypeDef status = SSP_TransmitFrame(husart, ssp_tx_buffer, frame_len);
 80051bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80051c0:	461a      	mov	r2, r3
 80051c2:	4934      	ldr	r1, [pc, #208]	@ (8005294 <SSP_RequestTime+0x118>)
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff feee 	bl	8004fa6 <SSP_TransmitFrame>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if (status != HAL_OK) return status;
 80051d0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <SSP_RequestTime+0x62>
 80051d8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80051dc:	e056      	b.n	800528c <SSP_RequestTime+0x110>

    // Receive the ACK/NACK response
    SSP_FrameTypeDef response = {0};
 80051de:	f107 0308 	add.w	r3, r7, #8
 80051e2:	2246      	movs	r2, #70	@ 0x46
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f007 fea2 	bl	800cf30 <memset>
    status = SSP_ReceiveFrame(husart, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &response);
 80051ec:	f107 0308 	add.w	r3, r7, #8
 80051f0:	2245      	movs	r2, #69	@ 0x45
 80051f2:	4929      	ldr	r1, [pc, #164]	@ (8005298 <SSP_RequestTime+0x11c>)
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff fee9 	bl	8004fcc <SSP_ReceiveFrame>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if (status != HAL_OK) return status;
 8005200:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <SSP_RequestTime+0x92>
 8005208:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800520c:	e03e      	b.n	800528c <SSP_RequestTime+0x110>

    if (response.dest != SSP_ADDR_EPS || (response.cmd_id != SSP_CMD_ACK && response.cmd_id != SSP_CMD_NACK)) {
 800520e:	7a3b      	ldrb	r3, [r7, #8]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d105      	bne.n	8005220 <SSP_RequestTime+0xa4>
 8005214:	7abb      	ldrb	r3, [r7, #10]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <SSP_RequestTime+0xa8>
 800521a:	7abb      	ldrb	r3, [r7, #10]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d001      	beq.n	8005224 <SSP_RequestTime+0xa8>
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e033      	b.n	800528c <SSP_RequestTime+0x110>
    }

    if (response.cmd_id == SSP_CMD_NACK) {
 8005224:	7abb      	ldrb	r3, [r7, #10]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <SSP_RequestTime+0xb2>
        return HAL_ERROR; // OBC rejected the request
 800522a:	2301      	movs	r3, #1
 800522c:	e02e      	b.n	800528c <SSP_RequestTime+0x110>
    }

    // Receive the time data in a separate frame
    status = SSP_ReceiveFrame(husart, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &response);
 800522e:	f107 0308 	add.w	r3, r7, #8
 8005232:	2245      	movs	r2, #69	@ 0x45
 8005234:	4918      	ldr	r1, [pc, #96]	@ (8005298 <SSP_RequestTime+0x11c>)
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff fec8 	bl	8004fcc <SSP_ReceiveFrame>
 800523c:	4603      	mov	r3, r0
 800523e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if (status != HAL_OK) return status;
 8005242:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <SSP_RequestTime+0xd4>
 800524a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800524e:	e01d      	b.n	800528c <SSP_RequestTime+0x110>

    if (response.dest != SSP_ADDR_EPS || response.cmd_id != (SSP_CMD_GTIME | SSP_FRAME_TYPE_REPLY) || response.data_len != 7) {
 8005250:	7a3b      	ldrb	r3, [r7, #8]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d105      	bne.n	8005262 <SSP_RequestTime+0xe6>
 8005256:	7abb      	ldrb	r3, [r7, #10]
 8005258:	2b63      	cmp	r3, #99	@ 0x63
 800525a:	d102      	bne.n	8005262 <SSP_RequestTime+0xe6>
 800525c:	7afb      	ldrb	r3, [r7, #11]
 800525e:	2b07      	cmp	r3, #7
 8005260:	d001      	beq.n	8005266 <SSP_RequestTime+0xea>
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e012      	b.n	800528c <SSP_RequestTime+0x110>
    }

    // Unpack the time data
    time->year = (response.data[0] << 8) | response.data[1];
 8005266:	7b7a      	ldrb	r2, [r7, #13]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	701a      	strb	r2, [r3, #0]
    time->month = response.data[2];
 800526c:	7bba      	ldrb	r2, [r7, #14]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	705a      	strb	r2, [r3, #1]
    time->day = response.data[3];
 8005272:	7bfa      	ldrb	r2, [r7, #15]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	709a      	strb	r2, [r3, #2]
    time->hour = response.data[4];
 8005278:	7c3a      	ldrb	r2, [r7, #16]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	70da      	strb	r2, [r3, #3]
    time->minute = response.data[5];
 800527e:	7c7a      	ldrb	r2, [r7, #17]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	711a      	strb	r2, [r3, #4]
    time->second = response.data[6];
 8005284:	7cba      	ldrb	r2, [r7, #18]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3798      	adds	r7, #152	@ 0x98
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000654 	.word	0x20000654
 8005298:	2000069c 	.word	0x2000069c

0800529c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800529c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80052d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80052a0:	f7ff fa24 	bl	80046ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052a4:	480c      	ldr	r0, [pc, #48]	@ (80052d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80052a6:	490d      	ldr	r1, [pc, #52]	@ (80052dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80052a8:	4a0d      	ldr	r2, [pc, #52]	@ (80052e0 <LoopForever+0xe>)
  movs r3, #0
 80052aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052ac:	e002      	b.n	80052b4 <LoopCopyDataInit>

080052ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052b2:	3304      	adds	r3, #4

080052b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052b8:	d3f9      	bcc.n	80052ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052ba:	4a0a      	ldr	r2, [pc, #40]	@ (80052e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052bc:	4c0a      	ldr	r4, [pc, #40]	@ (80052e8 <LoopForever+0x16>)
  movs r3, #0
 80052be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052c0:	e001      	b.n	80052c6 <LoopFillZerobss>

080052c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052c4:	3204      	adds	r2, #4

080052c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052c8:	d3fb      	bcc.n	80052c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80052ca:	f007 feaf 	bl	800d02c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80052ce:	f7fd ffd5 	bl	800327c <main>

080052d2 <LoopForever>:

LoopForever:
    b LoopForever
 80052d2:	e7fe      	b.n	80052d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80052d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80052d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052dc:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80052e0:	08011b84 	.word	0x08011b84
  ldr r2, =_sbss
 80052e4:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80052e8:	20000834 	.word	0x20000834

080052ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80052ec:	e7fe      	b.n	80052ec <ADC1_2_IRQHandler>

080052ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052f8:	2003      	movs	r0, #3
 80052fa:	f001 fccf 	bl	8006c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052fe:	200f      	movs	r0, #15
 8005300:	f000 f80e 	bl	8005320 <HAL_InitTick>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	71fb      	strb	r3, [r7, #7]
 800530e:	e001      	b.n	8005314 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005310:	f7fe fe74 	bl	8003ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005314:	79fb      	ldrb	r3, [r7, #7]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800532c:	4b17      	ldr	r3, [pc, #92]	@ (800538c <HAL_InitTick+0x6c>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d023      	beq.n	800537c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005334:	4b16      	ldr	r3, [pc, #88]	@ (8005390 <HAL_InitTick+0x70>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	4b14      	ldr	r3, [pc, #80]	@ (800538c <HAL_InitTick+0x6c>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	4619      	mov	r1, r3
 800533e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005342:	fbb3 f3f1 	udiv	r3, r3, r1
 8005346:	fbb2 f3f3 	udiv	r3, r2, r3
 800534a:	4618      	mov	r0, r3
 800534c:	f001 fcd1 	bl	8006cf2 <HAL_SYSTICK_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10f      	bne.n	8005376 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b0f      	cmp	r3, #15
 800535a:	d809      	bhi.n	8005370 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800535c:	2200      	movs	r2, #0
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	f001 fca5 	bl	8006cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005368:	4a0a      	ldr	r2, [pc, #40]	@ (8005394 <HAL_InitTick+0x74>)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e007      	b.n	8005380 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
 8005374:	e004      	b.n	8005380 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
 800537a:	e001      	b.n	8005380 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000030 	.word	0x20000030
 8005390:	20000028 	.word	0x20000028
 8005394:	2000002c 	.word	0x2000002c

08005398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800539c:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <HAL_IncTick+0x20>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <HAL_IncTick+0x24>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4413      	add	r3, r2
 80053a8:	4a04      	ldr	r2, [pc, #16]	@ (80053bc <HAL_IncTick+0x24>)
 80053aa:	6013      	str	r3, [r2, #0]
}
 80053ac:	bf00      	nop
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20000030 	.word	0x20000030
 80053bc:	200006e4 	.word	0x200006e4

080053c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return uwTick;
 80053c4:	4b03      	ldr	r3, [pc, #12]	@ (80053d4 <HAL_GetTick+0x14>)
 80053c6:	681b      	ldr	r3, [r3, #0]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	200006e4 	.word	0x200006e4

080053d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053e0:	f7ff ffee 	bl	80053c0 <HAL_GetTick>
 80053e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d005      	beq.n	80053fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80053f2:	4b0a      	ldr	r3, [pc, #40]	@ (800541c <HAL_Delay+0x44>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053fe:	bf00      	nop
 8005400:	f7ff ffde 	bl	80053c0 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	429a      	cmp	r2, r3
 800540e:	d8f7      	bhi.n	8005400 <HAL_Delay+0x28>
  {
  }
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000030 	.word	0x20000030

08005420 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	609a      	str	r2, [r3, #8]
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	609a      	str	r2, [r3, #8]
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3360      	adds	r3, #96	@ 0x60
 800549a:	461a      	mov	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4b08      	ldr	r3, [pc, #32]	@ (80054cc <LL_ADC_SetOffset+0x44>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80054c0:	bf00      	nop
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	03fff000 	.word	0x03fff000

080054d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3360      	adds	r3, #96	@ 0x60
 80054de:	461a      	mov	r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3360      	adds	r3, #96	@ 0x60
 800550c:	461a      	mov	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	431a      	orrs	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3330      	adds	r3, #48	@ 0x30
 8005568:	461a      	mov	r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	0a1b      	lsrs	r3, r3, #8
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	f003 030c 	and.w	r3, r3, #12
 8005574:	4413      	add	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	211f      	movs	r1, #31
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	401a      	ands	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	0e9b      	lsrs	r3, r3, #26
 8005590:	f003 011f 	and.w	r1, r3, #31
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 031f 	and.w	r3, r3, #31
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	431a      	orrs	r2, r3
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3314      	adds	r3, #20
 80055c0:	461a      	mov	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0e5b      	lsrs	r3, r3, #25
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	4413      	add	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	0d1b      	lsrs	r3, r3, #20
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	2107      	movs	r1, #7
 80055de:	fa01 f303 	lsl.w	r3, r1, r3
 80055e2:	43db      	mvns	r3, r3
 80055e4:	401a      	ands	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	0d1b      	lsrs	r3, r3, #20
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	fa01 f303 	lsl.w	r3, r1, r3
 80055f4:	431a      	orrs	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005620:	43db      	mvns	r3, r3
 8005622:	401a      	ands	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f003 0318 	and.w	r3, r3, #24
 800562a:	4908      	ldr	r1, [pc, #32]	@ (800564c <LL_ADC_SetChannelSingleDiff+0x44>)
 800562c:	40d9      	lsrs	r1, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	400b      	ands	r3, r1
 8005632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005636:	431a      	orrs	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	0007ffff 	.word	0x0007ffff

08005650 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 031f 	and.w	r3, r3, #31
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800567c:	4618      	mov	r0, r3
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005698:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6093      	str	r3, [r2, #8]
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056c0:	d101      	bne.n	80056c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80056c2:	2301      	movs	r3, #1
 80056c4:	e000      	b.n	80056c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80056e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800570c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005710:	d101      	bne.n	8005716 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005734:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005738:	f043 0201 	orr.w	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800575c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005760:	f043 0202 	orr.w	r2, r3, #2
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <LL_ADC_IsEnabled+0x18>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <LL_ADC_IsEnabled+0x1a>
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d101      	bne.n	80057b2 <LL_ADC_IsDisableOngoing+0x18>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <LL_ADC_IsDisableOngoing+0x1a>
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057d4:	f043 0204 	orr.w	r2, r3, #4
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057fc:	f043 0210 	orr.w	r2, r3, #16
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b04      	cmp	r3, #4
 8005822:	d101      	bne.n	8005828 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005846:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800584a:	f043 0220 	orr.w	r2, r3, #32
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b08      	cmp	r3, #8
 8005870:	d101      	bne.n	8005876 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b089      	sub	sp, #36	@ 0x24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e130      	b.n	8005b00 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d109      	bne.n	80058c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7fe fbc9 	bl	8004044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fef1 	bl	80056ac <LL_ADC_IsDeepPowerDownEnabled>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d004      	beq.n	80058da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fed7 	bl	8005688 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ff0c 	bl	80056fc <LL_ADC_IsInternalRegulatorEnabled>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d115      	bne.n	8005916 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fef0 	bl	80056d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058f4:	4b84      	ldr	r3, [pc, #528]	@ (8005b08 <HAL_ADC_Init+0x284>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	099b      	lsrs	r3, r3, #6
 80058fa:	4a84      	ldr	r2, [pc, #528]	@ (8005b0c <HAL_ADC_Init+0x288>)
 80058fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005900:	099b      	lsrs	r3, r3, #6
 8005902:	3301      	adds	r3, #1
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005908:	e002      	b.n	8005910 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3b01      	subs	r3, #1
 800590e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f9      	bne.n	800590a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff feee 	bl	80056fc <LL_ADC_IsInternalRegulatorEnabled>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10d      	bne.n	8005942 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800592a:	f043 0210 	orr.w	r2, r3, #16
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005936:	f043 0201 	orr.w	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff ff62 	bl	8005810 <LL_ADC_REG_IsConversionOngoing>
 800594c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b00      	cmp	r3, #0
 8005958:	f040 80c9 	bne.w	8005aee <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f040 80c5 	bne.w	8005aee <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005968:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800596c:	f043 0202 	orr.w	r2, r3, #2
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff fefb 	bl	8005774 <LL_ADC_IsEnabled>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d115      	bne.n	80059b0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005984:	4862      	ldr	r0, [pc, #392]	@ (8005b10 <HAL_ADC_Init+0x28c>)
 8005986:	f7ff fef5 	bl	8005774 <LL_ADC_IsEnabled>
 800598a:	4604      	mov	r4, r0
 800598c:	4861      	ldr	r0, [pc, #388]	@ (8005b14 <HAL_ADC_Init+0x290>)
 800598e:	f7ff fef1 	bl	8005774 <LL_ADC_IsEnabled>
 8005992:	4603      	mov	r3, r0
 8005994:	431c      	orrs	r4, r3
 8005996:	4860      	ldr	r0, [pc, #384]	@ (8005b18 <HAL_ADC_Init+0x294>)
 8005998:	f7ff feec 	bl	8005774 <LL_ADC_IsEnabled>
 800599c:	4603      	mov	r3, r0
 800599e:	4323      	orrs	r3, r4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	4619      	mov	r1, r3
 80059aa:	485c      	ldr	r0, [pc, #368]	@ (8005b1c <HAL_ADC_Init+0x298>)
 80059ac:	f7ff fd38 	bl	8005420 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	7e5b      	ldrb	r3, [r3, #25]
 80059b4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059ba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80059c0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80059c6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ce:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d106      	bne.n	80059ec <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e2:	3b01      	subs	r3, #1
 80059e4:	045b      	lsls	r3, r3, #17
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a00:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	4b44      	ldr	r3, [pc, #272]	@ (8005b20 <HAL_ADC_Init+0x29c>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6812      	ldr	r2, [r2, #0]
 8005a16:	69b9      	ldr	r1, [r7, #24]
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff ff1c 	bl	800585e <LL_ADC_INJ_IsConversionOngoing>
 8005a26:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d13d      	bne.n	8005aaa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d13a      	bne.n	8005aaa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a38:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a40:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a50:	f023 0302 	bic.w	r3, r3, #2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	69b9      	ldr	r1, [r7, #24]
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d118      	bne.n	8005a9a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a72:	f023 0304 	bic.w	r3, r3, #4
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a7e:	4311      	orrs	r1, r2
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005a84:	4311      	orrs	r1, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	611a      	str	r2, [r3, #16]
 8005a98:	e007      	b.n	8005aaa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0201 	bic.w	r2, r2, #1
 8005aa8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d10c      	bne.n	8005acc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab8:	f023 010f 	bic.w	r1, r3, #15
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005aca:	e007      	b.n	8005adc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 020f 	bic.w	r2, r2, #15
 8005ada:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae0:	f023 0303 	bic.w	r3, r3, #3
 8005ae4:	f043 0201 	orr.w	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	655a      	str	r2, [r3, #84]	@ 0x54
 8005aec:	e007      	b.n	8005afe <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af2:	f043 0210 	orr.w	r2, r3, #16
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3724      	adds	r7, #36	@ 0x24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd90      	pop	{r4, r7, pc}
 8005b08:	20000028 	.word	0x20000028
 8005b0c:	053e2d63 	.word	0x053e2d63
 8005b10:	50040000 	.word	0x50040000
 8005b14:	50040100 	.word	0x50040100
 8005b18:	50040200 	.word	0x50040200
 8005b1c:	50040300 	.word	0x50040300
 8005b20:	fff0c007 	.word	0xfff0c007

08005b24 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b2c:	4857      	ldr	r0, [pc, #348]	@ (8005c8c <HAL_ADC_Start+0x168>)
 8005b2e:	f7ff fd8f 	bl	8005650 <LL_ADC_GetMultimode>
 8005b32:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff fe69 	bl	8005810 <LL_ADC_REG_IsConversionOngoing>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f040 809c 	bne.w	8005c7e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_ADC_Start+0x30>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e097      	b.n	8005c84 <HAL_ADC_Start+0x160>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fe63 	bl	8006828 <ADC_Enable>
 8005b62:	4603      	mov	r3, r0
 8005b64:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 8083 	bne.w	8005c74 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a42      	ldr	r2, [pc, #264]	@ (8005c90 <HAL_ADC_Start+0x16c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d002      	beq.n	8005b92 <HAL_ADC_Start+0x6e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	e000      	b.n	8005b94 <HAL_ADC_Start+0x70>
 8005b92:	4b40      	ldr	r3, [pc, #256]	@ (8005c94 <HAL_ADC_Start+0x170>)
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d002      	beq.n	8005ba2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d105      	bne.n	8005bae <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bba:	d106      	bne.n	8005bca <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc0:	f023 0206 	bic.w	r2, r3, #6
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bc8:	e002      	b.n	8005bd0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	221c      	movs	r2, #28
 8005bd6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a2a      	ldr	r2, [pc, #168]	@ (8005c90 <HAL_ADC_Start+0x16c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d002      	beq.n	8005bf0 <HAL_ADC_Start+0xcc>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	e000      	b.n	8005bf2 <HAL_ADC_Start+0xce>
 8005bf0:	4b28      	ldr	r3, [pc, #160]	@ (8005c94 <HAL_ADC_Start+0x170>)
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d008      	beq.n	8005c0c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d002      	beq.n	8005c0c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b09      	cmp	r3, #9
 8005c0a:	d114      	bne.n	8005c36 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d007      	beq.n	8005c2a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005c22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff fdc6 	bl	80057c0 <LL_ADC_REG_StartConversion>
 8005c34:	e025      	b.n	8005c82 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a12      	ldr	r2, [pc, #72]	@ (8005c90 <HAL_ADC_Start+0x16c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d002      	beq.n	8005c52 <HAL_ADC_Start+0x12e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	e000      	b.n	8005c54 <HAL_ADC_Start+0x130>
 8005c52:	4b10      	ldr	r3, [pc, #64]	@ (8005c94 <HAL_ADC_Start+0x170>)
 8005c54:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00f      	beq.n	8005c82 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c66:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005c6a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	655a      	str	r2, [r3, #84]	@ 0x54
 8005c72:	e006      	b.n	8005c82 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005c7c:	e001      	b.n	8005c82 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c7e:	2302      	movs	r3, #2
 8005c80:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	50040300 	.word	0x50040300
 8005c90:	50040100 	.word	0x50040100
 8005c94:	50040000 	.word	0x50040000

08005c98 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_ADC_Stop+0x16>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e023      	b.n	8005cf6 <HAL_ADC_Stop+0x5e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005cb6:	2103      	movs	r1, #3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fcf9 	bl	80066b0 <ADC_ConversionStop>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d111      	bne.n	8005cec <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fe33 	bl	8006934 <ADC_Disable>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d109      	bne.n	8005cec <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cdc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005ce0:	f023 0301 	bic.w	r3, r3, #1
 8005ce4:	f043 0201 	orr.w	r2, r3, #1
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d0a:	4866      	ldr	r0, [pc, #408]	@ (8005ea4 <HAL_ADC_PollForConversion+0x1a4>)
 8005d0c:	f7ff fca0 	bl	8005650 <LL_ADC_GetMultimode>
 8005d10:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d102      	bne.n	8005d20 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005d1a:	2308      	movs	r3, #8
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	e02a      	b.n	8005d76 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b05      	cmp	r3, #5
 8005d2a:	d002      	beq.n	8005d32 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b09      	cmp	r3, #9
 8005d30:	d111      	bne.n	8005d56 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d44:	f043 0220 	orr.w	r2, r3, #32
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0a4      	b.n	8005e9a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005d50:	2304      	movs	r3, #4
 8005d52:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005d54:	e00f      	b.n	8005d76 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005d56:	4853      	ldr	r0, [pc, #332]	@ (8005ea4 <HAL_ADC_PollForConversion+0x1a4>)
 8005d58:	f7ff fc88 	bl	800566c <LL_ADC_GetMultiDMATransfer>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d66:	f043 0220 	orr.w	r2, r3, #32
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e093      	b.n	8005e9a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005d72:	2304      	movs	r3, #4
 8005d74:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005d76:	f7ff fb23 	bl	80053c0 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005d7c:	e021      	b.n	8005dc2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d84:	d01d      	beq.n	8005dc2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005d86:	f7ff fb1b 	bl	80053c0 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d302      	bcc.n	8005d9c <HAL_ADC_PollForConversion+0x9c>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d112      	bne.n	8005dc2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dae:	f043 0204 	orr.w	r2, r3, #4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e06b      	b.n	8005e9a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0d6      	beq.n	8005d7e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fba6 	bl	8005532 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01c      	beq.n	8005e26 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7e5b      	ldrb	r3, [r3, #25]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d118      	bne.n	8005e26 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d111      	bne.n	8005e26 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d105      	bne.n	8005e26 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1e:	f043 0201 	orr.w	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea8 <HAL_ADC_PollForConversion+0x1a8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d002      	beq.n	8005e36 <HAL_ADC_PollForConversion+0x136>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	e000      	b.n	8005e38 <HAL_ADC_PollForConversion+0x138>
 8005e36:	4b1d      	ldr	r3, [pc, #116]	@ (8005eac <HAL_ADC_PollForConversion+0x1ac>)
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d008      	beq.n	8005e52 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b05      	cmp	r3, #5
 8005e4a:	d002      	beq.n	8005e52 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2b09      	cmp	r3, #9
 8005e50:	d104      	bne.n	8005e5c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	e00c      	b.n	8005e76 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a11      	ldr	r2, [pc, #68]	@ (8005ea8 <HAL_ADC_PollForConversion+0x1a8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d002      	beq.n	8005e6c <HAL_ADC_PollForConversion+0x16c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	e000      	b.n	8005e6e <HAL_ADC_PollForConversion+0x16e>
 8005e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005eac <HAL_ADC_PollForConversion+0x1ac>)
 8005e6e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d104      	bne.n	8005e86 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2208      	movs	r2, #8
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e008      	b.n	8005e98 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	220c      	movs	r2, #12
 8005e96:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	50040300 	.word	0x50040300
 8005ea8:	50040100 	.word	0x50040100
 8005eac:	50040000 	.word	0x50040000

08005eb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
	...

08005ecc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b0b6      	sub	sp, #216	@ 0xd8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_ADC_ConfigChannel+0x22>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e3c9      	b.n	8006682 <HAL_ADC_ConfigChannel+0x7b6>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fc88 	bl	8005810 <LL_ADC_REG_IsConversionOngoing>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 83aa 	bne.w	800665c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b05      	cmp	r3, #5
 8005f16:	d824      	bhi.n	8005f62 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	3b02      	subs	r3, #2
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d81b      	bhi.n	8005f5a <HAL_ADC_ConfigChannel+0x8e>
 8005f22:	a201      	add	r2, pc, #4	@ (adr r2, 8005f28 <HAL_ADC_ConfigChannel+0x5c>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f39 	.word	0x08005f39
 8005f2c:	08005f41 	.word	0x08005f41
 8005f30:	08005f49 	.word	0x08005f49
 8005f34:	08005f51 	.word	0x08005f51
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005f38:	230c      	movs	r3, #12
 8005f3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f3e:	e010      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005f40:	2312      	movs	r3, #18
 8005f42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f46:	e00c      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005f48:	2318      	movs	r3, #24
 8005f4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f4e:	e008      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f58:	e003      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005f5a:	2306      	movs	r3, #6
 8005f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f60:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005f70:	f7ff faf2 	bl	8005558 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fc49 	bl	8005810 <LL_ADC_REG_IsConversionOngoing>
 8005f7e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fc69 	bl	800585e <LL_ADC_INJ_IsConversionOngoing>
 8005f8c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 81a4 	bne.w	80062e2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f040 819f 	bne.w	80062e2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	6819      	ldr	r1, [r3, #0]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	f7ff fafd 	bl	80055b0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695a      	ldr	r2, [r3, #20]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	08db      	lsrs	r3, r3, #3
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d00a      	beq.n	8005fee <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	6919      	ldr	r1, [r3, #16]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fe8:	f7ff fa4e 	bl	8005488 <LL_ADC_SetOffset>
 8005fec:	e179      	b.n	80062e2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fa6b 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <HAL_ADC_ConfigChannel+0x14e>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fa60 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 8006010:	4603      	mov	r3, r0
 8006012:	0e9b      	lsrs	r3, r3, #26
 8006014:	f003 021f 	and.w	r2, r3, #31
 8006018:	e01e      	b.n	8006058 <HAL_ADC_ConfigChannel+0x18c>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff fa55 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 8006026:	4603      	mov	r3, r0
 8006028:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006030:	fa93 f3a3 	rbit	r3, r3
 8006034:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006038:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800603c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006040:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8006048:	2320      	movs	r3, #32
 800604a:	e004      	b.n	8006056 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800604c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006050:	fab3 f383 	clz	r3, r3
 8006054:	b2db      	uxtb	r3, r3
 8006056:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <HAL_ADC_ConfigChannel+0x1a4>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	0e9b      	lsrs	r3, r3, #26
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	e018      	b.n	80060a2 <HAL_ADC_ConfigChannel+0x1d6>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800607c:	fa93 f3a3 	rbit	r3, r3
 8006080:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800608c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8006094:	2320      	movs	r3, #32
 8006096:	e004      	b.n	80060a2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8006098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800609c:	fab3 f383 	clz	r3, r3
 80060a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d106      	bne.n	80060b4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2200      	movs	r2, #0
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff fa24 	bl	80054fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2101      	movs	r1, #1
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fa08 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 80060c0:	4603      	mov	r3, r0
 80060c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <HAL_ADC_ConfigChannel+0x214>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2101      	movs	r1, #1
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff f9fd 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 80060d6:	4603      	mov	r3, r0
 80060d8:	0e9b      	lsrs	r3, r3, #26
 80060da:	f003 021f 	and.w	r2, r3, #31
 80060de:	e01e      	b.n	800611e <HAL_ADC_ConfigChannel+0x252>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2101      	movs	r1, #1
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff f9f2 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060f6:	fa93 f3a3 	rbit	r3, r3
 80060fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80060fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006102:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8006106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800610e:	2320      	movs	r3, #32
 8006110:	e004      	b.n	800611c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8006112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006116:	fab3 f383 	clz	r3, r3
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006126:	2b00      	cmp	r3, #0
 8006128:	d105      	bne.n	8006136 <HAL_ADC_ConfigChannel+0x26a>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	0e9b      	lsrs	r3, r3, #26
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	e018      	b.n	8006168 <HAL_ADC_ConfigChannel+0x29c>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006142:	fa93 f3a3 	rbit	r3, r3
 8006146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800614a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800614e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006152:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800615a:	2320      	movs	r3, #32
 800615c:	e004      	b.n	8006168 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800615e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006162:	fab3 f383 	clz	r3, r3
 8006166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006168:	429a      	cmp	r2, r3
 800616a:	d106      	bne.n	800617a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2200      	movs	r2, #0
 8006172:	2101      	movs	r1, #1
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff f9c1 	bl	80054fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2102      	movs	r1, #2
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff f9a5 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 8006186:	4603      	mov	r3, r0
 8006188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <HAL_ADC_ConfigChannel+0x2da>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2102      	movs	r1, #2
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff f99a 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 800619c:	4603      	mov	r3, r0
 800619e:	0e9b      	lsrs	r3, r3, #26
 80061a0:	f003 021f 	and.w	r2, r3, #31
 80061a4:	e01e      	b.n	80061e4 <HAL_ADC_ConfigChannel+0x318>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2102      	movs	r1, #2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7ff f98f 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061bc:	fa93 f3a3 	rbit	r3, r3
 80061c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80061c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80061cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80061d4:	2320      	movs	r3, #32
 80061d6:	e004      	b.n	80061e2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80061d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061dc:	fab3 f383 	clz	r3, r3
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x330>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	0e9b      	lsrs	r3, r3, #26
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	e014      	b.n	8006226 <HAL_ADC_ConfigChannel+0x35a>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006202:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006204:	fa93 f3a3 	rbit	r3, r3
 8006208:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800620a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800620c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006210:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8006218:	2320      	movs	r3, #32
 800621a:	e004      	b.n	8006226 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800621c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006220:	fab3 f383 	clz	r3, r3
 8006224:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006226:	429a      	cmp	r2, r3
 8006228:	d106      	bne.n	8006238 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	2102      	movs	r1, #2
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff f962 	bl	80054fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2103      	movs	r1, #3
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff f946 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 8006244:	4603      	mov	r3, r0
 8006246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <HAL_ADC_ConfigChannel+0x398>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2103      	movs	r1, #3
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff f93b 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 800625a:	4603      	mov	r3, r0
 800625c:	0e9b      	lsrs	r3, r3, #26
 800625e:	f003 021f 	and.w	r2, r3, #31
 8006262:	e017      	b.n	8006294 <HAL_ADC_ConfigChannel+0x3c8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2103      	movs	r1, #3
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff f930 	bl	80054d0 <LL_ADC_GetOffsetChannel>
 8006270:	4603      	mov	r3, r0
 8006272:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006274:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006276:	fa93 f3a3 	rbit	r3, r3
 800627a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800627c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800627e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8006280:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8006286:	2320      	movs	r3, #32
 8006288:	e003      	b.n	8006292 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800628a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800628c:	fab3 f383 	clz	r3, r3
 8006290:	b2db      	uxtb	r3, r3
 8006292:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x3e0>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	0e9b      	lsrs	r3, r3, #26
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	e011      	b.n	80062d0 <HAL_ADC_ConfigChannel+0x404>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062b4:	fa93 f3a3 	rbit	r3, r3
 80062b8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80062ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80062be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80062c4:	2320      	movs	r3, #32
 80062c6:	e003      	b.n	80062d0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80062c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062ca:	fab3 f383 	clz	r3, r3
 80062ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d106      	bne.n	80062e2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2200      	movs	r2, #0
 80062da:	2103      	movs	r1, #3
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff f90d 	bl	80054fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fa44 	bl	8005774 <LL_ADC_IsEnabled>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f040 8140 	bne.w	8006574 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	6819      	ldr	r1, [r3, #0]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	461a      	mov	r2, r3
 8006302:	f7ff f981 	bl	8005608 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	4a8f      	ldr	r2, [pc, #572]	@ (8006548 <HAL_ADC_ConfigChannel+0x67c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	f040 8131 	bne.w	8006574 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10b      	bne.n	800633a <HAL_ADC_ConfigChannel+0x46e>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	0e9b      	lsrs	r3, r3, #26
 8006328:	3301      	adds	r3, #1
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2b09      	cmp	r3, #9
 8006330:	bf94      	ite	ls
 8006332:	2301      	movls	r3, #1
 8006334:	2300      	movhi	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	e019      	b.n	800636e <HAL_ADC_ConfigChannel+0x4a2>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006340:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006342:	fa93 f3a3 	rbit	r3, r3
 8006346:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8006348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800634a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800634c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8006352:	2320      	movs	r3, #32
 8006354:	e003      	b.n	800635e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8006356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006358:	fab3 f383 	clz	r3, r3
 800635c:	b2db      	uxtb	r3, r3
 800635e:	3301      	adds	r3, #1
 8006360:	f003 031f 	and.w	r3, r3, #31
 8006364:	2b09      	cmp	r3, #9
 8006366:	bf94      	ite	ls
 8006368:	2301      	movls	r3, #1
 800636a:	2300      	movhi	r3, #0
 800636c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800636e:	2b00      	cmp	r3, #0
 8006370:	d079      	beq.n	8006466 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800637a:	2b00      	cmp	r3, #0
 800637c:	d107      	bne.n	800638e <HAL_ADC_ConfigChannel+0x4c2>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	0e9b      	lsrs	r3, r3, #26
 8006384:	3301      	adds	r3, #1
 8006386:	069b      	lsls	r3, r3, #26
 8006388:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800638c:	e015      	b.n	80063ba <HAL_ADC_ConfigChannel+0x4ee>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006396:	fa93 f3a3 	rbit	r3, r3
 800639a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800639c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800639e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80063a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80063a6:	2320      	movs	r3, #32
 80063a8:	e003      	b.n	80063b2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80063aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063ac:	fab3 f383 	clz	r3, r3
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	3301      	adds	r3, #1
 80063b4:	069b      	lsls	r3, r3, #26
 80063b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <HAL_ADC_ConfigChannel+0x50e>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	0e9b      	lsrs	r3, r3, #26
 80063cc:	3301      	adds	r3, #1
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	2101      	movs	r1, #1
 80063d4:	fa01 f303 	lsl.w	r3, r1, r3
 80063d8:	e017      	b.n	800640a <HAL_ADC_ConfigChannel+0x53e>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e2:	fa93 f3a3 	rbit	r3, r3
 80063e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80063e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80063ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80063f2:	2320      	movs	r3, #32
 80063f4:	e003      	b.n	80063fe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80063f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063f8:	fab3 f383 	clz	r3, r3
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	3301      	adds	r3, #1
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	2101      	movs	r1, #1
 8006406:	fa01 f303 	lsl.w	r3, r1, r3
 800640a:	ea42 0103 	orr.w	r1, r2, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <HAL_ADC_ConfigChannel+0x564>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	0e9b      	lsrs	r3, r3, #26
 8006420:	3301      	adds	r3, #1
 8006422:	f003 021f 	and.w	r2, r3, #31
 8006426:	4613      	mov	r3, r2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	4413      	add	r3, r2
 800642c:	051b      	lsls	r3, r3, #20
 800642e:	e018      	b.n	8006462 <HAL_ADC_ConfigChannel+0x596>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006438:	fa93 f3a3 	rbit	r3, r3
 800643c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8006448:	2320      	movs	r3, #32
 800644a:	e003      	b.n	8006454 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	fab3 f383 	clz	r3, r3
 8006452:	b2db      	uxtb	r3, r3
 8006454:	3301      	adds	r3, #1
 8006456:	f003 021f 	and.w	r2, r3, #31
 800645a:	4613      	mov	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	4413      	add	r3, r2
 8006460:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006462:	430b      	orrs	r3, r1
 8006464:	e081      	b.n	800656a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <HAL_ADC_ConfigChannel+0x5b6>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	0e9b      	lsrs	r3, r3, #26
 8006478:	3301      	adds	r3, #1
 800647a:	069b      	lsls	r3, r3, #26
 800647c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006480:	e015      	b.n	80064ae <HAL_ADC_ConfigChannel+0x5e2>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648a:	fa93 f3a3 	rbit	r3, r3
 800648e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800649a:	2320      	movs	r3, #32
 800649c:	e003      	b.n	80064a6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800649e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a0:	fab3 f383 	clz	r3, r3
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	3301      	adds	r3, #1
 80064a8:	069b      	lsls	r3, r3, #26
 80064aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <HAL_ADC_ConfigChannel+0x602>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	0e9b      	lsrs	r3, r3, #26
 80064c0:	3301      	adds	r3, #1
 80064c2:	f003 031f 	and.w	r3, r3, #31
 80064c6:	2101      	movs	r1, #1
 80064c8:	fa01 f303 	lsl.w	r3, r1, r3
 80064cc:	e017      	b.n	80064fe <HAL_ADC_ConfigChannel+0x632>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	fa93 f3a3 	rbit	r3, r3
 80064da:	61bb      	str	r3, [r7, #24]
  return result;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80064e6:	2320      	movs	r3, #32
 80064e8:	e003      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	fab3 f383 	clz	r3, r3
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	3301      	adds	r3, #1
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	2101      	movs	r1, #1
 80064fa:	fa01 f303 	lsl.w	r3, r1, r3
 80064fe:	ea42 0103 	orr.w	r1, r2, r3
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10d      	bne.n	800652a <HAL_ADC_ConfigChannel+0x65e>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	0e9b      	lsrs	r3, r3, #26
 8006514:	3301      	adds	r3, #1
 8006516:	f003 021f 	and.w	r2, r3, #31
 800651a:	4613      	mov	r3, r2
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	4413      	add	r3, r2
 8006520:	3b1e      	subs	r3, #30
 8006522:	051b      	lsls	r3, r3, #20
 8006524:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006528:	e01e      	b.n	8006568 <HAL_ADC_ConfigChannel+0x69c>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	fa93 f3a3 	rbit	r3, r3
 8006536:	60fb      	str	r3, [r7, #12]
  return result;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8006542:	2320      	movs	r3, #32
 8006544:	e006      	b.n	8006554 <HAL_ADC_ConfigChannel+0x688>
 8006546:	bf00      	nop
 8006548:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	fab3 f383 	clz	r3, r3
 8006552:	b2db      	uxtb	r3, r3
 8006554:	3301      	adds	r3, #1
 8006556:	f003 021f 	and.w	r2, r3, #31
 800655a:	4613      	mov	r3, r2
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	4413      	add	r3, r2
 8006560:	3b1e      	subs	r3, #30
 8006562:	051b      	lsls	r3, r3, #20
 8006564:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006568:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800656e:	4619      	mov	r1, r3
 8006570:	f7ff f81e 	bl	80055b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	4b44      	ldr	r3, [pc, #272]	@ (800668c <HAL_ADC_ConfigChannel+0x7c0>)
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d07a      	beq.n	8006676 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006580:	4843      	ldr	r0, [pc, #268]	@ (8006690 <HAL_ADC_ConfigChannel+0x7c4>)
 8006582:	f7fe ff73 	bl	800546c <LL_ADC_GetCommonPathInternalCh>
 8006586:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a41      	ldr	r2, [pc, #260]	@ (8006694 <HAL_ADC_ConfigChannel+0x7c8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d12c      	bne.n	80065ee <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006594:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d126      	bne.n	80065ee <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006698 <HAL_ADC_ConfigChannel+0x7cc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_ADC_ConfigChannel+0x6e8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a3b      	ldr	r2, [pc, #236]	@ (800669c <HAL_ADC_ConfigChannel+0x7d0>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d15d      	bne.n	8006670 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80065bc:	4619      	mov	r1, r3
 80065be:	4834      	ldr	r0, [pc, #208]	@ (8006690 <HAL_ADC_ConfigChannel+0x7c4>)
 80065c0:	f7fe ff41 	bl	8005446 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065c4:	4b36      	ldr	r3, [pc, #216]	@ (80066a0 <HAL_ADC_ConfigChannel+0x7d4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	099b      	lsrs	r3, r3, #6
 80065ca:	4a36      	ldr	r2, [pc, #216]	@ (80066a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80065cc:	fba2 2303 	umull	r2, r3, r2, r3
 80065d0:	099b      	lsrs	r3, r3, #6
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	4613      	mov	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4413      	add	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80065de:	e002      	b.n	80065e6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f9      	bne.n	80065e0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065ec:	e040      	b.n	8006670 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a2d      	ldr	r2, [pc, #180]	@ (80066a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d118      	bne.n	800662a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80065f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d112      	bne.n	800662a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a23      	ldr	r2, [pc, #140]	@ (8006698 <HAL_ADC_ConfigChannel+0x7cc>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <HAL_ADC_ConfigChannel+0x74c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a22      	ldr	r2, [pc, #136]	@ (800669c <HAL_ADC_ConfigChannel+0x7d0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d12d      	bne.n	8006674 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006618:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800661c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006620:	4619      	mov	r1, r3
 8006622:	481b      	ldr	r0, [pc, #108]	@ (8006690 <HAL_ADC_ConfigChannel+0x7c4>)
 8006624:	f7fe ff0f 	bl	8005446 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006628:	e024      	b.n	8006674 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1f      	ldr	r2, [pc, #124]	@ (80066ac <HAL_ADC_ConfigChannel+0x7e0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d120      	bne.n	8006676 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d11a      	bne.n	8006676 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a14      	ldr	r2, [pc, #80]	@ (8006698 <HAL_ADC_ConfigChannel+0x7cc>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d115      	bne.n	8006676 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800664a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800664e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006652:	4619      	mov	r1, r3
 8006654:	480e      	ldr	r0, [pc, #56]	@ (8006690 <HAL_ADC_ConfigChannel+0x7c4>)
 8006656:	f7fe fef6 	bl	8005446 <LL_ADC_SetCommonPathInternalCh>
 800665a:	e00c      	b.n	8006676 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006660:	f043 0220 	orr.w	r2, r3, #32
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800666e:	e002      	b.n	8006676 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006674:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800667e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006682:	4618      	mov	r0, r3
 8006684:	37d8      	adds	r7, #216	@ 0xd8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	80080000 	.word	0x80080000
 8006690:	50040300 	.word	0x50040300
 8006694:	c7520000 	.word	0xc7520000
 8006698:	50040000 	.word	0x50040000
 800669c:	50040200 	.word	0x50040200
 80066a0:	20000028 	.word	0x20000028
 80066a4:	053e2d63 	.word	0x053e2d63
 80066a8:	cb840000 	.word	0xcb840000
 80066ac:	80000001 	.word	0x80000001

080066b0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff f8a2 	bl	8005810 <LL_ADC_REG_IsConversionOngoing>
 80066cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff f8c3 	bl	800585e <LL_ADC_INJ_IsConversionOngoing>
 80066d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d103      	bne.n	80066e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 8098 	beq.w	8006818 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d02a      	beq.n	800674c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	7e5b      	ldrb	r3, [r3, #25]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d126      	bne.n	800674c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	7e1b      	ldrb	r3, [r3, #24]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d122      	bne.n	800674c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006706:	2301      	movs	r3, #1
 8006708:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800670a:	e014      	b.n	8006736 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	4a45      	ldr	r2, [pc, #276]	@ (8006824 <ADC_ConversionStop+0x174>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d90d      	bls.n	8006730 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006718:	f043 0210 	orr.w	r2, r3, #16
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006724:	f043 0201 	orr.w	r2, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e074      	b.n	800681a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	3301      	adds	r3, #1
 8006734:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006740:	2b40      	cmp	r3, #64	@ 0x40
 8006742:	d1e3      	bne.n	800670c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2240      	movs	r2, #64	@ 0x40
 800674a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d014      	beq.n	800677c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff f85a 	bl	8005810 <LL_ADC_REG_IsConversionOngoing>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00c      	beq.n	800677c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff f817 	bl	800579a <LL_ADC_IsDisableOngoing>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff f836 	bl	80057e8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d014      	beq.n	80067ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff f869 	bl	800585e <LL_ADC_INJ_IsConversionOngoing>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00c      	beq.n	80067ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe ffff 	bl	800579a <LL_ADC_IsDisableOngoing>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff f845 	bl	8005836 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d005      	beq.n	80067be <ADC_ConversionStop+0x10e>
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d105      	bne.n	80067c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80067b8:	230c      	movs	r3, #12
 80067ba:	617b      	str	r3, [r7, #20]
        break;
 80067bc:	e005      	b.n	80067ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80067be:	2308      	movs	r3, #8
 80067c0:	617b      	str	r3, [r7, #20]
        break;
 80067c2:	e002      	b.n	80067ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80067c4:	2304      	movs	r3, #4
 80067c6:	617b      	str	r3, [r7, #20]
        break;
 80067c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80067ca:	f7fe fdf9 	bl	80053c0 <HAL_GetTick>
 80067ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80067d0:	e01b      	b.n	800680a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80067d2:	f7fe fdf5 	bl	80053c0 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b05      	cmp	r3, #5
 80067de:	d914      	bls.n	800680a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00d      	beq.n	800680a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f2:	f043 0210 	orr.w	r2, r3, #16
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067fe:	f043 0201 	orr.w	r2, r3, #1
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e007      	b.n	800681a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	4013      	ands	r3, r2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1dc      	bne.n	80067d2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3720      	adds	r7, #32
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	a33fffff 	.word	0xa33fffff

08006828 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006830:	2300      	movs	r3, #0
 8006832:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe ff9b 	bl	8005774 <LL_ADC_IsEnabled>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d169      	bne.n	8006918 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	4b36      	ldr	r3, [pc, #216]	@ (8006924 <ADC_Enable+0xfc>)
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00d      	beq.n	800686e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006856:	f043 0210 	orr.w	r2, r3, #16
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006862:	f043 0201 	orr.w	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e055      	b.n	800691a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f7fe ff56 	bl	8005724 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006878:	482b      	ldr	r0, [pc, #172]	@ (8006928 <ADC_Enable+0x100>)
 800687a:	f7fe fdf7 	bl	800546c <LL_ADC_GetCommonPathInternalCh>
 800687e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006880:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006884:	2b00      	cmp	r3, #0
 8006886:	d013      	beq.n	80068b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006888:	4b28      	ldr	r3, [pc, #160]	@ (800692c <ADC_Enable+0x104>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	099b      	lsrs	r3, r3, #6
 800688e:	4a28      	ldr	r2, [pc, #160]	@ (8006930 <ADC_Enable+0x108>)
 8006890:	fba2 2303 	umull	r2, r3, r2, r3
 8006894:	099b      	lsrs	r3, r3, #6
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	4613      	mov	r3, r2
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80068a2:	e002      	b.n	80068aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1f9      	bne.n	80068a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80068b0:	f7fe fd86 	bl	80053c0 <HAL_GetTick>
 80068b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068b6:	e028      	b.n	800690a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe ff59 	bl	8005774 <LL_ADC_IsEnabled>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe ff29 	bl	8005724 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80068d2:	f7fe fd75 	bl	80053c0 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d914      	bls.n	800690a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d00d      	beq.n	800690a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f2:	f043 0210 	orr.w	r2, r3, #16
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068fe:	f043 0201 	orr.w	r2, r3, #1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e007      	b.n	800691a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b01      	cmp	r3, #1
 8006916:	d1cf      	bne.n	80068b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	8000003f 	.word	0x8000003f
 8006928:	50040300 	.word	0x50040300
 800692c:	20000028 	.word	0x20000028
 8006930:	053e2d63 	.word	0x053e2d63

08006934 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe ff2a 	bl	800579a <LL_ADC_IsDisableOngoing>
 8006946:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f7fe ff11 	bl	8005774 <LL_ADC_IsEnabled>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d047      	beq.n	80069e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d144      	bne.n	80069e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 030d 	and.w	r3, r3, #13
 8006968:	2b01      	cmp	r3, #1
 800696a:	d10c      	bne.n	8006986 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe feeb 	bl	800574c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2203      	movs	r2, #3
 800697c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800697e:	f7fe fd1f 	bl	80053c0 <HAL_GetTick>
 8006982:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006984:	e029      	b.n	80069da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698a:	f043 0210 	orr.w	r2, r3, #16
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006996:	f043 0201 	orr.w	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e023      	b.n	80069ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80069a2:	f7fe fd0d 	bl	80053c0 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d914      	bls.n	80069da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00d      	beq.n	80069da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c2:	f043 0210 	orr.w	r2, r3, #16
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ce:	f043 0201 	orr.w	r2, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e007      	b.n	80069ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1dc      	bne.n	80069a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <LL_ADC_StartCalibration>:
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006a04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	609a      	str	r2, [r3, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <LL_ADC_IsCalibrationOnGoing>:
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a38:	d101      	bne.n	8006a3e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_ADCEx_Calibration_Start+0x1c>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e04d      	b.n	8006b04 <HAL_ADCEx_Calibration_Start+0xb8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff5f 	bl	8006934 <ADC_Disable>
 8006a76:	4603      	mov	r3, r0
 8006a78:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d136      	bne.n	8006aee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a84:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006a88:	f023 0302 	bic.w	r3, r3, #2
 8006a8c:	f043 0202 	orr.w	r2, r3, #2
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff ffa9 	bl	80069f2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006aa0:	e014      	b.n	8006acc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8006aae:	d30d      	bcc.n	8006acc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab4:	f023 0312 	bic.w	r3, r3, #18
 8006ab8:	f043 0210 	orr.w	r2, r3, #16
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e01b      	b.n	8006b04 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff ffa7 	bl	8006a24 <LL_ADC_IsCalibrationOnGoing>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e2      	bne.n	8006aa2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae0:	f023 0303 	bic.w	r3, r3, #3
 8006ae4:	f043 0201 	orr.w	r2, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	655a      	str	r2, [r3, #84]	@ 0x54
 8006aec:	e005      	b.n	8006afa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af2:	f043 0210 	orr.w	r2, r3, #16
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b50 <__NVIC_SetPriorityGrouping+0x44>)
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006b28:	4013      	ands	r3, r2
 8006b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b3e:	4a04      	ldr	r2, [pc, #16]	@ (8006b50 <__NVIC_SetPriorityGrouping+0x44>)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	60d3      	str	r3, [r2, #12]
}
 8006b44:	bf00      	nop
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	e000ed00 	.word	0xe000ed00

08006b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b58:	4b04      	ldr	r3, [pc, #16]	@ (8006b6c <__NVIC_GetPriorityGrouping+0x18>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	0a1b      	lsrs	r3, r3, #8
 8006b5e:	f003 0307 	and.w	r3, r3, #7
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	e000ed00 	.word	0xe000ed00

08006b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	6039      	str	r1, [r7, #0]
 8006b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	db0a      	blt.n	8006b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	490c      	ldr	r1, [pc, #48]	@ (8006bbc <__NVIC_SetPriority+0x4c>)
 8006b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b8e:	0112      	lsls	r2, r2, #4
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	440b      	add	r3, r1
 8006b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b98:	e00a      	b.n	8006bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	4908      	ldr	r1, [pc, #32]	@ (8006bc0 <__NVIC_SetPriority+0x50>)
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	f003 030f 	and.w	r3, r3, #15
 8006ba6:	3b04      	subs	r3, #4
 8006ba8:	0112      	lsls	r2, r2, #4
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	440b      	add	r3, r1
 8006bae:	761a      	strb	r2, [r3, #24]
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	e000e100 	.word	0xe000e100
 8006bc0:	e000ed00 	.word	0xe000ed00

08006bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b089      	sub	sp, #36	@ 0x24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	f1c3 0307 	rsb	r3, r3, #7
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	bf28      	it	cs
 8006be2:	2304      	movcs	r3, #4
 8006be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	3304      	adds	r3, #4
 8006bea:	2b06      	cmp	r3, #6
 8006bec:	d902      	bls.n	8006bf4 <NVIC_EncodePriority+0x30>
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	3b03      	subs	r3, #3
 8006bf2:	e000      	b.n	8006bf6 <NVIC_EncodePriority+0x32>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006c02:	43da      	mvns	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	401a      	ands	r2, r3
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	fa01 f303 	lsl.w	r3, r1, r3
 8006c16:	43d9      	mvns	r1, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c1c:	4313      	orrs	r3, r2
         );
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3724      	adds	r7, #36	@ 0x24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
	...

08006c2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006c30:	f3bf 8f4f 	dsb	sy
}
 8006c34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006c36:	4b06      	ldr	r3, [pc, #24]	@ (8006c50 <__NVIC_SystemReset+0x24>)
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006c3e:	4904      	ldr	r1, [pc, #16]	@ (8006c50 <__NVIC_SystemReset+0x24>)
 8006c40:	4b04      	ldr	r3, [pc, #16]	@ (8006c54 <__NVIC_SystemReset+0x28>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c46:	f3bf 8f4f 	dsb	sy
}
 8006c4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006c4c:	bf00      	nop
 8006c4e:	e7fd      	b.n	8006c4c <__NVIC_SystemReset+0x20>
 8006c50:	e000ed00 	.word	0xe000ed00
 8006c54:	05fa0004 	.word	0x05fa0004

08006c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c68:	d301      	bcc.n	8006c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e00f      	b.n	8006c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8006c98 <SysTick_Config+0x40>)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c76:	210f      	movs	r1, #15
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7c:	f7ff ff78 	bl	8006b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c80:	4b05      	ldr	r3, [pc, #20]	@ (8006c98 <SysTick_Config+0x40>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c86:	4b04      	ldr	r3, [pc, #16]	@ (8006c98 <SysTick_Config+0x40>)
 8006c88:	2207      	movs	r2, #7
 8006c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	e000e010 	.word	0xe000e010

08006c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff ff31 	bl	8006b0c <__NVIC_SetPriorityGrouping>
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b086      	sub	sp, #24
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	4603      	mov	r3, r0
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
 8006cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006cc4:	f7ff ff46 	bl	8006b54 <__NVIC_GetPriorityGrouping>
 8006cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	6978      	ldr	r0, [r7, #20]
 8006cd0:	f7ff ff78 	bl	8006bc4 <NVIC_EncodePriority>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff ff47 	bl	8006b70 <__NVIC_SetPriority>
}
 8006ce2:	bf00      	nop
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006cee:	f7ff ff9d 	bl	8006c2c <__NVIC_SystemReset>

08006cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff ffac 	bl	8006c58 <SysTick_Config>
 8006d00:	4603      	mov	r3, r0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8006ddc <HAL_FLASH_Program+0xd0>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_FLASH_Program+0x1e>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e053      	b.n	8006dd2 <HAL_FLASH_Program+0xc6>
 8006d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8006ddc <HAL_FLASH_Program+0xd0>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006d30:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006d34:	f000 f888 	bl	8006e48 <FLASH_WaitForLastOperation>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d143      	bne.n	8006dca <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006d42:	4b26      	ldr	r3, [pc, #152]	@ (8006ddc <HAL_FLASH_Program+0xd0>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006d48:	4b25      	ldr	r3, [pc, #148]	@ (8006de0 <HAL_FLASH_Program+0xd4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d009      	beq.n	8006d68 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006d54:	4b22      	ldr	r3, [pc, #136]	@ (8006de0 <HAL_FLASH_Program+0xd4>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a21      	ldr	r2, [pc, #132]	@ (8006de0 <HAL_FLASH_Program+0xd4>)
 8006d5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d5e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006d60:	4b1e      	ldr	r3, [pc, #120]	@ (8006ddc <HAL_FLASH_Program+0xd0>)
 8006d62:	2202      	movs	r2, #2
 8006d64:	771a      	strb	r2, [r3, #28]
 8006d66:	e002      	b.n	8006d6e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006d68:	4b1c      	ldr	r3, [pc, #112]	@ (8006ddc <HAL_FLASH_Program+0xd0>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d107      	bne.n	8006d84 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d78:	68b8      	ldr	r0, [r7, #8]
 8006d7a:	f000 f8bb 	bl	8006ef4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	e010      	b.n	8006da6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d002      	beq.n	8006d90 <HAL_FLASH_Program+0x84>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d10a      	bne.n	8006da6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	4619      	mov	r1, r3
 8006d94:	68b8      	ldr	r0, [r7, #8]
 8006d96:	f000 f8d3 	bl	8006f40 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d102      	bne.n	8006da6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006da0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006da4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006da6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006daa:	f000 f84d 	bl	8006e48 <FLASH_WaitForLastOperation>
 8006dae:	4603      	mov	r3, r0
 8006db0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d006      	beq.n	8006dc6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006db8:	4b09      	ldr	r3, [pc, #36]	@ (8006de0 <HAL_FLASH_Program+0xd4>)
 8006dba:	695a      	ldr	r2, [r3, #20]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	43db      	mvns	r3, r3
 8006dc0:	4907      	ldr	r1, [pc, #28]	@ (8006de0 <HAL_FLASH_Program+0xd4>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006dc6:	f000 f9eb 	bl	80071a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006dca:	4b04      	ldr	r3, [pc, #16]	@ (8006ddc <HAL_FLASH_Program+0xd0>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]

  return status;
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000034 	.word	0x20000034
 8006de0:	40022000 	.word	0x40022000

08006de4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006dee:	4b0b      	ldr	r3, [pc, #44]	@ (8006e1c <HAL_FLASH_Unlock+0x38>)
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da0b      	bge.n	8006e0e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006df6:	4b09      	ldr	r3, [pc, #36]	@ (8006e1c <HAL_FLASH_Unlock+0x38>)
 8006df8:	4a09      	ldr	r2, [pc, #36]	@ (8006e20 <HAL_FLASH_Unlock+0x3c>)
 8006dfa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006dfc:	4b07      	ldr	r3, [pc, #28]	@ (8006e1c <HAL_FLASH_Unlock+0x38>)
 8006dfe:	4a09      	ldr	r2, [pc, #36]	@ (8006e24 <HAL_FLASH_Unlock+0x40>)
 8006e00:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006e02:	4b06      	ldr	r3, [pc, #24]	@ (8006e1c <HAL_FLASH_Unlock+0x38>)
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	da01      	bge.n	8006e0e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40022000 	.word	0x40022000
 8006e20:	45670123 	.word	0x45670123
 8006e24:	cdef89ab 	.word	0xcdef89ab

08006e28 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006e2c:	4b05      	ldr	r3, [pc, #20]	@ (8006e44 <HAL_FLASH_Lock+0x1c>)
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	4a04      	ldr	r2, [pc, #16]	@ (8006e44 <HAL_FLASH_Lock+0x1c>)
 8006e32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e36:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	40022000 	.word	0x40022000

08006e48 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006e50:	f7fe fab6 	bl	80053c0 <HAL_GetTick>
 8006e54:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006e56:	e00d      	b.n	8006e74 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5e:	d009      	beq.n	8006e74 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8006e60:	f7fe faae 	bl	80053c0 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d801      	bhi.n	8006e74 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e036      	b.n	8006ee2 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006e74:	4b1d      	ldr	r3, [pc, #116]	@ (8006eec <FLASH_WaitForLastOperation+0xa4>)
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1eb      	bne.n	8006e58 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006e80:	4b1a      	ldr	r3, [pc, #104]	@ (8006eec <FLASH_WaitForLastOperation+0xa4>)
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8006e88:	4013      	ands	r3, r2
 8006e8a:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d01d      	beq.n	8006ece <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8006e92:	4b17      	ldr	r3, [pc, #92]	@ (8006ef0 <FLASH_WaitForLastOperation+0xa8>)
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	4a15      	ldr	r2, [pc, #84]	@ (8006ef0 <FLASH_WaitForLastOperation+0xa8>)
 8006e9c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea4:	d307      	bcc.n	8006eb6 <FLASH_WaitForLastOperation+0x6e>
 8006ea6:	4b11      	ldr	r3, [pc, #68]	@ (8006eec <FLASH_WaitForLastOperation+0xa4>)
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006eb0:	490e      	ldr	r1, [pc, #56]	@ (8006eec <FLASH_WaitForLastOperation+0xa4>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	618b      	str	r3, [r1, #24]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <FLASH_WaitForLastOperation+0x82>
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8006eec <FLASH_WaitForLastOperation+0xa4>)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006ec8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e009      	b.n	8006ee2 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006ece:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <FLASH_WaitForLastOperation+0xa4>)
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006eda:	4b04      	ldr	r3, [pc, #16]	@ (8006eec <FLASH_WaitForLastOperation+0xa4>)
 8006edc:	2201      	movs	r2, #1
 8006ede:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	40022000 	.word	0x40022000
 8006ef0:	20000034 	.word	0x20000034

08006ef4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006f00:	4b0e      	ldr	r3, [pc, #56]	@ (8006f3c <FLASH_Program_DoubleWord+0x48>)
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	4a0d      	ldr	r2, [pc, #52]	@ (8006f3c <FLASH_Program_DoubleWord+0x48>)
 8006f06:	f043 0301 	orr.w	r3, r3, #1
 8006f0a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006f12:	f3bf 8f6f 	isb	sy
}
 8006f16:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f1c:	f04f 0200 	mov.w	r2, #0
 8006f20:	f04f 0300 	mov.w	r3, #0
 8006f24:	000a      	movs	r2, r1
 8006f26:	2300      	movs	r3, #0
 8006f28:	68f9      	ldr	r1, [r7, #12]
 8006f2a:	3104      	adds	r1, #4
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	600b      	str	r3, [r1, #0]
}
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40022000 	.word	0x40022000

08006f40 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b089      	sub	sp, #36	@ 0x24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006f4a:	2340      	movs	r3, #64	@ 0x40
 8006f4c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006f56:	4b14      	ldr	r3, [pc, #80]	@ (8006fa8 <FLASH_Program_Fast+0x68>)
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	4a13      	ldr	r2, [pc, #76]	@ (8006fa8 <FLASH_Program_Fast+0x68>)
 8006f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f60:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f62:	f3ef 8310 	mrs	r3, PRIMASK
 8006f66:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f68:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f6c:	b672      	cpsid	i
}
 8006f6e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	3304      	adds	r3, #4
 8006f82:	617b      	str	r3, [r7, #20]
    row_index--;
 8006f84:	7ffb      	ldrb	r3, [r7, #31]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8006f8a:	7ffb      	ldrb	r3, [r7, #31]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1ef      	bne.n	8006f70 <FLASH_Program_Fast+0x30>
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f383 8810 	msr	PRIMASK, r3
}
 8006f9a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8006f9c:	bf00      	nop
 8006f9e:	3724      	adds	r7, #36	@ 0x24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	40022000 	.word	0x40022000

08006fac <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006fb6:	4b49      	ldr	r3, [pc, #292]	@ (80070dc <HAL_FLASHEx_Erase+0x130>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <HAL_FLASHEx_Erase+0x16>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e087      	b.n	80070d2 <HAL_FLASHEx_Erase+0x126>
 8006fc2:	4b46      	ldr	r3, [pc, #280]	@ (80070dc <HAL_FLASHEx_Erase+0x130>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006fc8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006fcc:	f7ff ff3c 	bl	8006e48 <FLASH_WaitForLastOperation>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d177      	bne.n	80070ca <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006fda:	4b40      	ldr	r3, [pc, #256]	@ (80070dc <HAL_FLASHEx_Erase+0x130>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80070e0 <HAL_FLASHEx_Erase+0x134>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d013      	beq.n	8007014 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006fec:	4b3c      	ldr	r3, [pc, #240]	@ (80070e0 <HAL_FLASHEx_Erase+0x134>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006ff8:	4b39      	ldr	r3, [pc, #228]	@ (80070e0 <HAL_FLASHEx_Erase+0x134>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a38      	ldr	r2, [pc, #224]	@ (80070e0 <HAL_FLASHEx_Erase+0x134>)
 8006ffe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007002:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007004:	4b35      	ldr	r3, [pc, #212]	@ (80070dc <HAL_FLASHEx_Erase+0x130>)
 8007006:	2203      	movs	r2, #3
 8007008:	771a      	strb	r2, [r3, #28]
 800700a:	e016      	b.n	800703a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800700c:	4b33      	ldr	r3, [pc, #204]	@ (80070dc <HAL_FLASHEx_Erase+0x130>)
 800700e:	2201      	movs	r2, #1
 8007010:	771a      	strb	r2, [r3, #28]
 8007012:	e012      	b.n	800703a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007014:	4b32      	ldr	r3, [pc, #200]	@ (80070e0 <HAL_FLASHEx_Erase+0x134>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007020:	4b2f      	ldr	r3, [pc, #188]	@ (80070e0 <HAL_FLASHEx_Erase+0x134>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a2e      	ldr	r2, [pc, #184]	@ (80070e0 <HAL_FLASHEx_Erase+0x134>)
 8007026:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800702a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800702c:	4b2b      	ldr	r3, [pc, #172]	@ (80070dc <HAL_FLASHEx_Erase+0x130>)
 800702e:	2202      	movs	r2, #2
 8007030:	771a      	strb	r2, [r3, #28]
 8007032:	e002      	b.n	800703a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007034:	4b29      	ldr	r3, [pc, #164]	@ (80070dc <HAL_FLASHEx_Erase+0x130>)
 8007036:	2200      	movs	r2, #0
 8007038:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d113      	bne.n	800706a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	4618      	mov	r0, r3
 8007048:	f000 f84c 	bl	80070e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800704c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007050:	f7ff fefa 	bl	8006e48 <FLASH_WaitForLastOperation>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8007058:	4b21      	ldr	r3, [pc, #132]	@ (80070e0 <HAL_FLASHEx_Erase+0x134>)
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	4a20      	ldr	r2, [pc, #128]	@ (80070e0 <HAL_FLASHEx_Erase+0x134>)
 800705e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007062:	f023 0304 	bic.w	r3, r3, #4
 8007066:	6153      	str	r3, [r2, #20]
 8007068:	e02d      	b.n	80070c6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	f04f 32ff 	mov.w	r2, #4294967295
 8007070:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	60bb      	str	r3, [r7, #8]
 8007078:	e01d      	b.n	80070b6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	4619      	mov	r1, r3
 8007080:	68b8      	ldr	r0, [r7, #8]
 8007082:	f000 f857 	bl	8007134 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007086:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800708a:	f7ff fedd 	bl	8006e48 <FLASH_WaitForLastOperation>
 800708e:	4603      	mov	r3, r0
 8007090:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007092:	4b13      	ldr	r3, [pc, #76]	@ (80070e0 <HAL_FLASHEx_Erase+0x134>)
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	4a12      	ldr	r2, [pc, #72]	@ (80070e0 <HAL_FLASHEx_Erase+0x134>)
 8007098:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800709c:	f023 0302 	bic.w	r3, r3, #2
 80070a0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	601a      	str	r2, [r3, #0]
          break;
 80070ae:	e00a      	b.n	80070c6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	3301      	adds	r3, #1
 80070b4:	60bb      	str	r3, [r7, #8]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d3d9      	bcc.n	800707a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80070c6:	f000 f86b 	bl	80071a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80070ca:	4b04      	ldr	r3, [pc, #16]	@ (80070dc <HAL_FLASHEx_Erase+0x130>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	701a      	strb	r2, [r3, #0]

  return status;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000034 	.word	0x20000034
 80070e0:	40022000 	.word	0x40022000

080070e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80070f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007130 <FLASH_MassErase+0x4c>)
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	4a0d      	ldr	r2, [pc, #52]	@ (8007130 <FLASH_MassErase+0x4c>)
 80070fc:	f043 0304 	orr.w	r3, r3, #4
 8007100:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800710c:	4b08      	ldr	r3, [pc, #32]	@ (8007130 <FLASH_MassErase+0x4c>)
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	4a07      	ldr	r2, [pc, #28]	@ (8007130 <FLASH_MassErase+0x4c>)
 8007112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007116:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007118:	4b05      	ldr	r3, [pc, #20]	@ (8007130 <FLASH_MassErase+0x4c>)
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	4a04      	ldr	r2, [pc, #16]	@ (8007130 <FLASH_MassErase+0x4c>)
 800711e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007122:	6153      	str	r3, [r2, #20]
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	40022000 	.word	0x40022000

08007134 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d006      	beq.n	8007156 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8007148:	4b14      	ldr	r3, [pc, #80]	@ (800719c <FLASH_PageErase+0x68>)
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	4a13      	ldr	r2, [pc, #76]	@ (800719c <FLASH_PageErase+0x68>)
 800714e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007152:	6153      	str	r3, [r2, #20]
 8007154:	e005      	b.n	8007162 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8007156:	4b11      	ldr	r3, [pc, #68]	@ (800719c <FLASH_PageErase+0x68>)
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	4a10      	ldr	r2, [pc, #64]	@ (800719c <FLASH_PageErase+0x68>)
 800715c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007160:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007162:	4b0e      	ldr	r3, [pc, #56]	@ (800719c <FLASH_PageErase+0x68>)
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8007172:	490a      	ldr	r1, [pc, #40]	@ (800719c <FLASH_PageErase+0x68>)
 8007174:	4313      	orrs	r3, r2
 8007176:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007178:	4b08      	ldr	r3, [pc, #32]	@ (800719c <FLASH_PageErase+0x68>)
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	4a07      	ldr	r2, [pc, #28]	@ (800719c <FLASH_PageErase+0x68>)
 800717e:	f043 0302 	orr.w	r3, r3, #2
 8007182:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007184:	4b05      	ldr	r3, [pc, #20]	@ (800719c <FLASH_PageErase+0x68>)
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	4a04      	ldr	r2, [pc, #16]	@ (800719c <FLASH_PageErase+0x68>)
 800718a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800718e:	6153      	str	r3, [r2, #20]
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	40022000 	.word	0x40022000

080071a0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80071a6:	4b21      	ldr	r3, [pc, #132]	@ (800722c <FLASH_FlushCaches+0x8c>)
 80071a8:	7f1b      	ldrb	r3, [r3, #28]
 80071aa:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d002      	beq.n	80071b8 <FLASH_FlushCaches+0x18>
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d117      	bne.n	80071e8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80071b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007230 <FLASH_FlushCaches+0x90>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007230 <FLASH_FlushCaches+0x90>)
 80071be:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071c2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80071c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007230 <FLASH_FlushCaches+0x90>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a19      	ldr	r2, [pc, #100]	@ (8007230 <FLASH_FlushCaches+0x90>)
 80071ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	4b17      	ldr	r3, [pc, #92]	@ (8007230 <FLASH_FlushCaches+0x90>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a16      	ldr	r2, [pc, #88]	@ (8007230 <FLASH_FlushCaches+0x90>)
 80071d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071dc:	4b14      	ldr	r3, [pc, #80]	@ (8007230 <FLASH_FlushCaches+0x90>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a13      	ldr	r2, [pc, #76]	@ (8007230 <FLASH_FlushCaches+0x90>)
 80071e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071e6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d002      	beq.n	80071f4 <FLASH_FlushCaches+0x54>
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d111      	bne.n	8007218 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80071f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007230 <FLASH_FlushCaches+0x90>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a0d      	ldr	r2, [pc, #52]	@ (8007230 <FLASH_FlushCaches+0x90>)
 80071fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	4b0b      	ldr	r3, [pc, #44]	@ (8007230 <FLASH_FlushCaches+0x90>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a0a      	ldr	r2, [pc, #40]	@ (8007230 <FLASH_FlushCaches+0x90>)
 8007206:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800720a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800720c:	4b08      	ldr	r3, [pc, #32]	@ (8007230 <FLASH_FlushCaches+0x90>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a07      	ldr	r2, [pc, #28]	@ (8007230 <FLASH_FlushCaches+0x90>)
 8007212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007216:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007218:	4b04      	ldr	r3, [pc, #16]	@ (800722c <FLASH_FlushCaches+0x8c>)
 800721a:	2200      	movs	r2, #0
 800721c:	771a      	strb	r2, [r3, #28]
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20000034 	.word	0x20000034
 8007230:	40022000 	.word	0x40022000

08007234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007242:	e17f      	b.n	8007544 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	2101      	movs	r1, #1
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	fa01 f303 	lsl.w	r3, r1, r3
 8007250:	4013      	ands	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 8171 	beq.w	800753e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f003 0303 	and.w	r3, r3, #3
 8007264:	2b01      	cmp	r3, #1
 8007266:	d005      	beq.n	8007274 <HAL_GPIO_Init+0x40>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f003 0303 	and.w	r3, r3, #3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d130      	bne.n	80072d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	2203      	movs	r2, #3
 8007280:	fa02 f303 	lsl.w	r3, r2, r3
 8007284:	43db      	mvns	r3, r3
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4013      	ands	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	fa02 f303 	lsl.w	r3, r2, r3
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072aa:	2201      	movs	r2, #1
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	fa02 f303 	lsl.w	r3, r2, r3
 80072b2:	43db      	mvns	r3, r3
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4013      	ands	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	091b      	lsrs	r3, r3, #4
 80072c0:	f003 0201 	and.w	r2, r3, #1
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d118      	bne.n	8007314 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80072e8:	2201      	movs	r2, #1
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	43db      	mvns	r3, r3
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4013      	ands	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	08db      	lsrs	r3, r3, #3
 80072fe:	f003 0201 	and.w	r2, r3, #1
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f003 0303 	and.w	r3, r3, #3
 800731c:	2b03      	cmp	r3, #3
 800731e:	d017      	beq.n	8007350 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	2203      	movs	r2, #3
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	43db      	mvns	r3, r3
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4013      	ands	r3, r2
 8007336:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	fa02 f303 	lsl.w	r3, r2, r3
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f003 0303 	and.w	r3, r3, #3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d123      	bne.n	80073a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	08da      	lsrs	r2, r3, #3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3208      	adds	r2, #8
 8007364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007368:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	220f      	movs	r2, #15
 8007374:	fa02 f303 	lsl.w	r3, r2, r3
 8007378:	43db      	mvns	r3, r3
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4013      	ands	r3, r2
 800737e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	08da      	lsrs	r2, r3, #3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3208      	adds	r2, #8
 800739e:	6939      	ldr	r1, [r7, #16]
 80073a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	2203      	movs	r2, #3
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	43db      	mvns	r3, r3
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4013      	ands	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f003 0203 	and.w	r2, r3, #3
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80ac 	beq.w	800753e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073e6:	4b5f      	ldr	r3, [pc, #380]	@ (8007564 <HAL_GPIO_Init+0x330>)
 80073e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073ea:	4a5e      	ldr	r2, [pc, #376]	@ (8007564 <HAL_GPIO_Init+0x330>)
 80073ec:	f043 0301 	orr.w	r3, r3, #1
 80073f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80073f2:	4b5c      	ldr	r3, [pc, #368]	@ (8007564 <HAL_GPIO_Init+0x330>)
 80073f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	60bb      	str	r3, [r7, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80073fe:	4a5a      	ldr	r2, [pc, #360]	@ (8007568 <HAL_GPIO_Init+0x334>)
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	089b      	lsrs	r3, r3, #2
 8007404:	3302      	adds	r3, #2
 8007406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800740a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	220f      	movs	r2, #15
 8007416:	fa02 f303 	lsl.w	r3, r2, r3
 800741a:	43db      	mvns	r3, r3
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4013      	ands	r3, r2
 8007420:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007428:	d025      	beq.n	8007476 <HAL_GPIO_Init+0x242>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a4f      	ldr	r2, [pc, #316]	@ (800756c <HAL_GPIO_Init+0x338>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d01f      	beq.n	8007472 <HAL_GPIO_Init+0x23e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a4e      	ldr	r2, [pc, #312]	@ (8007570 <HAL_GPIO_Init+0x33c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d019      	beq.n	800746e <HAL_GPIO_Init+0x23a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a4d      	ldr	r2, [pc, #308]	@ (8007574 <HAL_GPIO_Init+0x340>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d013      	beq.n	800746a <HAL_GPIO_Init+0x236>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a4c      	ldr	r2, [pc, #304]	@ (8007578 <HAL_GPIO_Init+0x344>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d00d      	beq.n	8007466 <HAL_GPIO_Init+0x232>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a4b      	ldr	r2, [pc, #300]	@ (800757c <HAL_GPIO_Init+0x348>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d007      	beq.n	8007462 <HAL_GPIO_Init+0x22e>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a4a      	ldr	r2, [pc, #296]	@ (8007580 <HAL_GPIO_Init+0x34c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d101      	bne.n	800745e <HAL_GPIO_Init+0x22a>
 800745a:	2306      	movs	r3, #6
 800745c:	e00c      	b.n	8007478 <HAL_GPIO_Init+0x244>
 800745e:	2307      	movs	r3, #7
 8007460:	e00a      	b.n	8007478 <HAL_GPIO_Init+0x244>
 8007462:	2305      	movs	r3, #5
 8007464:	e008      	b.n	8007478 <HAL_GPIO_Init+0x244>
 8007466:	2304      	movs	r3, #4
 8007468:	e006      	b.n	8007478 <HAL_GPIO_Init+0x244>
 800746a:	2303      	movs	r3, #3
 800746c:	e004      	b.n	8007478 <HAL_GPIO_Init+0x244>
 800746e:	2302      	movs	r3, #2
 8007470:	e002      	b.n	8007478 <HAL_GPIO_Init+0x244>
 8007472:	2301      	movs	r3, #1
 8007474:	e000      	b.n	8007478 <HAL_GPIO_Init+0x244>
 8007476:	2300      	movs	r3, #0
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	f002 0203 	and.w	r2, r2, #3
 800747e:	0092      	lsls	r2, r2, #2
 8007480:	4093      	lsls	r3, r2
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007488:	4937      	ldr	r1, [pc, #220]	@ (8007568 <HAL_GPIO_Init+0x334>)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	089b      	lsrs	r3, r3, #2
 800748e:	3302      	adds	r3, #2
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007496:	4b3b      	ldr	r3, [pc, #236]	@ (8007584 <HAL_GPIO_Init+0x350>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	43db      	mvns	r3, r3
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4013      	ands	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80074ba:	4a32      	ldr	r2, [pc, #200]	@ (8007584 <HAL_GPIO_Init+0x350>)
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80074c0:	4b30      	ldr	r3, [pc, #192]	@ (8007584 <HAL_GPIO_Init+0x350>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	43db      	mvns	r3, r3
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	4013      	ands	r3, r2
 80074ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80074e4:	4a27      	ldr	r2, [pc, #156]	@ (8007584 <HAL_GPIO_Init+0x350>)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80074ea:	4b26      	ldr	r3, [pc, #152]	@ (8007584 <HAL_GPIO_Init+0x350>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	43db      	mvns	r3, r3
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4013      	ands	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800750e:	4a1d      	ldr	r2, [pc, #116]	@ (8007584 <HAL_GPIO_Init+0x350>)
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007514:	4b1b      	ldr	r3, [pc, #108]	@ (8007584 <HAL_GPIO_Init+0x350>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	43db      	mvns	r3, r3
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4013      	ands	r3, r2
 8007522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007538:	4a12      	ldr	r2, [pc, #72]	@ (8007584 <HAL_GPIO_Init+0x350>)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	3301      	adds	r3, #1
 8007542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	fa22 f303 	lsr.w	r3, r2, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	f47f ae78 	bne.w	8007244 <HAL_GPIO_Init+0x10>
  }
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	40021000 	.word	0x40021000
 8007568:	40010000 	.word	0x40010000
 800756c:	48000400 	.word	0x48000400
 8007570:	48000800 	.word	0x48000800
 8007574:	48000c00 	.word	0x48000c00
 8007578:	48001000 	.word	0x48001000
 800757c:	48001400 	.word	0x48001400
 8007580:	48001800 	.word	0x48001800
 8007584:	40010400 	.word	0x40010400

08007588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	807b      	strh	r3, [r7, #2]
 8007594:	4613      	mov	r3, r2
 8007596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007598:	787b      	ldrb	r3, [r7, #1]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800759e:	887a      	ldrh	r2, [r7, #2]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80075a4:	e002      	b.n	80075ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80075a6:	887a      	ldrh	r2, [r7, #2]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80075ca:	887a      	ldrh	r2, [r7, #2]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4013      	ands	r3, r2
 80075d0:	041a      	lsls	r2, r3, #16
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	43d9      	mvns	r1, r3
 80075d6:	887b      	ldrh	r3, [r7, #2]
 80075d8:	400b      	ands	r3, r1
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	619a      	str	r2, [r3, #24]
}
 80075e0:	bf00      	nop
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e08d      	b.n	800771a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d106      	bne.n	8007618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fc fd80 	bl	8004118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2224      	movs	r2, #36	@ 0x24
 800761c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0201 	bic.w	r2, r2, #1
 800762e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800763c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800764c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d107      	bne.n	8007666 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007662:	609a      	str	r2, [r3, #8]
 8007664:	e006      	b.n	8007674 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007672:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	2b02      	cmp	r3, #2
 800767a:	d108      	bne.n	800768e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685a      	ldr	r2, [r3, #4]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800768a:	605a      	str	r2, [r3, #4]
 800768c:	e007      	b.n	800769e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800769c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6812      	ldr	r2, [r2, #0]
 80076a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80076ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	69d9      	ldr	r1, [r3, #28]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a1a      	ldr	r2, [r3, #32]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af02      	add	r7, sp, #8
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	4608      	mov	r0, r1
 800772e:	4611      	mov	r1, r2
 8007730:	461a      	mov	r2, r3
 8007732:	4603      	mov	r3, r0
 8007734:	817b      	strh	r3, [r7, #10]
 8007736:	460b      	mov	r3, r1
 8007738:	813b      	strh	r3, [r7, #8]
 800773a:	4613      	mov	r3, r2
 800773c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b20      	cmp	r3, #32
 8007748:	f040 80f9 	bne.w	800793e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <HAL_I2C_Mem_Write+0x34>
 8007752:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	d105      	bne.n	8007764 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800775e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e0ed      	b.n	8007940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <HAL_I2C_Mem_Write+0x4e>
 800776e:	2302      	movs	r3, #2
 8007770:	e0e6      	b.n	8007940 <HAL_I2C_Mem_Write+0x21c>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800777a:	f7fd fe21 	bl	80053c0 <HAL_GetTick>
 800777e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	2319      	movs	r3, #25
 8007786:	2201      	movs	r2, #1
 8007788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 fac3 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e0d1      	b.n	8007940 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2221      	movs	r2, #33	@ 0x21
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2240      	movs	r2, #64	@ 0x40
 80077a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a3a      	ldr	r2, [r7, #32]
 80077b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80077bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077c4:	88f8      	ldrh	r0, [r7, #6]
 80077c6:	893a      	ldrh	r2, [r7, #8]
 80077c8:	8979      	ldrh	r1, [r7, #10]
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	9301      	str	r3, [sp, #4]
 80077ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	4603      	mov	r3, r0
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 f9d3 	bl	8007b80 <I2C_RequestMemoryWrite>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e0a9      	b.n	8007940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2bff      	cmp	r3, #255	@ 0xff
 80077f4:	d90e      	bls.n	8007814 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	22ff      	movs	r2, #255	@ 0xff
 80077fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007800:	b2da      	uxtb	r2, r3
 8007802:	8979      	ldrh	r1, [r7, #10]
 8007804:	2300      	movs	r3, #0
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 fc47 	bl	80080a0 <I2C_TransferConfig>
 8007812:	e00f      	b.n	8007834 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007822:	b2da      	uxtb	r2, r3
 8007824:	8979      	ldrh	r1, [r7, #10]
 8007826:	2300      	movs	r3, #0
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 fc36 	bl	80080a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fac6 	bl	8007dca <I2C_WaitOnTXISFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e07b      	b.n	8007940 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784c:	781a      	ldrb	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007862:	b29b      	uxth	r3, r3
 8007864:	3b01      	subs	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d034      	beq.n	80078ec <HAL_I2C_Mem_Write+0x1c8>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007886:	2b00      	cmp	r3, #0
 8007888:	d130      	bne.n	80078ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007890:	2200      	movs	r2, #0
 8007892:	2180      	movs	r1, #128	@ 0x80
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 fa3f 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e04d      	b.n	8007940 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	2bff      	cmp	r3, #255	@ 0xff
 80078ac:	d90e      	bls.n	80078cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	22ff      	movs	r2, #255	@ 0xff
 80078b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	8979      	ldrh	r1, [r7, #10]
 80078bc:	2300      	movs	r3, #0
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 fbeb 	bl	80080a0 <I2C_TransferConfig>
 80078ca:	e00f      	b.n	80078ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	8979      	ldrh	r1, [r7, #10]
 80078de:	2300      	movs	r3, #0
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 fbda 	bl	80080a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d19e      	bne.n	8007834 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 faac 	bl	8007e58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e01a      	b.n	8007940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2220      	movs	r2, #32
 8007910:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6859      	ldr	r1, [r3, #4]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	4b0a      	ldr	r3, [pc, #40]	@ (8007948 <HAL_I2C_Mem_Write+0x224>)
 800791e:	400b      	ands	r3, r1
 8007920:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	e000      	b.n	8007940 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800793e:	2302      	movs	r3, #2
  }
}
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	fe00e800 	.word	0xfe00e800

0800794c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af02      	add	r7, sp, #8
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	4608      	mov	r0, r1
 8007956:	4611      	mov	r1, r2
 8007958:	461a      	mov	r2, r3
 800795a:	4603      	mov	r3, r0
 800795c:	817b      	strh	r3, [r7, #10]
 800795e:	460b      	mov	r3, r1
 8007960:	813b      	strh	r3, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b20      	cmp	r3, #32
 8007970:	f040 80fd 	bne.w	8007b6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_I2C_Mem_Read+0x34>
 800797a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800797c:	2b00      	cmp	r3, #0
 800797e:	d105      	bne.n	800798c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007986:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e0f1      	b.n	8007b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007992:	2b01      	cmp	r3, #1
 8007994:	d101      	bne.n	800799a <HAL_I2C_Mem_Read+0x4e>
 8007996:	2302      	movs	r3, #2
 8007998:	e0ea      	b.n	8007b70 <HAL_I2C_Mem_Read+0x224>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80079a2:	f7fd fd0d 	bl	80053c0 <HAL_GetTick>
 80079a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	2319      	movs	r3, #25
 80079ae:	2201      	movs	r2, #1
 80079b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f9af 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e0d5      	b.n	8007b70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2222      	movs	r2, #34	@ 0x22
 80079c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2240      	movs	r2, #64	@ 0x40
 80079d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a3a      	ldr	r2, [r7, #32]
 80079de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80079e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079ec:	88f8      	ldrh	r0, [r7, #6]
 80079ee:	893a      	ldrh	r2, [r7, #8]
 80079f0:	8979      	ldrh	r1, [r7, #10]
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	4603      	mov	r3, r0
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 f913 	bl	8007c28 <I2C_RequestMemoryRead>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e0ad      	b.n	8007b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2bff      	cmp	r3, #255	@ 0xff
 8007a1c:	d90e      	bls.n	8007a3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	8979      	ldrh	r1, [r7, #10]
 8007a2c:	4b52      	ldr	r3, [pc, #328]	@ (8007b78 <HAL_I2C_Mem_Read+0x22c>)
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 fb33 	bl	80080a0 <I2C_TransferConfig>
 8007a3a:	e00f      	b.n	8007a5c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	8979      	ldrh	r1, [r7, #10]
 8007a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8007b78 <HAL_I2C_Mem_Read+0x22c>)
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 fb22 	bl	80080a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a62:	2200      	movs	r2, #0
 8007a64:	2104      	movs	r1, #4
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 f956 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e07c      	b.n	8007b70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d034      	beq.n	8007b1c <HAL_I2C_Mem_Read+0x1d0>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d130      	bne.n	8007b1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2180      	movs	r1, #128	@ 0x80
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f927 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e04d      	b.n	8007b70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2bff      	cmp	r3, #255	@ 0xff
 8007adc:	d90e      	bls.n	8007afc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	8979      	ldrh	r1, [r7, #10]
 8007aec:	2300      	movs	r3, #0
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 fad3 	bl	80080a0 <I2C_TransferConfig>
 8007afa:	e00f      	b.n	8007b1c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	8979      	ldrh	r1, [r7, #10]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fac2 	bl	80080a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d19a      	bne.n	8007a5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 f994 	bl	8007e58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e01a      	b.n	8007b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6859      	ldr	r1, [r3, #4]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b7c <HAL_I2C_Mem_Read+0x230>)
 8007b4e:	400b      	ands	r3, r1
 8007b50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e000      	b.n	8007b70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
  }
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	80002400 	.word	0x80002400
 8007b7c:	fe00e800 	.word	0xfe00e800

08007b80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	4608      	mov	r0, r1
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	4603      	mov	r3, r0
 8007b90:	817b      	strh	r3, [r7, #10]
 8007b92:	460b      	mov	r3, r1
 8007b94:	813b      	strh	r3, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	8979      	ldrh	r1, [r7, #10]
 8007ba0:	4b20      	ldr	r3, [pc, #128]	@ (8007c24 <I2C_RequestMemoryWrite+0xa4>)
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 fa79 	bl	80080a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	69b9      	ldr	r1, [r7, #24]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f909 	bl	8007dca <I2C_WaitOnTXISFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e02c      	b.n	8007c1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bc2:	88fb      	ldrh	r3, [r7, #6]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d105      	bne.n	8007bd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bc8:	893b      	ldrh	r3, [r7, #8]
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8007bd2:	e015      	b.n	8007c00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bd4:	893b      	ldrh	r3, [r7, #8]
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	69b9      	ldr	r1, [r7, #24]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 f8ef 	bl	8007dca <I2C_WaitOnTXISFlagUntilTimeout>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e012      	b.n	8007c1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf6:	893b      	ldrh	r3, [r7, #8]
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	2200      	movs	r2, #0
 8007c08:	2180      	movs	r1, #128	@ 0x80
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 f884 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	80002000 	.word	0x80002000

08007c28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	4608      	mov	r0, r1
 8007c32:	4611      	mov	r1, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	4603      	mov	r3, r0
 8007c38:	817b      	strh	r3, [r7, #10]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	813b      	strh	r3, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	8979      	ldrh	r1, [r7, #10]
 8007c48:	4b20      	ldr	r3, [pc, #128]	@ (8007ccc <I2C_RequestMemoryRead+0xa4>)
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 fa26 	bl	80080a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	69b9      	ldr	r1, [r7, #24]
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f8b6 	bl	8007dca <I2C_WaitOnTXISFlagUntilTimeout>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e02c      	b.n	8007cc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c68:	88fb      	ldrh	r3, [r7, #6]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d105      	bne.n	8007c7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c6e:	893b      	ldrh	r3, [r7, #8]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c78:	e015      	b.n	8007ca6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c7a:	893b      	ldrh	r3, [r7, #8]
 8007c7c:	0a1b      	lsrs	r3, r3, #8
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	69b9      	ldr	r1, [r7, #24]
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 f89c 	bl	8007dca <I2C_WaitOnTXISFlagUntilTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e012      	b.n	8007cc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c9c:	893b      	ldrh	r3, [r7, #8]
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2200      	movs	r2, #0
 8007cae:	2140      	movs	r1, #64	@ 0x40
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 f831 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	80002000 	.word	0x80002000

08007cd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d103      	bne.n	8007cee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2200      	movs	r2, #0
 8007cec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d007      	beq.n	8007d0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699a      	ldr	r2, [r3, #24]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f042 0201 	orr.w	r2, r2, #1
 8007d0a:	619a      	str	r2, [r3, #24]
  }
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	4613      	mov	r3, r2
 8007d26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d28:	e03b      	b.n	8007da2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 f8d6 	bl	8007ee0 <I2C_IsErrorOccurred>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e041      	b.n	8007dc2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d44:	d02d      	beq.n	8007da2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d46:	f7fd fb3b 	bl	80053c0 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d302      	bcc.n	8007d5c <I2C_WaitOnFlagUntilTimeout+0x44>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d122      	bne.n	8007da2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699a      	ldr	r2, [r3, #24]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	4013      	ands	r3, r2
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	bf0c      	ite	eq
 8007d6c:	2301      	moveq	r3, #1
 8007d6e:	2300      	movne	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	461a      	mov	r2, r3
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d113      	bne.n	8007da2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d7e:	f043 0220 	orr.w	r2, r3, #32
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e00f      	b.n	8007dc2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4013      	ands	r3, r2
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	bf0c      	ite	eq
 8007db2:	2301      	moveq	r3, #1
 8007db4:	2300      	movne	r3, #0
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	461a      	mov	r2, r3
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d0b4      	beq.n	8007d2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007dd6:	e033      	b.n	8007e40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f87f 	bl	8007ee0 <I2C_IsErrorOccurred>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e031      	b.n	8007e50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df2:	d025      	beq.n	8007e40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007df4:	f7fd fae4 	bl	80053c0 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d302      	bcc.n	8007e0a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d11a      	bne.n	8007e40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d013      	beq.n	8007e40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e1c:	f043 0220 	orr.w	r2, r3, #32
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e007      	b.n	8007e50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d1c4      	bne.n	8007dd8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e64:	e02f      	b.n	8007ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 f838 	bl	8007ee0 <I2C_IsErrorOccurred>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e02d      	b.n	8007ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e7a:	f7fd faa1 	bl	80053c0 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d302      	bcc.n	8007e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d11a      	bne.n	8007ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d013      	beq.n	8007ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea2:	f043 0220 	orr.w	r2, r3, #32
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e007      	b.n	8007ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	f003 0320 	and.w	r3, r3, #32
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d1c8      	bne.n	8007e66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08a      	sub	sp, #40	@ 0x28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d068      	beq.n	8007fde <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2210      	movs	r2, #16
 8007f12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f14:	e049      	b.n	8007faa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d045      	beq.n	8007faa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f1e:	f7fd fa4f 	bl	80053c0 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d302      	bcc.n	8007f34 <I2C_IsErrorOccurred+0x54>
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d13a      	bne.n	8007faa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f56:	d121      	bne.n	8007f9c <I2C_IsErrorOccurred+0xbc>
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f5e:	d01d      	beq.n	8007f9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007f60:	7cfb      	ldrb	r3, [r7, #19]
 8007f62:	2b20      	cmp	r3, #32
 8007f64:	d01a      	beq.n	8007f9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007f76:	f7fd fa23 	bl	80053c0 <HAL_GetTick>
 8007f7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f7c:	e00e      	b.n	8007f9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007f7e:	f7fd fa1f 	bl	80053c0 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	2b19      	cmp	r3, #25
 8007f8a:	d907      	bls.n	8007f9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	f043 0320 	orr.w	r3, r3, #32
 8007f92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007f9a:	e006      	b.n	8007faa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	d1e9      	bne.n	8007f7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	d003      	beq.n	8007fc0 <I2C_IsErrorOccurred+0xe0>
 8007fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0aa      	beq.n	8007f16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d103      	bne.n	8007fd0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	f043 0304 	orr.w	r3, r3, #4
 8007fd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008000:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00b      	beq.n	800802a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	f043 0308 	orr.w	r3, r3, #8
 8008018:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008022:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	f043 0302 	orr.w	r3, r3, #2
 800803a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008044:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800804c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01c      	beq.n	800808e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f7ff fe3b 	bl	8007cd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6859      	ldr	r1, [r3, #4]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	4b0d      	ldr	r3, [pc, #52]	@ (800809c <I2C_IsErrorOccurred+0x1bc>)
 8008066:	400b      	ands	r3, r1
 8008068:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	431a      	orrs	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2220      	movs	r2, #32
 800807a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800808e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008092:	4618      	mov	r0, r3
 8008094:	3728      	adds	r7, #40	@ 0x28
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	fe00e800 	.word	0xfe00e800

080080a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	607b      	str	r3, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	817b      	strh	r3, [r7, #10]
 80080ae:	4613      	mov	r3, r2
 80080b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080b2:	897b      	ldrh	r3, [r7, #10]
 80080b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080b8:	7a7b      	ldrb	r3, [r7, #9]
 80080ba:	041b      	lsls	r3, r3, #16
 80080bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	0d5b      	lsrs	r3, r3, #21
 80080da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80080de:	4b08      	ldr	r3, [pc, #32]	@ (8008100 <I2C_TransferConfig+0x60>)
 80080e0:	430b      	orrs	r3, r1
 80080e2:	43db      	mvns	r3, r3
 80080e4:	ea02 0103 	and.w	r1, r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80080f2:	bf00      	nop
 80080f4:	371c      	adds	r7, #28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	03ff63ff 	.word	0x03ff63ff

08008104 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b20      	cmp	r3, #32
 8008118:	d138      	bne.n	800818c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008124:	2302      	movs	r3, #2
 8008126:	e032      	b.n	800818e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2224      	movs	r2, #36	@ 0x24
 8008134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0201 	bic.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008156:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6819      	ldr	r1, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f042 0201 	orr.w	r2, r2, #1
 8008176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2220      	movs	r2, #32
 800817c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	e000      	b.n	800818e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800818c:	2302      	movs	r3, #2
  }
}
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d139      	bne.n	8008224 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e033      	b.n	8008226 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2224      	movs	r2, #36	@ 0x24
 80081ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0201 	bic.w	r2, r2, #1
 80081dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80081ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2220      	movs	r2, #32
 8008214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	e000      	b.n	8008226 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008224:	2302      	movs	r3, #2
  }
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
	...

08008234 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008238:	4b05      	ldr	r3, [pc, #20]	@ (8008250 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a04      	ldr	r2, [pc, #16]	@ (8008250 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800823e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008242:	6013      	str	r3, [r2, #0]
}
 8008244:	bf00      	nop
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	40007000 	.word	0x40007000

08008254 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008258:	4b04      	ldr	r3, [pc, #16]	@ (800826c <HAL_PWREx_GetVoltageRange+0x18>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8008260:	4618      	mov	r0, r3
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40007000 	.word	0x40007000

08008270 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800827e:	d130      	bne.n	80082e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008280:	4b23      	ldr	r3, [pc, #140]	@ (8008310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800828c:	d038      	beq.n	8008300 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800828e:	4b20      	ldr	r3, [pc, #128]	@ (8008310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008296:	4a1e      	ldr	r2, [pc, #120]	@ (8008310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008298:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800829c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800829e:	4b1d      	ldr	r3, [pc, #116]	@ (8008314 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2232      	movs	r2, #50	@ 0x32
 80082a4:	fb02 f303 	mul.w	r3, r2, r3
 80082a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008318 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80082aa:	fba2 2303 	umull	r2, r3, r2, r3
 80082ae:	0c9b      	lsrs	r3, r3, #18
 80082b0:	3301      	adds	r3, #1
 80082b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082b4:	e002      	b.n	80082bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082bc:	4b14      	ldr	r3, [pc, #80]	@ (8008310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082c8:	d102      	bne.n	80082d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f2      	bne.n	80082b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80082d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082dc:	d110      	bne.n	8008300 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e00f      	b.n	8008302 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80082e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80082ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082ee:	d007      	beq.n	8008300 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80082f0:	4b07      	ldr	r3, [pc, #28]	@ (8008310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80082f8:	4a05      	ldr	r2, [pc, #20]	@ (8008310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80082fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40007000 	.word	0x40007000
 8008314:	20000028 	.word	0x20000028
 8008318:	431bde83 	.word	0x431bde83

0800831c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e3ca      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800832e:	4b97      	ldr	r3, [pc, #604]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f003 030c 	and.w	r3, r3, #12
 8008336:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008338:	4b94      	ldr	r3, [pc, #592]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f003 0303 	and.w	r3, r3, #3
 8008340:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0310 	and.w	r3, r3, #16
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 80e4 	beq.w	8008518 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <HAL_RCC_OscConfig+0x4a>
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	2b0c      	cmp	r3, #12
 800835a:	f040 808b 	bne.w	8008474 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2b01      	cmp	r3, #1
 8008362:	f040 8087 	bne.w	8008474 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008366:	4b89      	ldr	r3, [pc, #548]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d005      	beq.n	800837e <HAL_RCC_OscConfig+0x62>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e3a2      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1a      	ldr	r2, [r3, #32]
 8008382:	4b82      	ldr	r3, [pc, #520]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <HAL_RCC_OscConfig+0x7c>
 800838e:	4b7f      	ldr	r3, [pc, #508]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008396:	e005      	b.n	80083a4 <HAL_RCC_OscConfig+0x88>
 8008398:	4b7c      	ldr	r3, [pc, #496]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 800839a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800839e:	091b      	lsrs	r3, r3, #4
 80083a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d223      	bcs.n	80083f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 fd55 	bl	8008e5c <RCC_SetFlashLatencyFromMSIRange>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e383      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083bc:	4b73      	ldr	r3, [pc, #460]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a72      	ldr	r2, [pc, #456]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80083c2:	f043 0308 	orr.w	r3, r3, #8
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	4b70      	ldr	r3, [pc, #448]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	496d      	ldr	r1, [pc, #436]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083da:	4b6c      	ldr	r3, [pc, #432]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	021b      	lsls	r3, r3, #8
 80083e8:	4968      	ldr	r1, [pc, #416]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	604b      	str	r3, [r1, #4]
 80083ee:	e025      	b.n	800843c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083f0:	4b66      	ldr	r3, [pc, #408]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a65      	ldr	r2, [pc, #404]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80083f6:	f043 0308 	orr.w	r3, r3, #8
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	4b63      	ldr	r3, [pc, #396]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	4960      	ldr	r1, [pc, #384]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 800840a:	4313      	orrs	r3, r2
 800840c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800840e:	4b5f      	ldr	r3, [pc, #380]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	021b      	lsls	r3, r3, #8
 800841c:	495b      	ldr	r1, [pc, #364]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 800841e:	4313      	orrs	r3, r2
 8008420:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d109      	bne.n	800843c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fd15 	bl	8008e5c <RCC_SetFlashLatencyFromMSIRange>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e343      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800843c:	f000 fc4a 	bl	8008cd4 <HAL_RCC_GetSysClockFreq>
 8008440:	4602      	mov	r2, r0
 8008442:	4b52      	ldr	r3, [pc, #328]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	091b      	lsrs	r3, r3, #4
 8008448:	f003 030f 	and.w	r3, r3, #15
 800844c:	4950      	ldr	r1, [pc, #320]	@ (8008590 <HAL_RCC_OscConfig+0x274>)
 800844e:	5ccb      	ldrb	r3, [r1, r3]
 8008450:	f003 031f 	and.w	r3, r3, #31
 8008454:	fa22 f303 	lsr.w	r3, r2, r3
 8008458:	4a4e      	ldr	r2, [pc, #312]	@ (8008594 <HAL_RCC_OscConfig+0x278>)
 800845a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800845c:	4b4e      	ldr	r3, [pc, #312]	@ (8008598 <HAL_RCC_OscConfig+0x27c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f7fc ff5d 	bl	8005320 <HAL_InitTick>
 8008466:	4603      	mov	r3, r0
 8008468:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d052      	beq.n	8008516 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	e327      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d032      	beq.n	80084e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800847c:	4b43      	ldr	r3, [pc, #268]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a42      	ldr	r2, [pc, #264]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 8008482:	f043 0301 	orr.w	r3, r3, #1
 8008486:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008488:	f7fc ff9a 	bl	80053c0 <HAL_GetTick>
 800848c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800848e:	e008      	b.n	80084a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008490:	f7fc ff96 	bl	80053c0 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e310      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80084a2:	4b3a      	ldr	r3, [pc, #232]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0f0      	beq.n	8008490 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084ae:	4b37      	ldr	r3, [pc, #220]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a36      	ldr	r2, [pc, #216]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80084b4:	f043 0308 	orr.w	r3, r3, #8
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	4b34      	ldr	r3, [pc, #208]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	4931      	ldr	r1, [pc, #196]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084cc:	4b2f      	ldr	r3, [pc, #188]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	492c      	ldr	r1, [pc, #176]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	604b      	str	r3, [r1, #4]
 80084e0:	e01a      	b.n	8008518 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80084e2:	4b2a      	ldr	r3, [pc, #168]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a29      	ldr	r2, [pc, #164]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 80084e8:	f023 0301 	bic.w	r3, r3, #1
 80084ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80084ee:	f7fc ff67 	bl	80053c0 <HAL_GetTick>
 80084f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80084f4:	e008      	b.n	8008508 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80084f6:	f7fc ff63 	bl	80053c0 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e2dd      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008508:	4b20      	ldr	r3, [pc, #128]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1f0      	bne.n	80084f6 <HAL_RCC_OscConfig+0x1da>
 8008514:	e000      	b.n	8008518 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008516:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d074      	beq.n	800860e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	2b08      	cmp	r3, #8
 8008528:	d005      	beq.n	8008536 <HAL_RCC_OscConfig+0x21a>
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	2b0c      	cmp	r3, #12
 800852e:	d10e      	bne.n	800854e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2b03      	cmp	r3, #3
 8008534:	d10b      	bne.n	800854e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008536:	4b15      	ldr	r3, [pc, #84]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d064      	beq.n	800860c <HAL_RCC_OscConfig+0x2f0>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d160      	bne.n	800860c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e2ba      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008556:	d106      	bne.n	8008566 <HAL_RCC_OscConfig+0x24a>
 8008558:	4b0c      	ldr	r3, [pc, #48]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a0b      	ldr	r2, [pc, #44]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 800855e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	e026      	b.n	80085b4 <HAL_RCC_OscConfig+0x298>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800856e:	d115      	bne.n	800859c <HAL_RCC_OscConfig+0x280>
 8008570:	4b06      	ldr	r3, [pc, #24]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a05      	ldr	r2, [pc, #20]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 8008576:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	4b03      	ldr	r3, [pc, #12]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a02      	ldr	r2, [pc, #8]	@ (800858c <HAL_RCC_OscConfig+0x270>)
 8008582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	e014      	b.n	80085b4 <HAL_RCC_OscConfig+0x298>
 800858a:	bf00      	nop
 800858c:	40021000 	.word	0x40021000
 8008590:	08011704 	.word	0x08011704
 8008594:	20000028 	.word	0x20000028
 8008598:	2000002c 	.word	0x2000002c
 800859c:	4ba0      	ldr	r3, [pc, #640]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a9f      	ldr	r2, [pc, #636]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80085a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	4b9d      	ldr	r3, [pc, #628]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a9c      	ldr	r2, [pc, #624]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80085ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d013      	beq.n	80085e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085bc:	f7fc ff00 	bl	80053c0 <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085c4:	f7fc fefc 	bl	80053c0 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b64      	cmp	r3, #100	@ 0x64
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e276      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085d6:	4b92      	ldr	r3, [pc, #584]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0f0      	beq.n	80085c4 <HAL_RCC_OscConfig+0x2a8>
 80085e2:	e014      	b.n	800860e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e4:	f7fc feec 	bl	80053c0 <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80085ea:	e008      	b.n	80085fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085ec:	f7fc fee8 	bl	80053c0 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	2b64      	cmp	r3, #100	@ 0x64
 80085f8:	d901      	bls.n	80085fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e262      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80085fe:	4b88      	ldr	r3, [pc, #544]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1f0      	bne.n	80085ec <HAL_RCC_OscConfig+0x2d0>
 800860a:	e000      	b.n	800860e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800860c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d060      	beq.n	80086dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	2b04      	cmp	r3, #4
 800861e:	d005      	beq.n	800862c <HAL_RCC_OscConfig+0x310>
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	2b0c      	cmp	r3, #12
 8008624:	d119      	bne.n	800865a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b02      	cmp	r3, #2
 800862a:	d116      	bne.n	800865a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800862c:	4b7c      	ldr	r3, [pc, #496]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <HAL_RCC_OscConfig+0x328>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e23f      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008644:	4b76      	ldr	r3, [pc, #472]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	061b      	lsls	r3, r3, #24
 8008652:	4973      	ldr	r1, [pc, #460]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008654:	4313      	orrs	r3, r2
 8008656:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008658:	e040      	b.n	80086dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d023      	beq.n	80086aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008662:	4b6f      	ldr	r3, [pc, #444]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a6e      	ldr	r2, [pc, #440]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800866c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866e:	f7fc fea7 	bl	80053c0 <HAL_GetTick>
 8008672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008674:	e008      	b.n	8008688 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008676:	f7fc fea3 	bl	80053c0 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d901      	bls.n	8008688 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e21d      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008688:	4b65      	ldr	r3, [pc, #404]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0f0      	beq.n	8008676 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008694:	4b62      	ldr	r3, [pc, #392]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	061b      	lsls	r3, r3, #24
 80086a2:	495f      	ldr	r1, [pc, #380]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	604b      	str	r3, [r1, #4]
 80086a8:	e018      	b.n	80086dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086aa:	4b5d      	ldr	r3, [pc, #372]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a5c      	ldr	r2, [pc, #368]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80086b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b6:	f7fc fe83 	bl	80053c0 <HAL_GetTick>
 80086ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80086bc:	e008      	b.n	80086d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086be:	f7fc fe7f 	bl	80053c0 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e1f9      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80086d0:	4b53      	ldr	r3, [pc, #332]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1f0      	bne.n	80086be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0308 	and.w	r3, r3, #8
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d03c      	beq.n	8008762 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01c      	beq.n	800872a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086f0:	4b4b      	ldr	r3, [pc, #300]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80086f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086f6:	4a4a      	ldr	r2, [pc, #296]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80086f8:	f043 0301 	orr.w	r3, r3, #1
 80086fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008700:	f7fc fe5e 	bl	80053c0 <HAL_GetTick>
 8008704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008706:	e008      	b.n	800871a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008708:	f7fc fe5a 	bl	80053c0 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b02      	cmp	r3, #2
 8008714:	d901      	bls.n	800871a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e1d4      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800871a:	4b41      	ldr	r3, [pc, #260]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 800871c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0ef      	beq.n	8008708 <HAL_RCC_OscConfig+0x3ec>
 8008728:	e01b      	b.n	8008762 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800872a:	4b3d      	ldr	r3, [pc, #244]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 800872c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008730:	4a3b      	ldr	r2, [pc, #236]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008732:	f023 0301 	bic.w	r3, r3, #1
 8008736:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800873a:	f7fc fe41 	bl	80053c0 <HAL_GetTick>
 800873e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008740:	e008      	b.n	8008754 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008742:	f7fc fe3d 	bl	80053c0 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b02      	cmp	r3, #2
 800874e:	d901      	bls.n	8008754 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e1b7      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008754:	4b32      	ldr	r3, [pc, #200]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1ef      	bne.n	8008742 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0304 	and.w	r3, r3, #4
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 80a6 	beq.w	80088bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008770:	2300      	movs	r3, #0
 8008772:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008774:	4b2a      	ldr	r3, [pc, #168]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10d      	bne.n	800879c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008780:	4b27      	ldr	r3, [pc, #156]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008784:	4a26      	ldr	r2, [pc, #152]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800878a:	6593      	str	r3, [r2, #88]	@ 0x58
 800878c:	4b24      	ldr	r3, [pc, #144]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 800878e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008794:	60bb      	str	r3, [r7, #8]
 8008796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008798:	2301      	movs	r3, #1
 800879a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800879c:	4b21      	ldr	r3, [pc, #132]	@ (8008824 <HAL_RCC_OscConfig+0x508>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d118      	bne.n	80087da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008824 <HAL_RCC_OscConfig+0x508>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008824 <HAL_RCC_OscConfig+0x508>)
 80087ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087b4:	f7fc fe04 	bl	80053c0 <HAL_GetTick>
 80087b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087ba:	e008      	b.n	80087ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087bc:	f7fc fe00 	bl	80053c0 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e17a      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087ce:	4b15      	ldr	r3, [pc, #84]	@ (8008824 <HAL_RCC_OscConfig+0x508>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f0      	beq.n	80087bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d108      	bne.n	80087f4 <HAL_RCC_OscConfig+0x4d8>
 80087e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80087e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087e8:	4a0d      	ldr	r2, [pc, #52]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80087ea:	f043 0301 	orr.w	r3, r3, #1
 80087ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80087f2:	e029      	b.n	8008848 <HAL_RCC_OscConfig+0x52c>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	2b05      	cmp	r3, #5
 80087fa:	d115      	bne.n	8008828 <HAL_RCC_OscConfig+0x50c>
 80087fc:	4b08      	ldr	r3, [pc, #32]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 80087fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008802:	4a07      	ldr	r2, [pc, #28]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008804:	f043 0304 	orr.w	r3, r3, #4
 8008808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800880c:	4b04      	ldr	r3, [pc, #16]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 800880e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008812:	4a03      	ldr	r2, [pc, #12]	@ (8008820 <HAL_RCC_OscConfig+0x504>)
 8008814:	f043 0301 	orr.w	r3, r3, #1
 8008818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800881c:	e014      	b.n	8008848 <HAL_RCC_OscConfig+0x52c>
 800881e:	bf00      	nop
 8008820:	40021000 	.word	0x40021000
 8008824:	40007000 	.word	0x40007000
 8008828:	4b9c      	ldr	r3, [pc, #624]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 800882a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800882e:	4a9b      	ldr	r2, [pc, #620]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008830:	f023 0301 	bic.w	r3, r3, #1
 8008834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008838:	4b98      	ldr	r3, [pc, #608]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 800883a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800883e:	4a97      	ldr	r2, [pc, #604]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008840:	f023 0304 	bic.w	r3, r3, #4
 8008844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d016      	beq.n	800887e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008850:	f7fc fdb6 	bl	80053c0 <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008856:	e00a      	b.n	800886e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008858:	f7fc fdb2 	bl	80053c0 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008866:	4293      	cmp	r3, r2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e12a      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800886e:	4b8b      	ldr	r3, [pc, #556]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0ed      	beq.n	8008858 <HAL_RCC_OscConfig+0x53c>
 800887c:	e015      	b.n	80088aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800887e:	f7fc fd9f 	bl	80053c0 <HAL_GetTick>
 8008882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008884:	e00a      	b.n	800889c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008886:	f7fc fd9b 	bl	80053c0 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008894:	4293      	cmp	r3, r2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e113      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800889c:	4b7f      	ldr	r3, [pc, #508]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 800889e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1ed      	bne.n	8008886 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088aa:	7ffb      	ldrb	r3, [r7, #31]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d105      	bne.n	80088bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088b0:	4b7a      	ldr	r3, [pc, #488]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 80088b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088b4:	4a79      	ldr	r2, [pc, #484]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 80088b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088ba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 80fe 	beq.w	8008ac2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	f040 80d0 	bne.w	8008a70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80088d0:	4b72      	ldr	r3, [pc, #456]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f003 0203 	and.w	r2, r3, #3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d130      	bne.n	8008946 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ee:	3b01      	subs	r3, #1
 80088f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d127      	bne.n	8008946 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008900:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008902:	429a      	cmp	r2, r3
 8008904:	d11f      	bne.n	8008946 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008910:	2a07      	cmp	r2, #7
 8008912:	bf14      	ite	ne
 8008914:	2201      	movne	r2, #1
 8008916:	2200      	moveq	r2, #0
 8008918:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800891a:	4293      	cmp	r3, r2
 800891c:	d113      	bne.n	8008946 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008928:	085b      	lsrs	r3, r3, #1
 800892a:	3b01      	subs	r3, #1
 800892c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800892e:	429a      	cmp	r2, r3
 8008930:	d109      	bne.n	8008946 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893c:	085b      	lsrs	r3, r3, #1
 800893e:	3b01      	subs	r3, #1
 8008940:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008942:	429a      	cmp	r2, r3
 8008944:	d06e      	beq.n	8008a24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b0c      	cmp	r3, #12
 800894a:	d069      	beq.n	8008a20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800894c:	4b53      	ldr	r3, [pc, #332]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d105      	bne.n	8008964 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008958:	4b50      	ldr	r3, [pc, #320]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e0ad      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008968:	4b4c      	ldr	r3, [pc, #304]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a4b      	ldr	r2, [pc, #300]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 800896e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008972:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008974:	f7fc fd24 	bl	80053c0 <HAL_GetTick>
 8008978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800897a:	e008      	b.n	800898e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800897c:	f7fc fd20 	bl	80053c0 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	2b02      	cmp	r3, #2
 8008988:	d901      	bls.n	800898e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e09a      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800898e:	4b43      	ldr	r3, [pc, #268]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1f0      	bne.n	800897c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800899a:	4b40      	ldr	r3, [pc, #256]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	4b40      	ldr	r3, [pc, #256]	@ (8008aa0 <HAL_RCC_OscConfig+0x784>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80089aa:	3a01      	subs	r2, #1
 80089ac:	0112      	lsls	r2, r2, #4
 80089ae:	4311      	orrs	r1, r2
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80089b4:	0212      	lsls	r2, r2, #8
 80089b6:	4311      	orrs	r1, r2
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80089bc:	0852      	lsrs	r2, r2, #1
 80089be:	3a01      	subs	r2, #1
 80089c0:	0552      	lsls	r2, r2, #21
 80089c2:	4311      	orrs	r1, r2
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80089c8:	0852      	lsrs	r2, r2, #1
 80089ca:	3a01      	subs	r2, #1
 80089cc:	0652      	lsls	r2, r2, #25
 80089ce:	4311      	orrs	r1, r2
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80089d4:	0912      	lsrs	r2, r2, #4
 80089d6:	0452      	lsls	r2, r2, #17
 80089d8:	430a      	orrs	r2, r1
 80089da:	4930      	ldr	r1, [pc, #192]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80089e0:	4b2e      	ldr	r3, [pc, #184]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a2d      	ldr	r2, [pc, #180]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 80089e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80089ec:	4b2b      	ldr	r3, [pc, #172]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	4a2a      	ldr	r2, [pc, #168]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 80089f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80089f8:	f7fc fce2 	bl	80053c0 <HAL_GetTick>
 80089fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089fe:	e008      	b.n	8008a12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a00:	f7fc fcde 	bl	80053c0 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e058      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a12:	4b22      	ldr	r3, [pc, #136]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0f0      	beq.n	8008a00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a1e:	e050      	b.n	8008ac2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e04f      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a24:	4b1d      	ldr	r3, [pc, #116]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d148      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008a30:	4b1a      	ldr	r3, [pc, #104]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a19      	ldr	r2, [pc, #100]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a3c:	4b17      	ldr	r3, [pc, #92]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	4a16      	ldr	r2, [pc, #88]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a48:	f7fc fcba 	bl	80053c0 <HAL_GetTick>
 8008a4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a4e:	e008      	b.n	8008a62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a50:	f7fc fcb6 	bl	80053c0 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d901      	bls.n	8008a62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e030      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a62:	4b0e      	ldr	r3, [pc, #56]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d0f0      	beq.n	8008a50 <HAL_RCC_OscConfig+0x734>
 8008a6e:	e028      	b.n	8008ac2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	2b0c      	cmp	r3, #12
 8008a74:	d023      	beq.n	8008abe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a76:	4b09      	ldr	r3, [pc, #36]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a08      	ldr	r2, [pc, #32]	@ (8008a9c <HAL_RCC_OscConfig+0x780>)
 8008a7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a82:	f7fc fc9d 	bl	80053c0 <HAL_GetTick>
 8008a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a88:	e00c      	b.n	8008aa4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a8a:	f7fc fc99 	bl	80053c0 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d905      	bls.n	8008aa4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e013      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
 8008a9c:	40021000 	.word	0x40021000
 8008aa0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008aa4:	4b09      	ldr	r3, [pc, #36]	@ (8008acc <HAL_RCC_OscConfig+0x7b0>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1ec      	bne.n	8008a8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008ab0:	4b06      	ldr	r3, [pc, #24]	@ (8008acc <HAL_RCC_OscConfig+0x7b0>)
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	4905      	ldr	r1, [pc, #20]	@ (8008acc <HAL_RCC_OscConfig+0x7b0>)
 8008ab6:	4b06      	ldr	r3, [pc, #24]	@ (8008ad0 <HAL_RCC_OscConfig+0x7b4>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	60cb      	str	r3, [r1, #12]
 8008abc:	e001      	b.n	8008ac2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3720      	adds	r7, #32
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	40021000 	.word	0x40021000
 8008ad0:	feeefffc 	.word	0xfeeefffc

08008ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e0e7      	b.n	8008cb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ae8:	4b75      	ldr	r3, [pc, #468]	@ (8008cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0307 	and.w	r3, r3, #7
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d910      	bls.n	8008b18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008af6:	4b72      	ldr	r3, [pc, #456]	@ (8008cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f023 0207 	bic.w	r2, r3, #7
 8008afe:	4970      	ldr	r1, [pc, #448]	@ (8008cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b06:	4b6e      	ldr	r3, [pc, #440]	@ (8008cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0307 	and.w	r3, r3, #7
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d001      	beq.n	8008b18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e0cf      	b.n	8008cb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d010      	beq.n	8008b46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689a      	ldr	r2, [r3, #8]
 8008b28:	4b66      	ldr	r3, [pc, #408]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d908      	bls.n	8008b46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b34:	4b63      	ldr	r3, [pc, #396]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	4960      	ldr	r1, [pc, #384]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d04c      	beq.n	8008bec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d107      	bne.n	8008b6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d121      	bne.n	8008baa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e0a6      	b.n	8008cb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d107      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b72:	4b54      	ldr	r3, [pc, #336]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d115      	bne.n	8008baa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e09a      	b.n	8008cb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d107      	bne.n	8008b9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d109      	bne.n	8008baa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e08e      	b.n	8008cb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e086      	b.n	8008cb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008baa:	4b46      	ldr	r3, [pc, #280]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f023 0203 	bic.w	r2, r3, #3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	4943      	ldr	r1, [pc, #268]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bbc:	f7fc fc00 	bl	80053c0 <HAL_GetTick>
 8008bc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bc2:	e00a      	b.n	8008bda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bc4:	f7fc fbfc 	bl	80053c0 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e06e      	b.n	8008cb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bda:	4b3a      	ldr	r3, [pc, #232]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f003 020c 	and.w	r2, r3, #12
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d1eb      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0302 	and.w	r3, r3, #2
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d010      	beq.n	8008c1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	4b31      	ldr	r3, [pc, #196]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d208      	bcs.n	8008c1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c08:	4b2e      	ldr	r3, [pc, #184]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	492b      	ldr	r1, [pc, #172]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008c16:	4313      	orrs	r3, r2
 8008c18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c1a:	4b29      	ldr	r3, [pc, #164]	@ (8008cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d210      	bcs.n	8008c4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c28:	4b25      	ldr	r3, [pc, #148]	@ (8008cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f023 0207 	bic.w	r2, r3, #7
 8008c30:	4923      	ldr	r1, [pc, #140]	@ (8008cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c38:	4b21      	ldr	r3, [pc, #132]	@ (8008cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d001      	beq.n	8008c4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e036      	b.n	8008cb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0304 	and.w	r3, r3, #4
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d008      	beq.n	8008c68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c56:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	4918      	ldr	r1, [pc, #96]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0308 	and.w	r3, r3, #8
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d009      	beq.n	8008c88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c74:	4b13      	ldr	r3, [pc, #76]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	4910      	ldr	r1, [pc, #64]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c88:	f000 f824 	bl	8008cd4 <HAL_RCC_GetSysClockFreq>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	091b      	lsrs	r3, r3, #4
 8008c94:	f003 030f 	and.w	r3, r3, #15
 8008c98:	490b      	ldr	r1, [pc, #44]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1f4>)
 8008c9a:	5ccb      	ldrb	r3, [r1, r3]
 8008c9c:	f003 031f 	and.w	r3, r3, #31
 8008ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca4:	4a09      	ldr	r2, [pc, #36]	@ (8008ccc <HAL_RCC_ClockConfig+0x1f8>)
 8008ca6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008ca8:	4b09      	ldr	r3, [pc, #36]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1fc>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fc fb37 	bl	8005320 <HAL_InitTick>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8008cb6:	7afb      	ldrb	r3, [r7, #11]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	40022000 	.word	0x40022000
 8008cc4:	40021000 	.word	0x40021000
 8008cc8:	08011704 	.word	0x08011704
 8008ccc:	20000028 	.word	0x20000028
 8008cd0:	2000002c 	.word	0x2000002c

08008cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b089      	sub	sp, #36	@ 0x24
 8008cd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61fb      	str	r3, [r7, #28]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8008ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 030c 	and.w	r3, r3, #12
 8008cea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cec:	4b3b      	ldr	r3, [pc, #236]	@ (8008ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <HAL_RCC_GetSysClockFreq+0x34>
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	2b0c      	cmp	r3, #12
 8008d00:	d121      	bne.n	8008d46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d11e      	bne.n	8008d46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008d08:	4b34      	ldr	r3, [pc, #208]	@ (8008ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d107      	bne.n	8008d24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008d14:	4b31      	ldr	r3, [pc, #196]	@ (8008ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8008d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d1a:	0a1b      	lsrs	r3, r3, #8
 8008d1c:	f003 030f 	and.w	r3, r3, #15
 8008d20:	61fb      	str	r3, [r7, #28]
 8008d22:	e005      	b.n	8008d30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008d24:	4b2d      	ldr	r3, [pc, #180]	@ (8008ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	091b      	lsrs	r3, r3, #4
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008d30:	4a2b      	ldr	r2, [pc, #172]	@ (8008de0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10d      	bne.n	8008d5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d44:	e00a      	b.n	8008d5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d102      	bne.n	8008d52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008d4c:	4b25      	ldr	r3, [pc, #148]	@ (8008de4 <HAL_RCC_GetSysClockFreq+0x110>)
 8008d4e:	61bb      	str	r3, [r7, #24]
 8008d50:	e004      	b.n	8008d5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	2b08      	cmp	r3, #8
 8008d56:	d101      	bne.n	8008d5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008d58:	4b23      	ldr	r3, [pc, #140]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x114>)
 8008d5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	2b0c      	cmp	r3, #12
 8008d60:	d134      	bne.n	8008dcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d62:	4b1e      	ldr	r3, [pc, #120]	@ (8008ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d003      	beq.n	8008d7a <HAL_RCC_GetSysClockFreq+0xa6>
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d003      	beq.n	8008d80 <HAL_RCC_GetSysClockFreq+0xac>
 8008d78:	e005      	b.n	8008d86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008de4 <HAL_RCC_GetSysClockFreq+0x110>)
 8008d7c:	617b      	str	r3, [r7, #20]
      break;
 8008d7e:	e005      	b.n	8008d8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008d80:	4b19      	ldr	r3, [pc, #100]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x114>)
 8008d82:	617b      	str	r3, [r7, #20]
      break;
 8008d84:	e002      	b.n	8008d8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	617b      	str	r3, [r7, #20]
      break;
 8008d8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d8c:	4b13      	ldr	r3, [pc, #76]	@ (8008ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	091b      	lsrs	r3, r3, #4
 8008d92:	f003 0307 	and.w	r3, r3, #7
 8008d96:	3301      	adds	r3, #1
 8008d98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008d9a:	4b10      	ldr	r3, [pc, #64]	@ (8008ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	0a1b      	lsrs	r3, r3, #8
 8008da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	fb03 f202 	mul.w	r2, r3, r2
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008db2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	0e5b      	lsrs	r3, r3, #25
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008dcc:	69bb      	ldr	r3, [r7, #24]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3724      	adds	r7, #36	@ 0x24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	40021000 	.word	0x40021000
 8008de0:	0801171c 	.word	0x0801171c
 8008de4:	00f42400 	.word	0x00f42400
 8008de8:	007a1200 	.word	0x007a1200

08008dec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dec:	b480      	push	{r7}
 8008dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008df0:	4b03      	ldr	r3, [pc, #12]	@ (8008e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8008df2:	681b      	ldr	r3, [r3, #0]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	20000028 	.word	0x20000028

08008e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008e08:	f7ff fff0 	bl	8008dec <HAL_RCC_GetHCLKFreq>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	4b06      	ldr	r3, [pc, #24]	@ (8008e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	0a1b      	lsrs	r3, r3, #8
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	4904      	ldr	r1, [pc, #16]	@ (8008e2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e1a:	5ccb      	ldrb	r3, [r1, r3]
 8008e1c:	f003 031f 	and.w	r3, r3, #31
 8008e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	40021000 	.word	0x40021000
 8008e2c:	08011714 	.word	0x08011714

08008e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008e34:	f7ff ffda 	bl	8008dec <HAL_RCC_GetHCLKFreq>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	4b06      	ldr	r3, [pc, #24]	@ (8008e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	0adb      	lsrs	r3, r3, #11
 8008e40:	f003 0307 	and.w	r3, r3, #7
 8008e44:	4904      	ldr	r1, [pc, #16]	@ (8008e58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e46:	5ccb      	ldrb	r3, [r1, r3]
 8008e48:	f003 031f 	and.w	r3, r3, #31
 8008e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	40021000 	.word	0x40021000
 8008e58:	08011714 	.word	0x08011714

08008e5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008e64:	2300      	movs	r3, #0
 8008e66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008e68:	4b2a      	ldr	r3, [pc, #168]	@ (8008f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008e74:	f7ff f9ee 	bl	8008254 <HAL_PWREx_GetVoltageRange>
 8008e78:	6178      	str	r0, [r7, #20]
 8008e7a:	e014      	b.n	8008ea6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e7c:	4b25      	ldr	r3, [pc, #148]	@ (8008f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e80:	4a24      	ldr	r2, [pc, #144]	@ (8008f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e88:	4b22      	ldr	r3, [pc, #136]	@ (8008f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008e94:	f7ff f9de 	bl	8008254 <HAL_PWREx_GetVoltageRange>
 8008e98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8008f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ea4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eac:	d10b      	bne.n	8008ec6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b80      	cmp	r3, #128	@ 0x80
 8008eb2:	d919      	bls.n	8008ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2ba0      	cmp	r3, #160	@ 0xa0
 8008eb8:	d902      	bls.n	8008ec0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008eba:	2302      	movs	r3, #2
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	e013      	b.n	8008ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	613b      	str	r3, [r7, #16]
 8008ec4:	e010      	b.n	8008ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b80      	cmp	r3, #128	@ 0x80
 8008eca:	d902      	bls.n	8008ed2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008ecc:	2303      	movs	r3, #3
 8008ece:	613b      	str	r3, [r7, #16]
 8008ed0:	e00a      	b.n	8008ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b80      	cmp	r3, #128	@ 0x80
 8008ed6:	d102      	bne.n	8008ede <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008ed8:	2302      	movs	r3, #2
 8008eda:	613b      	str	r3, [r7, #16]
 8008edc:	e004      	b.n	8008ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b70      	cmp	r3, #112	@ 0x70
 8008ee2:	d101      	bne.n	8008ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8008f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f023 0207 	bic.w	r2, r3, #7
 8008ef0:	4909      	ldr	r1, [pc, #36]	@ (8008f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008ef8:	4b07      	ldr	r3, [pc, #28]	@ (8008f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0307 	and.w	r3, r3, #7
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d001      	beq.n	8008f0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e000      	b.n	8008f0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40021000 	.word	0x40021000
 8008f18:	40022000 	.word	0x40022000

08008f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f24:	2300      	movs	r3, #0
 8008f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f28:	2300      	movs	r3, #0
 8008f2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d041      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008f40:	d02a      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008f42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008f46:	d824      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f4c:	d008      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008f4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f52:	d81e      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00a      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008f58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f5c:	d010      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f5e:	e018      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008f60:	4b86      	ldr	r3, [pc, #536]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	4a85      	ldr	r2, [pc, #532]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008f6c:	e015      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3304      	adds	r3, #4
 8008f72:	2100      	movs	r1, #0
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 fabb 	bl	80094f0 <RCCEx_PLLSAI1_Config>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008f7e:	e00c      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3320      	adds	r3, #32
 8008f84:	2100      	movs	r1, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fba6 	bl	80096d8 <RCCEx_PLLSAI2_Config>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008f90:	e003      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	74fb      	strb	r3, [r7, #19]
      break;
 8008f96:	e000      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f9a:	7cfb      	ldrb	r3, [r7, #19]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10b      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fa0:	4b76      	ldr	r3, [pc, #472]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fa6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fae:	4973      	ldr	r1, [pc, #460]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008fb6:	e001      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb8:	7cfb      	ldrb	r3, [r7, #19]
 8008fba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d041      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fcc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008fd0:	d02a      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008fd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008fd6:	d824      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008fd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fdc:	d008      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008fde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fe2:	d81e      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00a      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fec:	d010      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008fee:	e018      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008ff0:	4b62      	ldr	r3, [pc, #392]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	4a61      	ldr	r2, [pc, #388]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ffa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008ffc:	e015      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3304      	adds	r3, #4
 8009002:	2100      	movs	r1, #0
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fa73 	bl	80094f0 <RCCEx_PLLSAI1_Config>
 800900a:	4603      	mov	r3, r0
 800900c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800900e:	e00c      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3320      	adds	r3, #32
 8009014:	2100      	movs	r1, #0
 8009016:	4618      	mov	r0, r3
 8009018:	f000 fb5e 	bl	80096d8 <RCCEx_PLLSAI2_Config>
 800901c:	4603      	mov	r3, r0
 800901e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009020:	e003      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	74fb      	strb	r3, [r7, #19]
      break;
 8009026:	e000      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800902a:	7cfb      	ldrb	r3, [r7, #19]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10b      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009030:	4b52      	ldr	r3, [pc, #328]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009036:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800903e:	494f      	ldr	r1, [pc, #316]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009040:	4313      	orrs	r3, r2
 8009042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009046:	e001      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009048:	7cfb      	ldrb	r3, [r7, #19]
 800904a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 80a0 	beq.w	800919a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800905a:	2300      	movs	r3, #0
 800905c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800905e:	4b47      	ldr	r3, [pc, #284]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800906a:	2301      	movs	r3, #1
 800906c:	e000      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800906e:	2300      	movs	r3, #0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00d      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009074:	4b41      	ldr	r3, [pc, #260]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009078:	4a40      	ldr	r2, [pc, #256]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800907a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800907e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009080:	4b3e      	ldr	r3, [pc, #248]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009088:	60bb      	str	r3, [r7, #8]
 800908a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800908c:	2301      	movs	r3, #1
 800908e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009090:	4b3b      	ldr	r3, [pc, #236]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a3a      	ldr	r2, [pc, #232]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800909a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800909c:	f7fc f990 	bl	80053c0 <HAL_GetTick>
 80090a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80090a2:	e009      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090a4:	f7fc f98c 	bl	80053c0 <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d902      	bls.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	74fb      	strb	r3, [r7, #19]
        break;
 80090b6:	e005      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80090b8:	4b31      	ldr	r3, [pc, #196]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d0ef      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80090c4:	7cfb      	ldrb	r3, [r7, #19]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d15c      	bne.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80090ca:	4b2c      	ldr	r3, [pc, #176]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d01f      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d019      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80090e8:	4b24      	ldr	r3, [pc, #144]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090f4:	4b21      	ldr	r3, [pc, #132]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090fa:	4a20      	ldr	r2, [pc, #128]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009104:	4b1d      	ldr	r3, [pc, #116]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800910a:	4a1c      	ldr	r2, [pc, #112]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800910c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009114:	4a19      	ldr	r2, [pc, #100]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d016      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009126:	f7fc f94b 	bl	80053c0 <HAL_GetTick>
 800912a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800912c:	e00b      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800912e:	f7fc f947 	bl	80053c0 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800913c:	4293      	cmp	r3, r2
 800913e:	d902      	bls.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	74fb      	strb	r3, [r7, #19]
            break;
 8009144:	e006      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009146:	4b0d      	ldr	r3, [pc, #52]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800914c:	f003 0302 	and.w	r3, r3, #2
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0ec      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009154:	7cfb      	ldrb	r3, [r7, #19]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10c      	bne.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800915a:	4b08      	ldr	r3, [pc, #32]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800915c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800916a:	4904      	ldr	r1, [pc, #16]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800916c:	4313      	orrs	r3, r2
 800916e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009172:	e009      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009174:	7cfb      	ldrb	r3, [r7, #19]
 8009176:	74bb      	strb	r3, [r7, #18]
 8009178:	e006      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800917a:	bf00      	nop
 800917c:	40021000 	.word	0x40021000
 8009180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009184:	7cfb      	ldrb	r3, [r7, #19]
 8009186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009188:	7c7b      	ldrb	r3, [r7, #17]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d105      	bne.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800918e:	4b9e      	ldr	r3, [pc, #632]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009192:	4a9d      	ldr	r2, [pc, #628]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009198:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80091a6:	4b98      	ldr	r3, [pc, #608]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ac:	f023 0203 	bic.w	r2, r3, #3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b4:	4994      	ldr	r1, [pc, #592]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0302 	and.w	r3, r3, #2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00a      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80091c8:	4b8f      	ldr	r3, [pc, #572]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ce:	f023 020c 	bic.w	r2, r3, #12
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d6:	498c      	ldr	r1, [pc, #560]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0304 	and.w	r3, r3, #4
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00a      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80091ea:	4b87      	ldr	r3, [pc, #540]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f8:	4983      	ldr	r1, [pc, #524]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0308 	and.w	r3, r3, #8
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00a      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800920c:	4b7e      	ldr	r3, [pc, #504]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800920e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009212:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800921a:	497b      	ldr	r1, [pc, #492]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800921c:	4313      	orrs	r3, r2
 800921e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0310 	and.w	r3, r3, #16
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00a      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800922e:	4b76      	ldr	r3, [pc, #472]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009234:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800923c:	4972      	ldr	r1, [pc, #456]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800923e:	4313      	orrs	r3, r2
 8009240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0320 	and.w	r3, r3, #32
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00a      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009250:	4b6d      	ldr	r3, [pc, #436]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009256:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800925e:	496a      	ldr	r1, [pc, #424]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009260:	4313      	orrs	r3, r2
 8009262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009272:	4b65      	ldr	r3, [pc, #404]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009278:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009280:	4961      	ldr	r1, [pc, #388]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009282:	4313      	orrs	r3, r2
 8009284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00a      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009294:	4b5c      	ldr	r3, [pc, #368]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800929a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092a2:	4959      	ldr	r1, [pc, #356]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092b6:	4b54      	ldr	r3, [pc, #336]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092c4:	4950      	ldr	r1, [pc, #320]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00a      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80092d8:	4b4b      	ldr	r3, [pc, #300]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092e6:	4948      	ldr	r1, [pc, #288]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80092fa:	4b43      	ldr	r3, [pc, #268]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009300:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009308:	493f      	ldr	r1, [pc, #252]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800930a:	4313      	orrs	r3, r2
 800930c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d028      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800931c:	4b3a      	ldr	r3, [pc, #232]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800931e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009322:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800932a:	4937      	ldr	r1, [pc, #220]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800932c:	4313      	orrs	r3, r2
 800932e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800933a:	d106      	bne.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800933c:	4b32      	ldr	r3, [pc, #200]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	4a31      	ldr	r2, [pc, #196]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009346:	60d3      	str	r3, [r2, #12]
 8009348:	e011      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800934e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009352:	d10c      	bne.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3304      	adds	r3, #4
 8009358:	2101      	movs	r1, #1
 800935a:	4618      	mov	r0, r3
 800935c:	f000 f8c8 	bl	80094f0 <RCCEx_PLLSAI1_Config>
 8009360:	4603      	mov	r3, r0
 8009362:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009364:	7cfb      	ldrb	r3, [r7, #19]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800936a:	7cfb      	ldrb	r3, [r7, #19]
 800936c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d028      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800937a:	4b23      	ldr	r3, [pc, #140]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800937c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009380:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009388:	491f      	ldr	r1, [pc, #124]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800938a:	4313      	orrs	r3, r2
 800938c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009398:	d106      	bne.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800939a:	4b1b      	ldr	r3, [pc, #108]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	4a1a      	ldr	r2, [pc, #104]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093a4:	60d3      	str	r3, [r2, #12]
 80093a6:	e011      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093b0:	d10c      	bne.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3304      	adds	r3, #4
 80093b6:	2101      	movs	r1, #1
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 f899 	bl	80094f0 <RCCEx_PLLSAI1_Config>
 80093be:	4603      	mov	r3, r0
 80093c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80093c2:	7cfb      	ldrb	r3, [r7, #19]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80093c8:	7cfb      	ldrb	r3, [r7, #19]
 80093ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d02b      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80093d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093e6:	4908      	ldr	r1, [pc, #32]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093f6:	d109      	bne.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093f8:	4b03      	ldr	r3, [pc, #12]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	4a02      	ldr	r2, [pc, #8]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009402:	60d3      	str	r3, [r2, #12]
 8009404:	e014      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009406:	bf00      	nop
 8009408:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009410:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009414:	d10c      	bne.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3304      	adds	r3, #4
 800941a:	2101      	movs	r1, #1
 800941c:	4618      	mov	r0, r3
 800941e:	f000 f867 	bl	80094f0 <RCCEx_PLLSAI1_Config>
 8009422:	4603      	mov	r3, r0
 8009424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009426:	7cfb      	ldrb	r3, [r7, #19]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800942c:	7cfb      	ldrb	r3, [r7, #19]
 800942e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d02f      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800943c:	4b2b      	ldr	r3, [pc, #172]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800943e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009442:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800944a:	4928      	ldr	r1, [pc, #160]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800944c:	4313      	orrs	r3, r2
 800944e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800945a:	d10d      	bne.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3304      	adds	r3, #4
 8009460:	2102      	movs	r1, #2
 8009462:	4618      	mov	r0, r3
 8009464:	f000 f844 	bl	80094f0 <RCCEx_PLLSAI1_Config>
 8009468:	4603      	mov	r3, r0
 800946a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800946c:	7cfb      	ldrb	r3, [r7, #19]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d014      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009472:	7cfb      	ldrb	r3, [r7, #19]
 8009474:	74bb      	strb	r3, [r7, #18]
 8009476:	e011      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800947c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009480:	d10c      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	3320      	adds	r3, #32
 8009486:	2102      	movs	r1, #2
 8009488:	4618      	mov	r0, r3
 800948a:	f000 f925 	bl	80096d8 <RCCEx_PLLSAI2_Config>
 800948e:	4603      	mov	r3, r0
 8009490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009492:	7cfb      	ldrb	r3, [r7, #19]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009498:	7cfb      	ldrb	r3, [r7, #19]
 800949a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00a      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80094a8:	4b10      	ldr	r3, [pc, #64]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80094aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094b6:	490d      	ldr	r1, [pc, #52]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00b      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80094ca:	4b08      	ldr	r3, [pc, #32]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80094cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094da:	4904      	ldr	r1, [pc, #16]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80094e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	40021000 	.word	0x40021000

080094f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80094fe:	4b75      	ldr	r3, [pc, #468]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	f003 0303 	and.w	r3, r3, #3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d018      	beq.n	800953c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800950a:	4b72      	ldr	r3, [pc, #456]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f003 0203 	and.w	r2, r3, #3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d10d      	bne.n	8009536 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
       ||
 800951e:	2b00      	cmp	r3, #0
 8009520:	d009      	beq.n	8009536 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009522:	4b6c      	ldr	r3, [pc, #432]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	091b      	lsrs	r3, r3, #4
 8009528:	f003 0307 	and.w	r3, r3, #7
 800952c:	1c5a      	adds	r2, r3, #1
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	685b      	ldr	r3, [r3, #4]
       ||
 8009532:	429a      	cmp	r2, r3
 8009534:	d047      	beq.n	80095c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	73fb      	strb	r3, [r7, #15]
 800953a:	e044      	b.n	80095c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b03      	cmp	r3, #3
 8009542:	d018      	beq.n	8009576 <RCCEx_PLLSAI1_Config+0x86>
 8009544:	2b03      	cmp	r3, #3
 8009546:	d825      	bhi.n	8009594 <RCCEx_PLLSAI1_Config+0xa4>
 8009548:	2b01      	cmp	r3, #1
 800954a:	d002      	beq.n	8009552 <RCCEx_PLLSAI1_Config+0x62>
 800954c:	2b02      	cmp	r3, #2
 800954e:	d009      	beq.n	8009564 <RCCEx_PLLSAI1_Config+0x74>
 8009550:	e020      	b.n	8009594 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009552:	4b60      	ldr	r3, [pc, #384]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d11d      	bne.n	800959a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009562:	e01a      	b.n	800959a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009564:	4b5b      	ldr	r3, [pc, #364]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800956c:	2b00      	cmp	r3, #0
 800956e:	d116      	bne.n	800959e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009574:	e013      	b.n	800959e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009576:	4b57      	ldr	r3, [pc, #348]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10f      	bne.n	80095a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009582:	4b54      	ldr	r3, [pc, #336]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d109      	bne.n	80095a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009592:	e006      	b.n	80095a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	73fb      	strb	r3, [r7, #15]
      break;
 8009598:	e004      	b.n	80095a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800959a:	bf00      	nop
 800959c:	e002      	b.n	80095a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800959e:	bf00      	nop
 80095a0:	e000      	b.n	80095a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80095a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10d      	bne.n	80095c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80095aa:	4b4a      	ldr	r3, [pc, #296]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6819      	ldr	r1, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	011b      	lsls	r3, r3, #4
 80095be:	430b      	orrs	r3, r1
 80095c0:	4944      	ldr	r1, [pc, #272]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d17d      	bne.n	80096c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80095cc:	4b41      	ldr	r3, [pc, #260]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a40      	ldr	r2, [pc, #256]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80095d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095d8:	f7fb fef2 	bl	80053c0 <HAL_GetTick>
 80095dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80095de:	e009      	b.n	80095f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80095e0:	f7fb feee 	bl	80053c0 <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d902      	bls.n	80095f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	73fb      	strb	r3, [r7, #15]
        break;
 80095f2:	e005      	b.n	8009600 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80095f4:	4b37      	ldr	r3, [pc, #220]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1ef      	bne.n	80095e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d160      	bne.n	80096c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d111      	bne.n	8009630 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800960c:	4b31      	ldr	r3, [pc, #196]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8009614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	6892      	ldr	r2, [r2, #8]
 800961c:	0211      	lsls	r1, r2, #8
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	68d2      	ldr	r2, [r2, #12]
 8009622:	0912      	lsrs	r2, r2, #4
 8009624:	0452      	lsls	r2, r2, #17
 8009626:	430a      	orrs	r2, r1
 8009628:	492a      	ldr	r1, [pc, #168]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800962a:	4313      	orrs	r3, r2
 800962c:	610b      	str	r3, [r1, #16]
 800962e:	e027      	b.n	8009680 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d112      	bne.n	800965c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009636:	4b27      	ldr	r3, [pc, #156]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800963e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	6892      	ldr	r2, [r2, #8]
 8009646:	0211      	lsls	r1, r2, #8
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	6912      	ldr	r2, [r2, #16]
 800964c:	0852      	lsrs	r2, r2, #1
 800964e:	3a01      	subs	r2, #1
 8009650:	0552      	lsls	r2, r2, #21
 8009652:	430a      	orrs	r2, r1
 8009654:	491f      	ldr	r1, [pc, #124]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009656:	4313      	orrs	r3, r2
 8009658:	610b      	str	r3, [r1, #16]
 800965a:	e011      	b.n	8009680 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800965c:	4b1d      	ldr	r3, [pc, #116]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009664:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	6892      	ldr	r2, [r2, #8]
 800966c:	0211      	lsls	r1, r2, #8
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	6952      	ldr	r2, [r2, #20]
 8009672:	0852      	lsrs	r2, r2, #1
 8009674:	3a01      	subs	r2, #1
 8009676:	0652      	lsls	r2, r2, #25
 8009678:	430a      	orrs	r2, r1
 800967a:	4916      	ldr	r1, [pc, #88]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800967c:	4313      	orrs	r3, r2
 800967e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009680:	4b14      	ldr	r3, [pc, #80]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a13      	ldr	r2, [pc, #76]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009686:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800968a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800968c:	f7fb fe98 	bl	80053c0 <HAL_GetTick>
 8009690:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009692:	e009      	b.n	80096a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009694:	f7fb fe94 	bl	80053c0 <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d902      	bls.n	80096a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	73fb      	strb	r3, [r7, #15]
          break;
 80096a6:	e005      	b.n	80096b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80096a8:	4b0a      	ldr	r3, [pc, #40]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0ef      	beq.n	8009694 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80096ba:	4b06      	ldr	r3, [pc, #24]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80096bc:	691a      	ldr	r2, [r3, #16]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	4904      	ldr	r1, [pc, #16]	@ (80096d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	40021000 	.word	0x40021000

080096d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80096e6:	4b6a      	ldr	r3, [pc, #424]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	f003 0303 	and.w	r3, r3, #3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d018      	beq.n	8009724 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80096f2:	4b67      	ldr	r3, [pc, #412]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f003 0203 	and.w	r2, r3, #3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d10d      	bne.n	800971e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
       ||
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800970a:	4b61      	ldr	r3, [pc, #388]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	091b      	lsrs	r3, r3, #4
 8009710:	f003 0307 	and.w	r3, r3, #7
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
       ||
 800971a:	429a      	cmp	r2, r3
 800971c:	d047      	beq.n	80097ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	73fb      	strb	r3, [r7, #15]
 8009722:	e044      	b.n	80097ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b03      	cmp	r3, #3
 800972a:	d018      	beq.n	800975e <RCCEx_PLLSAI2_Config+0x86>
 800972c:	2b03      	cmp	r3, #3
 800972e:	d825      	bhi.n	800977c <RCCEx_PLLSAI2_Config+0xa4>
 8009730:	2b01      	cmp	r3, #1
 8009732:	d002      	beq.n	800973a <RCCEx_PLLSAI2_Config+0x62>
 8009734:	2b02      	cmp	r3, #2
 8009736:	d009      	beq.n	800974c <RCCEx_PLLSAI2_Config+0x74>
 8009738:	e020      	b.n	800977c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800973a:	4b55      	ldr	r3, [pc, #340]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d11d      	bne.n	8009782 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800974a:	e01a      	b.n	8009782 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800974c:	4b50      	ldr	r3, [pc, #320]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009754:	2b00      	cmp	r3, #0
 8009756:	d116      	bne.n	8009786 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800975c:	e013      	b.n	8009786 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800975e:	4b4c      	ldr	r3, [pc, #304]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10f      	bne.n	800978a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800976a:	4b49      	ldr	r3, [pc, #292]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009772:	2b00      	cmp	r3, #0
 8009774:	d109      	bne.n	800978a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800977a:	e006      	b.n	800978a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	73fb      	strb	r3, [r7, #15]
      break;
 8009780:	e004      	b.n	800978c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009782:	bf00      	nop
 8009784:	e002      	b.n	800978c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009786:	bf00      	nop
 8009788:	e000      	b.n	800978c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800978a:	bf00      	nop
    }

    if(status == HAL_OK)
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10d      	bne.n	80097ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009792:	4b3f      	ldr	r3, [pc, #252]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6819      	ldr	r1, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	011b      	lsls	r3, r3, #4
 80097a6:	430b      	orrs	r3, r1
 80097a8:	4939      	ldr	r1, [pc, #228]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d167      	bne.n	8009884 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80097b4:	4b36      	ldr	r3, [pc, #216]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a35      	ldr	r2, [pc, #212]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80097ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097c0:	f7fb fdfe 	bl	80053c0 <HAL_GetTick>
 80097c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80097c6:	e009      	b.n	80097dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80097c8:	f7fb fdfa 	bl	80053c0 <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d902      	bls.n	80097dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	73fb      	strb	r3, [r7, #15]
        break;
 80097da:	e005      	b.n	80097e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80097dc:	4b2c      	ldr	r3, [pc, #176]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1ef      	bne.n	80097c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d14a      	bne.n	8009884 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d111      	bne.n	8009818 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80097f4:	4b26      	ldr	r3, [pc, #152]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80097fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	6892      	ldr	r2, [r2, #8]
 8009804:	0211      	lsls	r1, r2, #8
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	68d2      	ldr	r2, [r2, #12]
 800980a:	0912      	lsrs	r2, r2, #4
 800980c:	0452      	lsls	r2, r2, #17
 800980e:	430a      	orrs	r2, r1
 8009810:	491f      	ldr	r1, [pc, #124]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009812:	4313      	orrs	r3, r2
 8009814:	614b      	str	r3, [r1, #20]
 8009816:	e011      	b.n	800983c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009818:	4b1d      	ldr	r3, [pc, #116]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009820:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6892      	ldr	r2, [r2, #8]
 8009828:	0211      	lsls	r1, r2, #8
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	6912      	ldr	r2, [r2, #16]
 800982e:	0852      	lsrs	r2, r2, #1
 8009830:	3a01      	subs	r2, #1
 8009832:	0652      	lsls	r2, r2, #25
 8009834:	430a      	orrs	r2, r1
 8009836:	4916      	ldr	r1, [pc, #88]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009838:	4313      	orrs	r3, r2
 800983a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800983c:	4b14      	ldr	r3, [pc, #80]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a13      	ldr	r2, [pc, #76]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009846:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009848:	f7fb fdba 	bl	80053c0 <HAL_GetTick>
 800984c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800984e:	e009      	b.n	8009864 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009850:	f7fb fdb6 	bl	80053c0 <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	2b02      	cmp	r3, #2
 800985c:	d902      	bls.n	8009864 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	73fb      	strb	r3, [r7, #15]
          break;
 8009862:	e005      	b.n	8009870 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009864:	4b0a      	ldr	r3, [pc, #40]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0ef      	beq.n	8009850 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d106      	bne.n	8009884 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009876:	4b06      	ldr	r3, [pc, #24]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009878:	695a      	ldr	r2, [r3, #20]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	4904      	ldr	r1, [pc, #16]	@ (8009890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009880:	4313      	orrs	r3, r2
 8009882:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009884:	7bfb      	ldrb	r3, [r7, #15]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	40021000 	.word	0x40021000

08009894 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d079      	beq.n	800999a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d106      	bne.n	80098c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7fa fd14 	bl	80042e8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f003 0310 	and.w	r3, r3, #16
 80098d2:	2b10      	cmp	r3, #16
 80098d4:	d058      	beq.n	8009988 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	22ca      	movs	r2, #202	@ 0xca
 80098dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2253      	movs	r2, #83	@ 0x53
 80098e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fa4e 	bl	8009d88 <RTC_EnterInitMode>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d127      	bne.n	8009946 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	6812      	ldr	r2, [r2, #0]
 8009900:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009908:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6899      	ldr	r1, [r3, #8]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	431a      	orrs	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	431a      	orrs	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	430a      	orrs	r2, r1
 8009926:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	68d2      	ldr	r2, [r2, #12]
 8009930:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6919      	ldr	r1, [r3, #16]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	041a      	lsls	r2, r3, #16
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fa52 	bl	8009df0 <RTC_ExitInitMode>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d113      	bne.n	800997e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f022 0203 	bic.w	r2, r2, #3
 8009964:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	69da      	ldr	r2, [r3, #28]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	431a      	orrs	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	22ff      	movs	r2, #255	@ 0xff
 8009984:	625a      	str	r2, [r3, #36]	@ 0x24
 8009986:	e001      	b.n	800998c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d103      	bne.n	800999a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800999a:	7bfb      	ldrb	r3, [r7, #15]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80099a4:	b590      	push	{r4, r7, lr}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d101      	bne.n	80099be <HAL_RTC_SetTime+0x1a>
 80099ba:	2302      	movs	r3, #2
 80099bc:	e08b      	b.n	8009ad6 <HAL_RTC_SetTime+0x132>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2202      	movs	r2, #2
 80099ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	22ca      	movs	r2, #202	@ 0xca
 80099d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2253      	movs	r2, #83	@ 0x53
 80099dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 f9d2 	bl	8009d88 <RTC_EnterInitMode>
 80099e4:	4603      	mov	r3, r0
 80099e6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80099e8:	7cfb      	ldrb	r3, [r7, #19]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d163      	bne.n	8009ab6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d126      	bne.n	8009a42 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d102      	bne.n	8009a08 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2200      	movs	r2, #0
 8009a06:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 fa2d 	bl	8009e6c <RTC_ByteToBcd2>
 8009a12:	4603      	mov	r3, r0
 8009a14:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	785b      	ldrb	r3, [r3, #1]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 fa26 	bl	8009e6c <RTC_ByteToBcd2>
 8009a20:	4603      	mov	r3, r0
 8009a22:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009a24:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	789b      	ldrb	r3, [r3, #2]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fa1e 	bl	8009e6c <RTC_ByteToBcd2>
 8009a30:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009a32:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	78db      	ldrb	r3, [r3, #3]
 8009a3a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	e018      	b.n	8009a74 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d102      	bne.n	8009a56 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2200      	movs	r2, #0
 8009a54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	785b      	ldrb	r3, [r3, #1]
 8009a60:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009a62:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009a68:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	78db      	ldrb	r3, [r3, #3]
 8009a6e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009a70:	4313      	orrs	r3, r2
 8009a72:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009a7e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009a82:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689a      	ldr	r2, [r3, #8]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009a92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6899      	ldr	r1, [r3, #8]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 f99f 	bl	8009df0 <RTC_ExitInitMode>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	22ff      	movs	r2, #255	@ 0xff
 8009abc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009abe:	7cfb      	ldrb	r3, [r7, #19]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009ad4:	7cfb      	ldrb	r3, [r7, #19]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd90      	pop	{r4, r7, pc}

08009ade <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b086      	sub	sp, #24
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	60b9      	str	r1, [r7, #8]
 8009ae8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009b0c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009b10:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	0c1b      	lsrs	r3, r3, #16
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	0a1b      	lsrs	r3, r3, #8
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	0d9b      	lsrs	r3, r3, #22
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d11a      	bne.n	8009b8c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 f9a6 	bl	8009eac <RTC_Bcd2ToByte>
 8009b60:	4603      	mov	r3, r0
 8009b62:	461a      	mov	r2, r3
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	785b      	ldrb	r3, [r3, #1]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 f99d 	bl	8009eac <RTC_Bcd2ToByte>
 8009b72:	4603      	mov	r3, r0
 8009b74:	461a      	mov	r2, r3
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	789b      	ldrb	r3, [r3, #2]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 f994 	bl	8009eac <RTC_Bcd2ToByte>
 8009b84:	4603      	mov	r3, r0
 8009b86:	461a      	mov	r2, r3
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b96:	b590      	push	{r4, r7, lr}
 8009b98:	b087      	sub	sp, #28
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d101      	bne.n	8009bb0 <HAL_RTC_SetDate+0x1a>
 8009bac:	2302      	movs	r3, #2
 8009bae:	e075      	b.n	8009c9c <HAL_RTC_SetDate+0x106>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10e      	bne.n	8009be4 <HAL_RTC_SetDate+0x4e>
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	785b      	ldrb	r3, [r3, #1]
 8009bca:	f003 0310 	and.w	r3, r3, #16
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d008      	beq.n	8009be4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	785b      	ldrb	r3, [r3, #1]
 8009bd6:	f023 0310 	bic.w	r3, r3, #16
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	330a      	adds	r3, #10
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d11c      	bne.n	8009c24 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	78db      	ldrb	r3, [r3, #3]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 f93c 	bl	8009e6c <RTC_ByteToBcd2>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	785b      	ldrb	r3, [r3, #1]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 f935 	bl	8009e6c <RTC_ByteToBcd2>
 8009c02:	4603      	mov	r3, r0
 8009c04:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009c06:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	789b      	ldrb	r3, [r3, #2]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 f92d 	bl	8009e6c <RTC_ByteToBcd2>
 8009c12:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009c14:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	e00e      	b.n	8009c42 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	78db      	ldrb	r3, [r3, #3]
 8009c28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	785b      	ldrb	r3, [r3, #1]
 8009c2e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009c30:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009c36:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	22ca      	movs	r2, #202	@ 0xca
 8009c48:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2253      	movs	r2, #83	@ 0x53
 8009c50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 f898 	bl	8009d88 <RTC_EnterInitMode>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009c5c:	7cfb      	ldrb	r3, [r7, #19]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10c      	bne.n	8009c7c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009c6c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009c70:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f000 f8bc 	bl	8009df0 <RTC_ExitInitMode>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	22ff      	movs	r2, #255	@ 0xff
 8009c82:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009c84:	7cfb      	ldrb	r3, [r7, #19]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d103      	bne.n	8009c92 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009c9a:	7cfb      	ldrb	r3, [r7, #19]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	371c      	adds	r7, #28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd90      	pop	{r4, r7, pc}

08009ca4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009cba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009cbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	0c1b      	lsrs	r3, r3, #16
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	0a1b      	lsrs	r3, r3, #8
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	f003 031f 	and.w	r3, r3, #31
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	0b5b      	lsrs	r3, r3, #13
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	f003 0307 	and.w	r3, r3, #7
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d11a      	bne.n	8009d34 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	78db      	ldrb	r3, [r3, #3]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 f8d2 	bl	8009eac <RTC_Bcd2ToByte>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	785b      	ldrb	r3, [r3, #1]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 f8c9 	bl	8009eac <RTC_Bcd2ToByte>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	789b      	ldrb	r3, [r3, #2]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 f8c0 	bl	8009eac <RTC_Bcd2ToByte>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	461a      	mov	r2, r3
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8009d84 <HAL_RTC_WaitForSynchro+0x44>)
 8009d4e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009d50:	f7fb fb36 	bl	80053c0 <HAL_GetTick>
 8009d54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009d56:	e009      	b.n	8009d6c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009d58:	f7fb fb32 	bl	80053c0 <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d66:	d901      	bls.n	8009d6c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	e007      	b.n	8009d7c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	f003 0320 	and.w	r3, r3, #32
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0ee      	beq.n	8009d58 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	0003ff5f 	.word	0x0003ff5f

08009d88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d120      	bne.n	8009de4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f04f 32ff 	mov.w	r2, #4294967295
 8009daa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009dac:	f7fb fb08 	bl	80053c0 <HAL_GetTick>
 8009db0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009db2:	e00d      	b.n	8009dd0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009db4:	f7fb fb04 	bl	80053c0 <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009dc2:	d905      	bls.n	8009dd0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2203      	movs	r2, #3
 8009dcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d102      	bne.n	8009de4 <RTC_EnterInitMode+0x5c>
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	2b03      	cmp	r3, #3
 8009de2:	d1e7      	bne.n	8009db4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
	...

08009df0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8009e68 <RTC_ExitInitMode+0x78>)
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	4a19      	ldr	r2, [pc, #100]	@ (8009e68 <RTC_ExitInitMode+0x78>)
 8009e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e06:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009e08:	4b17      	ldr	r3, [pc, #92]	@ (8009e68 <RTC_ExitInitMode+0x78>)
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f003 0320 	and.w	r3, r3, #32
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10c      	bne.n	8009e2e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff ff93 	bl	8009d40 <HAL_RTC_WaitForSynchro>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01e      	beq.n	8009e5e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2203      	movs	r2, #3
 8009e24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	73fb      	strb	r3, [r7, #15]
 8009e2c:	e017      	b.n	8009e5e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009e68 <RTC_ExitInitMode+0x78>)
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	4a0d      	ldr	r2, [pc, #52]	@ (8009e68 <RTC_ExitInitMode+0x78>)
 8009e34:	f023 0320 	bic.w	r3, r3, #32
 8009e38:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7ff ff80 	bl	8009d40 <HAL_RTC_WaitForSynchro>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d005      	beq.n	8009e52 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2203      	movs	r2, #3
 8009e4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009e4e:	2303      	movs	r3, #3
 8009e50:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009e52:	4b05      	ldr	r3, [pc, #20]	@ (8009e68 <RTC_ExitInitMode+0x78>)
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	4a04      	ldr	r2, [pc, #16]	@ (8009e68 <RTC_ExitInitMode+0x78>)
 8009e58:	f043 0320 	orr.w	r3, r3, #32
 8009e5c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	40002800 	.word	0x40002800

08009e6c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009e76:	2300      	movs	r3, #0
 8009e78:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009e7a:	79fb      	ldrb	r3, [r7, #7]
 8009e7c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009e7e:	e005      	b.n	8009e8c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	3301      	adds	r3, #1
 8009e84:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009e86:	7afb      	ldrb	r3, [r7, #11]
 8009e88:	3b0a      	subs	r3, #10
 8009e8a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009e8c:	7afb      	ldrb	r3, [r7, #11]
 8009e8e:	2b09      	cmp	r3, #9
 8009e90:	d8f6      	bhi.n	8009e80 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	011b      	lsls	r3, r3, #4
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	7afb      	ldrb	r3, [r7, #11]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	b2db      	uxtb	r3, r3
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	091b      	lsrs	r3, r3, #4
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	0092      	lsls	r2, r2, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8009ec6:	79fb      	ldrb	r3, [r7, #7]
 8009ec8:	f003 030f 	and.w	r3, r3, #15
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	b2db      	uxtb	r3, r3
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3714      	adds	r7, #20
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_RTCEx_SetTimeStamp>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_RTCEx_SetTimeStamp+0x1a>
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e034      	b.n	8009f64 <HAL_RTCEx_SetTimeStamp+0x84>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2202      	movs	r2, #2
 8009f06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f14:	f023 0308 	bic.w	r3, r3, #8
 8009f18:	617b      	str	r3, [r7, #20]

  tmpreg |= TimeStampEdge;
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	22ca      	movs	r2, #202	@ 0xca
 8009f28:	625a      	str	r2, [r3, #36]	@ 0x24
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2253      	movs	r2, #83	@ 0x53
 8009f30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689a      	ldr	r2, [r3, #8]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f48:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	22ff      	movs	r2, #255	@ 0xff
 8009f50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	371c      	adds	r7, #28
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e049      	b.n	800a016 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d106      	bne.n	8009f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7fa f9d8 	bl	800434c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3304      	adds	r3, #4
 8009fac:	4619      	mov	r1, r3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	f000 fa50 	bl	800a454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d109      	bne.n	800a044 <HAL_TIM_PWM_Start+0x24>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b01      	cmp	r3, #1
 800a03a:	bf14      	ite	ne
 800a03c:	2301      	movne	r3, #1
 800a03e:	2300      	moveq	r3, #0
 800a040:	b2db      	uxtb	r3, r3
 800a042:	e03c      	b.n	800a0be <HAL_TIM_PWM_Start+0x9e>
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b04      	cmp	r3, #4
 800a048:	d109      	bne.n	800a05e <HAL_TIM_PWM_Start+0x3e>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b01      	cmp	r3, #1
 800a054:	bf14      	ite	ne
 800a056:	2301      	movne	r3, #1
 800a058:	2300      	moveq	r3, #0
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	e02f      	b.n	800a0be <HAL_TIM_PWM_Start+0x9e>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b08      	cmp	r3, #8
 800a062:	d109      	bne.n	800a078 <HAL_TIM_PWM_Start+0x58>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	bf14      	ite	ne
 800a070:	2301      	movne	r3, #1
 800a072:	2300      	moveq	r3, #0
 800a074:	b2db      	uxtb	r3, r3
 800a076:	e022      	b.n	800a0be <HAL_TIM_PWM_Start+0x9e>
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2b0c      	cmp	r3, #12
 800a07c:	d109      	bne.n	800a092 <HAL_TIM_PWM_Start+0x72>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b01      	cmp	r3, #1
 800a088:	bf14      	ite	ne
 800a08a:	2301      	movne	r3, #1
 800a08c:	2300      	moveq	r3, #0
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	e015      	b.n	800a0be <HAL_TIM_PWM_Start+0x9e>
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b10      	cmp	r3, #16
 800a096:	d109      	bne.n	800a0ac <HAL_TIM_PWM_Start+0x8c>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	bf14      	ite	ne
 800a0a4:	2301      	movne	r3, #1
 800a0a6:	2300      	moveq	r3, #0
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	e008      	b.n	800a0be <HAL_TIM_PWM_Start+0x9e>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	bf14      	ite	ne
 800a0b8:	2301      	movne	r3, #1
 800a0ba:	2300      	moveq	r3, #0
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e09c      	b.n	800a200 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d104      	bne.n	800a0d6 <HAL_TIM_PWM_Start+0xb6>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0d4:	e023      	b.n	800a11e <HAL_TIM_PWM_Start+0xfe>
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	d104      	bne.n	800a0e6 <HAL_TIM_PWM_Start+0xc6>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2202      	movs	r2, #2
 800a0e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0e4:	e01b      	b.n	800a11e <HAL_TIM_PWM_Start+0xfe>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2b08      	cmp	r3, #8
 800a0ea:	d104      	bne.n	800a0f6 <HAL_TIM_PWM_Start+0xd6>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0f4:	e013      	b.n	800a11e <HAL_TIM_PWM_Start+0xfe>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b0c      	cmp	r3, #12
 800a0fa:	d104      	bne.n	800a106 <HAL_TIM_PWM_Start+0xe6>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a104:	e00b      	b.n	800a11e <HAL_TIM_PWM_Start+0xfe>
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b10      	cmp	r3, #16
 800a10a:	d104      	bne.n	800a116 <HAL_TIM_PWM_Start+0xf6>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2202      	movs	r2, #2
 800a110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a114:	e003      	b.n	800a11e <HAL_TIM_PWM_Start+0xfe>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2202      	movs	r2, #2
 800a11a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2201      	movs	r2, #1
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fd10 	bl	800ab4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a35      	ldr	r2, [pc, #212]	@ (800a208 <HAL_TIM_PWM_Start+0x1e8>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d013      	beq.n	800a15e <HAL_TIM_PWM_Start+0x13e>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a34      	ldr	r2, [pc, #208]	@ (800a20c <HAL_TIM_PWM_Start+0x1ec>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d00e      	beq.n	800a15e <HAL_TIM_PWM_Start+0x13e>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a32      	ldr	r2, [pc, #200]	@ (800a210 <HAL_TIM_PWM_Start+0x1f0>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d009      	beq.n	800a15e <HAL_TIM_PWM_Start+0x13e>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a31      	ldr	r2, [pc, #196]	@ (800a214 <HAL_TIM_PWM_Start+0x1f4>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d004      	beq.n	800a15e <HAL_TIM_PWM_Start+0x13e>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a2f      	ldr	r2, [pc, #188]	@ (800a218 <HAL_TIM_PWM_Start+0x1f8>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d101      	bne.n	800a162 <HAL_TIM_PWM_Start+0x142>
 800a15e:	2301      	movs	r3, #1
 800a160:	e000      	b.n	800a164 <HAL_TIM_PWM_Start+0x144>
 800a162:	2300      	movs	r3, #0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d007      	beq.n	800a178 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a176:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a22      	ldr	r2, [pc, #136]	@ (800a208 <HAL_TIM_PWM_Start+0x1e8>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d01d      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a18a:	d018      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a22      	ldr	r2, [pc, #136]	@ (800a21c <HAL_TIM_PWM_Start+0x1fc>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d013      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a21      	ldr	r2, [pc, #132]	@ (800a220 <HAL_TIM_PWM_Start+0x200>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d00e      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a224 <HAL_TIM_PWM_Start+0x204>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d009      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a17      	ldr	r2, [pc, #92]	@ (800a20c <HAL_TIM_PWM_Start+0x1ec>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d004      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a15      	ldr	r2, [pc, #84]	@ (800a210 <HAL_TIM_PWM_Start+0x1f0>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d115      	bne.n	800a1ea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	4b18      	ldr	r3, [pc, #96]	@ (800a228 <HAL_TIM_PWM_Start+0x208>)
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2b06      	cmp	r3, #6
 800a1ce:	d015      	beq.n	800a1fc <HAL_TIM_PWM_Start+0x1dc>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1d6:	d011      	beq.n	800a1fc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f042 0201 	orr.w	r2, r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1e8:	e008      	b.n	800a1fc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f042 0201 	orr.w	r2, r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	e000      	b.n	800a1fe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	40012c00 	.word	0x40012c00
 800a20c:	40013400 	.word	0x40013400
 800a210:	40014000 	.word	0x40014000
 800a214:	40014400 	.word	0x40014400
 800a218:	40014800 	.word	0x40014800
 800a21c:	40000400 	.word	0x40000400
 800a220:	40000800 	.word	0x40000800
 800a224:	40000c00 	.word	0x40000c00
 800a228:	00010007 	.word	0x00010007

0800a22c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a246:	2302      	movs	r3, #2
 800a248:	e0ff      	b.n	800a44a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b14      	cmp	r3, #20
 800a256:	f200 80f0 	bhi.w	800a43a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a25a:	a201      	add	r2, pc, #4	@ (adr r2, 800a260 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a2b5 	.word	0x0800a2b5
 800a264:	0800a43b 	.word	0x0800a43b
 800a268:	0800a43b 	.word	0x0800a43b
 800a26c:	0800a43b 	.word	0x0800a43b
 800a270:	0800a2f5 	.word	0x0800a2f5
 800a274:	0800a43b 	.word	0x0800a43b
 800a278:	0800a43b 	.word	0x0800a43b
 800a27c:	0800a43b 	.word	0x0800a43b
 800a280:	0800a337 	.word	0x0800a337
 800a284:	0800a43b 	.word	0x0800a43b
 800a288:	0800a43b 	.word	0x0800a43b
 800a28c:	0800a43b 	.word	0x0800a43b
 800a290:	0800a377 	.word	0x0800a377
 800a294:	0800a43b 	.word	0x0800a43b
 800a298:	0800a43b 	.word	0x0800a43b
 800a29c:	0800a43b 	.word	0x0800a43b
 800a2a0:	0800a3b9 	.word	0x0800a3b9
 800a2a4:	0800a43b 	.word	0x0800a43b
 800a2a8:	0800a43b 	.word	0x0800a43b
 800a2ac:	0800a43b 	.word	0x0800a43b
 800a2b0:	0800a3f9 	.word	0x0800a3f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68b9      	ldr	r1, [r7, #8]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 f970 	bl	800a5a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	699a      	ldr	r2, [r3, #24]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f042 0208 	orr.w	r2, r2, #8
 800a2ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	699a      	ldr	r2, [r3, #24]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f022 0204 	bic.w	r2, r2, #4
 800a2de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6999      	ldr	r1, [r3, #24]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	691a      	ldr	r2, [r3, #16]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	619a      	str	r2, [r3, #24]
      break;
 800a2f2:	e0a5      	b.n	800a440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68b9      	ldr	r1, [r7, #8]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f9e0 	bl	800a6c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	699a      	ldr	r2, [r3, #24]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a30e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699a      	ldr	r2, [r3, #24]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a31e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6999      	ldr	r1, [r3, #24]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	021a      	lsls	r2, r3, #8
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	430a      	orrs	r2, r1
 800a332:	619a      	str	r2, [r3, #24]
      break;
 800a334:	e084      	b.n	800a440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68b9      	ldr	r1, [r7, #8]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fa49 	bl	800a7d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69da      	ldr	r2, [r3, #28]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f042 0208 	orr.w	r2, r2, #8
 800a350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	69da      	ldr	r2, [r3, #28]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 0204 	bic.w	r2, r2, #4
 800a360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	69d9      	ldr	r1, [r3, #28]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	691a      	ldr	r2, [r3, #16]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	61da      	str	r2, [r3, #28]
      break;
 800a374:	e064      	b.n	800a440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 fab1 	bl	800a8e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	69da      	ldr	r2, [r3, #28]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	69da      	ldr	r2, [r3, #28]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	69d9      	ldr	r1, [r3, #28]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	021a      	lsls	r2, r3, #8
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	61da      	str	r2, [r3, #28]
      break;
 800a3b6:	e043      	b.n	800a440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68b9      	ldr	r1, [r7, #8]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 fafa 	bl	800a9b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f042 0208 	orr.w	r2, r2, #8
 800a3d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f022 0204 	bic.w	r2, r2, #4
 800a3e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	691a      	ldr	r2, [r3, #16]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a3f6:	e023      	b.n	800a440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68b9      	ldr	r1, [r7, #8]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fb3e 	bl	800aa80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a412:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a422:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	021a      	lsls	r2, r3, #8
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	430a      	orrs	r2, r1
 800a436:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a438:	e002      	b.n	800a440 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	75fb      	strb	r3, [r7, #23]
      break;
 800a43e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a448:	7dfb      	ldrb	r3, [r7, #23]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop

0800a454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a46      	ldr	r2, [pc, #280]	@ (800a580 <TIM_Base_SetConfig+0x12c>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d013      	beq.n	800a494 <TIM_Base_SetConfig+0x40>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a472:	d00f      	beq.n	800a494 <TIM_Base_SetConfig+0x40>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a43      	ldr	r2, [pc, #268]	@ (800a584 <TIM_Base_SetConfig+0x130>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d00b      	beq.n	800a494 <TIM_Base_SetConfig+0x40>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a42      	ldr	r2, [pc, #264]	@ (800a588 <TIM_Base_SetConfig+0x134>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d007      	beq.n	800a494 <TIM_Base_SetConfig+0x40>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a41      	ldr	r2, [pc, #260]	@ (800a58c <TIM_Base_SetConfig+0x138>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d003      	beq.n	800a494 <TIM_Base_SetConfig+0x40>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a40      	ldr	r2, [pc, #256]	@ (800a590 <TIM_Base_SetConfig+0x13c>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d108      	bne.n	800a4a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a49a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a35      	ldr	r2, [pc, #212]	@ (800a580 <TIM_Base_SetConfig+0x12c>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d01f      	beq.n	800a4ee <TIM_Base_SetConfig+0x9a>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4b4:	d01b      	beq.n	800a4ee <TIM_Base_SetConfig+0x9a>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a32      	ldr	r2, [pc, #200]	@ (800a584 <TIM_Base_SetConfig+0x130>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d017      	beq.n	800a4ee <TIM_Base_SetConfig+0x9a>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a31      	ldr	r2, [pc, #196]	@ (800a588 <TIM_Base_SetConfig+0x134>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d013      	beq.n	800a4ee <TIM_Base_SetConfig+0x9a>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a30      	ldr	r2, [pc, #192]	@ (800a58c <TIM_Base_SetConfig+0x138>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d00f      	beq.n	800a4ee <TIM_Base_SetConfig+0x9a>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a2f      	ldr	r2, [pc, #188]	@ (800a590 <TIM_Base_SetConfig+0x13c>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d00b      	beq.n	800a4ee <TIM_Base_SetConfig+0x9a>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a2e      	ldr	r2, [pc, #184]	@ (800a594 <TIM_Base_SetConfig+0x140>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d007      	beq.n	800a4ee <TIM_Base_SetConfig+0x9a>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a2d      	ldr	r2, [pc, #180]	@ (800a598 <TIM_Base_SetConfig+0x144>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d003      	beq.n	800a4ee <TIM_Base_SetConfig+0x9a>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a2c      	ldr	r2, [pc, #176]	@ (800a59c <TIM_Base_SetConfig+0x148>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d108      	bne.n	800a500 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a16      	ldr	r2, [pc, #88]	@ (800a580 <TIM_Base_SetConfig+0x12c>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d00f      	beq.n	800a54c <TIM_Base_SetConfig+0xf8>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a18      	ldr	r2, [pc, #96]	@ (800a590 <TIM_Base_SetConfig+0x13c>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d00b      	beq.n	800a54c <TIM_Base_SetConfig+0xf8>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a17      	ldr	r2, [pc, #92]	@ (800a594 <TIM_Base_SetConfig+0x140>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d007      	beq.n	800a54c <TIM_Base_SetConfig+0xf8>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a16      	ldr	r2, [pc, #88]	@ (800a598 <TIM_Base_SetConfig+0x144>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d003      	beq.n	800a54c <TIM_Base_SetConfig+0xf8>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a15      	ldr	r2, [pc, #84]	@ (800a59c <TIM_Base_SetConfig+0x148>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d103      	bne.n	800a554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	691a      	ldr	r2, [r3, #16]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	2b01      	cmp	r3, #1
 800a564:	d105      	bne.n	800a572 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	f023 0201 	bic.w	r2, r3, #1
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	611a      	str	r2, [r3, #16]
  }
}
 800a572:	bf00      	nop
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	40012c00 	.word	0x40012c00
 800a584:	40000400 	.word	0x40000400
 800a588:	40000800 	.word	0x40000800
 800a58c:	40000c00 	.word	0x40000c00
 800a590:	40013400 	.word	0x40013400
 800a594:	40014000 	.word	0x40014000
 800a598:	40014400 	.word	0x40014400
 800a59c:	40014800 	.word	0x40014800

0800a5a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a1b      	ldr	r3, [r3, #32]
 800a5b4:	f023 0201 	bic.w	r2, r3, #1
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f023 0303 	bic.w	r3, r3, #3
 800a5da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f023 0302 	bic.w	r3, r3, #2
 800a5ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a2c      	ldr	r2, [pc, #176]	@ (800a6ac <TIM_OC1_SetConfig+0x10c>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d00f      	beq.n	800a620 <TIM_OC1_SetConfig+0x80>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a2b      	ldr	r2, [pc, #172]	@ (800a6b0 <TIM_OC1_SetConfig+0x110>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d00b      	beq.n	800a620 <TIM_OC1_SetConfig+0x80>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a2a      	ldr	r2, [pc, #168]	@ (800a6b4 <TIM_OC1_SetConfig+0x114>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d007      	beq.n	800a620 <TIM_OC1_SetConfig+0x80>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a29      	ldr	r2, [pc, #164]	@ (800a6b8 <TIM_OC1_SetConfig+0x118>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d003      	beq.n	800a620 <TIM_OC1_SetConfig+0x80>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a28      	ldr	r2, [pc, #160]	@ (800a6bc <TIM_OC1_SetConfig+0x11c>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d10c      	bne.n	800a63a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f023 0308 	bic.w	r3, r3, #8
 800a626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	4313      	orrs	r3, r2
 800a630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	f023 0304 	bic.w	r3, r3, #4
 800a638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a1b      	ldr	r2, [pc, #108]	@ (800a6ac <TIM_OC1_SetConfig+0x10c>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d00f      	beq.n	800a662 <TIM_OC1_SetConfig+0xc2>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a1a      	ldr	r2, [pc, #104]	@ (800a6b0 <TIM_OC1_SetConfig+0x110>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d00b      	beq.n	800a662 <TIM_OC1_SetConfig+0xc2>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a19      	ldr	r2, [pc, #100]	@ (800a6b4 <TIM_OC1_SetConfig+0x114>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d007      	beq.n	800a662 <TIM_OC1_SetConfig+0xc2>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a18      	ldr	r2, [pc, #96]	@ (800a6b8 <TIM_OC1_SetConfig+0x118>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d003      	beq.n	800a662 <TIM_OC1_SetConfig+0xc2>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a17      	ldr	r2, [pc, #92]	@ (800a6bc <TIM_OC1_SetConfig+0x11c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d111      	bne.n	800a686 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	4313      	orrs	r3, r2
 800a67a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	4313      	orrs	r3, r2
 800a684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	621a      	str	r2, [r3, #32]
}
 800a6a0:	bf00      	nop
 800a6a2:	371c      	adds	r7, #28
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	40012c00 	.word	0x40012c00
 800a6b0:	40013400 	.word	0x40013400
 800a6b4:	40014000 	.word	0x40014000
 800a6b8:	40014400 	.word	0x40014400
 800a6bc:	40014800 	.word	0x40014800

0800a6c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a1b      	ldr	r3, [r3, #32]
 800a6d4:	f023 0210 	bic.w	r2, r3, #16
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	021b      	lsls	r3, r3, #8
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	4313      	orrs	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f023 0320 	bic.w	r3, r3, #32
 800a70e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	011b      	lsls	r3, r3, #4
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	4313      	orrs	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a28      	ldr	r2, [pc, #160]	@ (800a7c0 <TIM_OC2_SetConfig+0x100>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d003      	beq.n	800a72c <TIM_OC2_SetConfig+0x6c>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a27      	ldr	r2, [pc, #156]	@ (800a7c4 <TIM_OC2_SetConfig+0x104>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d10d      	bne.n	800a748 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	011b      	lsls	r3, r3, #4
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a746:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c0 <TIM_OC2_SetConfig+0x100>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00f      	beq.n	800a770 <TIM_OC2_SetConfig+0xb0>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a1c      	ldr	r2, [pc, #112]	@ (800a7c4 <TIM_OC2_SetConfig+0x104>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d00b      	beq.n	800a770 <TIM_OC2_SetConfig+0xb0>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a1b      	ldr	r2, [pc, #108]	@ (800a7c8 <TIM_OC2_SetConfig+0x108>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d007      	beq.n	800a770 <TIM_OC2_SetConfig+0xb0>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a1a      	ldr	r2, [pc, #104]	@ (800a7cc <TIM_OC2_SetConfig+0x10c>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d003      	beq.n	800a770 <TIM_OC2_SetConfig+0xb0>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a19      	ldr	r2, [pc, #100]	@ (800a7d0 <TIM_OC2_SetConfig+0x110>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d113      	bne.n	800a798 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a77e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	4313      	orrs	r3, r2
 800a78a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	4313      	orrs	r3, r2
 800a796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	693a      	ldr	r2, [r7, #16]
 800a79c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	621a      	str	r2, [r3, #32]
}
 800a7b2:	bf00      	nop
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	40012c00 	.word	0x40012c00
 800a7c4:	40013400 	.word	0x40013400
 800a7c8:	40014000 	.word	0x40014000
 800a7cc:	40014400 	.word	0x40014400
 800a7d0:	40014800 	.word	0x40014800

0800a7d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a1b      	ldr	r3, [r3, #32]
 800a7e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	69db      	ldr	r3, [r3, #28]
 800a7fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f023 0303 	bic.w	r3, r3, #3
 800a80e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	021b      	lsls	r3, r3, #8
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a27      	ldr	r2, [pc, #156]	@ (800a8d0 <TIM_OC3_SetConfig+0xfc>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d003      	beq.n	800a83e <TIM_OC3_SetConfig+0x6a>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a26      	ldr	r2, [pc, #152]	@ (800a8d4 <TIM_OC3_SetConfig+0x100>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d10d      	bne.n	800a85a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	021b      	lsls	r3, r3, #8
 800a84c:	697a      	ldr	r2, [r7, #20]
 800a84e:	4313      	orrs	r3, r2
 800a850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a1c      	ldr	r2, [pc, #112]	@ (800a8d0 <TIM_OC3_SetConfig+0xfc>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d00f      	beq.n	800a882 <TIM_OC3_SetConfig+0xae>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a1b      	ldr	r2, [pc, #108]	@ (800a8d4 <TIM_OC3_SetConfig+0x100>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d00b      	beq.n	800a882 <TIM_OC3_SetConfig+0xae>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a1a      	ldr	r2, [pc, #104]	@ (800a8d8 <TIM_OC3_SetConfig+0x104>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d007      	beq.n	800a882 <TIM_OC3_SetConfig+0xae>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a19      	ldr	r2, [pc, #100]	@ (800a8dc <TIM_OC3_SetConfig+0x108>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d003      	beq.n	800a882 <TIM_OC3_SetConfig+0xae>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a18      	ldr	r2, [pc, #96]	@ (800a8e0 <TIM_OC3_SetConfig+0x10c>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d113      	bne.n	800a8aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	695b      	ldr	r3, [r3, #20]
 800a896:	011b      	lsls	r3, r3, #4
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	011b      	lsls	r3, r3, #4
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	621a      	str	r2, [r3, #32]
}
 800a8c4:	bf00      	nop
 800a8c6:	371c      	adds	r7, #28
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	40012c00 	.word	0x40012c00
 800a8d4:	40013400 	.word	0x40013400
 800a8d8:	40014000 	.word	0x40014000
 800a8dc:	40014400 	.word	0x40014400
 800a8e0:	40014800 	.word	0x40014800

0800a8e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	69db      	ldr	r3, [r3, #28]
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a91e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	021b      	lsls	r3, r3, #8
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	4313      	orrs	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	031b      	lsls	r3, r3, #12
 800a93a:	693a      	ldr	r2, [r7, #16]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a18      	ldr	r2, [pc, #96]	@ (800a9a4 <TIM_OC4_SetConfig+0xc0>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d00f      	beq.n	800a968 <TIM_OC4_SetConfig+0x84>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a17      	ldr	r2, [pc, #92]	@ (800a9a8 <TIM_OC4_SetConfig+0xc4>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d00b      	beq.n	800a968 <TIM_OC4_SetConfig+0x84>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a16      	ldr	r2, [pc, #88]	@ (800a9ac <TIM_OC4_SetConfig+0xc8>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d007      	beq.n	800a968 <TIM_OC4_SetConfig+0x84>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a15      	ldr	r2, [pc, #84]	@ (800a9b0 <TIM_OC4_SetConfig+0xcc>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d003      	beq.n	800a968 <TIM_OC4_SetConfig+0x84>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a14      	ldr	r2, [pc, #80]	@ (800a9b4 <TIM_OC4_SetConfig+0xd0>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d109      	bne.n	800a97c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a96e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	695b      	ldr	r3, [r3, #20]
 800a974:	019b      	lsls	r3, r3, #6
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	4313      	orrs	r3, r2
 800a97a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	693a      	ldr	r2, [r7, #16]
 800a994:	621a      	str	r2, [r3, #32]
}
 800a996:	bf00      	nop
 800a998:	371c      	adds	r7, #28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	40012c00 	.word	0x40012c00
 800a9a8:	40013400 	.word	0x40013400
 800a9ac:	40014000 	.word	0x40014000
 800a9b0:	40014400 	.word	0x40014400
 800a9b4:	40014800 	.word	0x40014800

0800a9b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a1b      	ldr	r3, [r3, #32]
 800a9cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a9fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	041b      	lsls	r3, r3, #16
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a17      	ldr	r2, [pc, #92]	@ (800aa6c <TIM_OC5_SetConfig+0xb4>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d00f      	beq.n	800aa32 <TIM_OC5_SetConfig+0x7a>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a16      	ldr	r2, [pc, #88]	@ (800aa70 <TIM_OC5_SetConfig+0xb8>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d00b      	beq.n	800aa32 <TIM_OC5_SetConfig+0x7a>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a15      	ldr	r2, [pc, #84]	@ (800aa74 <TIM_OC5_SetConfig+0xbc>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d007      	beq.n	800aa32 <TIM_OC5_SetConfig+0x7a>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a14      	ldr	r2, [pc, #80]	@ (800aa78 <TIM_OC5_SetConfig+0xc0>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d003      	beq.n	800aa32 <TIM_OC5_SetConfig+0x7a>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4a13      	ldr	r2, [pc, #76]	@ (800aa7c <TIM_OC5_SetConfig+0xc4>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d109      	bne.n	800aa46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	695b      	ldr	r3, [r3, #20]
 800aa3e:	021b      	lsls	r3, r3, #8
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	621a      	str	r2, [r3, #32]
}
 800aa60:	bf00      	nop
 800aa62:	371c      	adds	r7, #28
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	40012c00 	.word	0x40012c00
 800aa70:	40013400 	.word	0x40013400
 800aa74:	40014000 	.word	0x40014000
 800aa78:	40014400 	.word	0x40014400
 800aa7c:	40014800 	.word	0x40014800

0800aa80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aaae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	021b      	lsls	r3, r3, #8
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	051b      	lsls	r3, r3, #20
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a18      	ldr	r2, [pc, #96]	@ (800ab38 <TIM_OC6_SetConfig+0xb8>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d00f      	beq.n	800aafc <TIM_OC6_SetConfig+0x7c>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a17      	ldr	r2, [pc, #92]	@ (800ab3c <TIM_OC6_SetConfig+0xbc>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d00b      	beq.n	800aafc <TIM_OC6_SetConfig+0x7c>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a16      	ldr	r2, [pc, #88]	@ (800ab40 <TIM_OC6_SetConfig+0xc0>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d007      	beq.n	800aafc <TIM_OC6_SetConfig+0x7c>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a15      	ldr	r2, [pc, #84]	@ (800ab44 <TIM_OC6_SetConfig+0xc4>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d003      	beq.n	800aafc <TIM_OC6_SetConfig+0x7c>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a14      	ldr	r2, [pc, #80]	@ (800ab48 <TIM_OC6_SetConfig+0xc8>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d109      	bne.n	800ab10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	695b      	ldr	r3, [r3, #20]
 800ab08:	029b      	lsls	r3, r3, #10
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	621a      	str	r2, [r3, #32]
}
 800ab2a:	bf00      	nop
 800ab2c:	371c      	adds	r7, #28
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	40012c00 	.word	0x40012c00
 800ab3c:	40013400 	.word	0x40013400
 800ab40:	40014000 	.word	0x40014000
 800ab44:	40014400 	.word	0x40014400
 800ab48:	40014800 	.word	0x40014800

0800ab4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f003 031f 	and.w	r3, r3, #31
 800ab5e:	2201      	movs	r2, #1
 800ab60:	fa02 f303 	lsl.w	r3, r2, r3
 800ab64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6a1a      	ldr	r2, [r3, #32]
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	43db      	mvns	r3, r3
 800ab6e:	401a      	ands	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6a1a      	ldr	r2, [r3, #32]
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f003 031f 	and.w	r3, r3, #31
 800ab7e:	6879      	ldr	r1, [r7, #4]
 800ab80:	fa01 f303 	lsl.w	r3, r1, r3
 800ab84:	431a      	orrs	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	621a      	str	r2, [r3, #32]
}
 800ab8a:	bf00      	nop
 800ab8c:	371c      	adds	r7, #28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
	...

0800ab98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d101      	bne.n	800abb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abac:	2302      	movs	r3, #2
 800abae:	e068      	b.n	800ac82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2202      	movs	r2, #2
 800abbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a2e      	ldr	r2, [pc, #184]	@ (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d004      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a2d      	ldr	r2, [pc, #180]	@ (800ac94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d108      	bne.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800abea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a1e      	ldr	r2, [pc, #120]	@ (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d01d      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac22:	d018      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a1b      	ldr	r2, [pc, #108]	@ (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d013      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a1a      	ldr	r2, [pc, #104]	@ (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d00e      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a18      	ldr	r2, [pc, #96]	@ (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d009      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a13      	ldr	r2, [pc, #76]	@ (800ac94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d004      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a14      	ldr	r2, [pc, #80]	@ (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d10c      	bne.n	800ac70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	40012c00 	.word	0x40012c00
 800ac94:	40013400 	.word	0x40013400
 800ac98:	40000400 	.word	0x40000400
 800ac9c:	40000800 	.word	0x40000800
 800aca0:	40000c00 	.word	0x40000c00
 800aca4:	40014000 	.word	0x40014000

0800aca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e040      	b.n	800ad3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7f9 fb5e 	bl	800438c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2224      	movs	r2, #36	@ 0x24
 800acd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f022 0201 	bic.w	r2, r2, #1
 800ace4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acea:	2b00      	cmp	r3, #0
 800acec:	d002      	beq.n	800acf4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fb6a 	bl	800b3c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 f8af 	bl	800ae58 <UART_SetConfig>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d101      	bne.n	800ad04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e01b      	b.n	800ad3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685a      	ldr	r2, [r3, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ad12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	689a      	ldr	r2, [r3, #8]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ad22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f042 0201 	orr.w	r2, r2, #1
 800ad32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fbe9 	bl	800b50c <UART_CheckIdleState>
 800ad3a:	4603      	mov	r3, r0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b08a      	sub	sp, #40	@ 0x28
 800ad48:	af02      	add	r7, sp, #8
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	4613      	mov	r3, r2
 800ad52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	d177      	bne.n	800ae4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <HAL_UART_Transmit+0x24>
 800ad62:	88fb      	ldrh	r3, [r7, #6]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e070      	b.n	800ae4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2221      	movs	r2, #33	@ 0x21
 800ad78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad7a:	f7fa fb21 	bl	80053c0 <HAL_GetTick>
 800ad7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	88fa      	ldrh	r2, [r7, #6]
 800ad84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	88fa      	ldrh	r2, [r7, #6]
 800ad8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad98:	d108      	bne.n	800adac <HAL_UART_Transmit+0x68>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d104      	bne.n	800adac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	61bb      	str	r3, [r7, #24]
 800adaa:	e003      	b.n	800adb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800adb0:	2300      	movs	r3, #0
 800adb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800adb4:	e02f      	b.n	800ae16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2200      	movs	r2, #0
 800adbe:	2180      	movs	r1, #128	@ 0x80
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 fc4b 	bl	800b65c <UART_WaitOnFlagUntilTimeout>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d004      	beq.n	800add6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2220      	movs	r2, #32
 800add0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e03b      	b.n	800ae4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10b      	bne.n	800adf4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	881a      	ldrh	r2, [r3, #0]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ade8:	b292      	uxth	r2, r2
 800adea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	3302      	adds	r3, #2
 800adf0:	61bb      	str	r3, [r7, #24]
 800adf2:	e007      	b.n	800ae04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	781a      	ldrb	r2, [r3, #0]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	3301      	adds	r3, #1
 800ae02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1c9      	bne.n	800adb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	2140      	movs	r1, #64	@ 0x40
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f000 fc15 	bl	800b65c <UART_WaitOnFlagUntilTimeout>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d004      	beq.n	800ae42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e005      	b.n	800ae4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2220      	movs	r2, #32
 800ae46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	e000      	b.n	800ae4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ae4c:	2302      	movs	r3, #2
  }
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae5c:	b08a      	sub	sp, #40	@ 0x28
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	431a      	orrs	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	431a      	orrs	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	69db      	ldr	r3, [r3, #28]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	4ba4      	ldr	r3, [pc, #656]	@ (800b118 <UART_SetConfig+0x2c0>)
 800ae88:	4013      	ands	r3, r2
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	6812      	ldr	r2, [r2, #0]
 800ae8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ae90:	430b      	orrs	r3, r1
 800ae92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	68da      	ldr	r2, [r3, #12]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	430a      	orrs	r2, r1
 800aea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a99      	ldr	r2, [pc, #612]	@ (800b11c <UART_SetConfig+0x2c4>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d004      	beq.n	800aec4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aec0:	4313      	orrs	r3, r2
 800aec2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aed4:	430a      	orrs	r2, r1
 800aed6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a90      	ldr	r2, [pc, #576]	@ (800b120 <UART_SetConfig+0x2c8>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d126      	bne.n	800af30 <UART_SetConfig+0xd8>
 800aee2:	4b90      	ldr	r3, [pc, #576]	@ (800b124 <UART_SetConfig+0x2cc>)
 800aee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aee8:	f003 0303 	and.w	r3, r3, #3
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d81b      	bhi.n	800af28 <UART_SetConfig+0xd0>
 800aef0:	a201      	add	r2, pc, #4	@ (adr r2, 800aef8 <UART_SetConfig+0xa0>)
 800aef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef6:	bf00      	nop
 800aef8:	0800af09 	.word	0x0800af09
 800aefc:	0800af19 	.word	0x0800af19
 800af00:	0800af11 	.word	0x0800af11
 800af04:	0800af21 	.word	0x0800af21
 800af08:	2301      	movs	r3, #1
 800af0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af0e:	e116      	b.n	800b13e <UART_SetConfig+0x2e6>
 800af10:	2302      	movs	r3, #2
 800af12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af16:	e112      	b.n	800b13e <UART_SetConfig+0x2e6>
 800af18:	2304      	movs	r3, #4
 800af1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af1e:	e10e      	b.n	800b13e <UART_SetConfig+0x2e6>
 800af20:	2308      	movs	r3, #8
 800af22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af26:	e10a      	b.n	800b13e <UART_SetConfig+0x2e6>
 800af28:	2310      	movs	r3, #16
 800af2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af2e:	e106      	b.n	800b13e <UART_SetConfig+0x2e6>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a7c      	ldr	r2, [pc, #496]	@ (800b128 <UART_SetConfig+0x2d0>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d138      	bne.n	800afac <UART_SetConfig+0x154>
 800af3a:	4b7a      	ldr	r3, [pc, #488]	@ (800b124 <UART_SetConfig+0x2cc>)
 800af3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af40:	f003 030c 	and.w	r3, r3, #12
 800af44:	2b0c      	cmp	r3, #12
 800af46:	d82d      	bhi.n	800afa4 <UART_SetConfig+0x14c>
 800af48:	a201      	add	r2, pc, #4	@ (adr r2, 800af50 <UART_SetConfig+0xf8>)
 800af4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4e:	bf00      	nop
 800af50:	0800af85 	.word	0x0800af85
 800af54:	0800afa5 	.word	0x0800afa5
 800af58:	0800afa5 	.word	0x0800afa5
 800af5c:	0800afa5 	.word	0x0800afa5
 800af60:	0800af95 	.word	0x0800af95
 800af64:	0800afa5 	.word	0x0800afa5
 800af68:	0800afa5 	.word	0x0800afa5
 800af6c:	0800afa5 	.word	0x0800afa5
 800af70:	0800af8d 	.word	0x0800af8d
 800af74:	0800afa5 	.word	0x0800afa5
 800af78:	0800afa5 	.word	0x0800afa5
 800af7c:	0800afa5 	.word	0x0800afa5
 800af80:	0800af9d 	.word	0x0800af9d
 800af84:	2300      	movs	r3, #0
 800af86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af8a:	e0d8      	b.n	800b13e <UART_SetConfig+0x2e6>
 800af8c:	2302      	movs	r3, #2
 800af8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af92:	e0d4      	b.n	800b13e <UART_SetConfig+0x2e6>
 800af94:	2304      	movs	r3, #4
 800af96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af9a:	e0d0      	b.n	800b13e <UART_SetConfig+0x2e6>
 800af9c:	2308      	movs	r3, #8
 800af9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800afa2:	e0cc      	b.n	800b13e <UART_SetConfig+0x2e6>
 800afa4:	2310      	movs	r3, #16
 800afa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800afaa:	e0c8      	b.n	800b13e <UART_SetConfig+0x2e6>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a5e      	ldr	r2, [pc, #376]	@ (800b12c <UART_SetConfig+0x2d4>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d125      	bne.n	800b002 <UART_SetConfig+0x1aa>
 800afb6:	4b5b      	ldr	r3, [pc, #364]	@ (800b124 <UART_SetConfig+0x2cc>)
 800afb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800afc0:	2b30      	cmp	r3, #48	@ 0x30
 800afc2:	d016      	beq.n	800aff2 <UART_SetConfig+0x19a>
 800afc4:	2b30      	cmp	r3, #48	@ 0x30
 800afc6:	d818      	bhi.n	800affa <UART_SetConfig+0x1a2>
 800afc8:	2b20      	cmp	r3, #32
 800afca:	d00a      	beq.n	800afe2 <UART_SetConfig+0x18a>
 800afcc:	2b20      	cmp	r3, #32
 800afce:	d814      	bhi.n	800affa <UART_SetConfig+0x1a2>
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <UART_SetConfig+0x182>
 800afd4:	2b10      	cmp	r3, #16
 800afd6:	d008      	beq.n	800afea <UART_SetConfig+0x192>
 800afd8:	e00f      	b.n	800affa <UART_SetConfig+0x1a2>
 800afda:	2300      	movs	r3, #0
 800afdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800afe0:	e0ad      	b.n	800b13e <UART_SetConfig+0x2e6>
 800afe2:	2302      	movs	r3, #2
 800afe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800afe8:	e0a9      	b.n	800b13e <UART_SetConfig+0x2e6>
 800afea:	2304      	movs	r3, #4
 800afec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aff0:	e0a5      	b.n	800b13e <UART_SetConfig+0x2e6>
 800aff2:	2308      	movs	r3, #8
 800aff4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aff8:	e0a1      	b.n	800b13e <UART_SetConfig+0x2e6>
 800affa:	2310      	movs	r3, #16
 800affc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b000:	e09d      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a4a      	ldr	r2, [pc, #296]	@ (800b130 <UART_SetConfig+0x2d8>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d125      	bne.n	800b058 <UART_SetConfig+0x200>
 800b00c:	4b45      	ldr	r3, [pc, #276]	@ (800b124 <UART_SetConfig+0x2cc>)
 800b00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b012:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b016:	2bc0      	cmp	r3, #192	@ 0xc0
 800b018:	d016      	beq.n	800b048 <UART_SetConfig+0x1f0>
 800b01a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b01c:	d818      	bhi.n	800b050 <UART_SetConfig+0x1f8>
 800b01e:	2b80      	cmp	r3, #128	@ 0x80
 800b020:	d00a      	beq.n	800b038 <UART_SetConfig+0x1e0>
 800b022:	2b80      	cmp	r3, #128	@ 0x80
 800b024:	d814      	bhi.n	800b050 <UART_SetConfig+0x1f8>
 800b026:	2b00      	cmp	r3, #0
 800b028:	d002      	beq.n	800b030 <UART_SetConfig+0x1d8>
 800b02a:	2b40      	cmp	r3, #64	@ 0x40
 800b02c:	d008      	beq.n	800b040 <UART_SetConfig+0x1e8>
 800b02e:	e00f      	b.n	800b050 <UART_SetConfig+0x1f8>
 800b030:	2300      	movs	r3, #0
 800b032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b036:	e082      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b038:	2302      	movs	r3, #2
 800b03a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b03e:	e07e      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b040:	2304      	movs	r3, #4
 800b042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b046:	e07a      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b048:	2308      	movs	r3, #8
 800b04a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b04e:	e076      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b050:	2310      	movs	r3, #16
 800b052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b056:	e072      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a35      	ldr	r2, [pc, #212]	@ (800b134 <UART_SetConfig+0x2dc>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d12a      	bne.n	800b0b8 <UART_SetConfig+0x260>
 800b062:	4b30      	ldr	r3, [pc, #192]	@ (800b124 <UART_SetConfig+0x2cc>)
 800b064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b06c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b070:	d01a      	beq.n	800b0a8 <UART_SetConfig+0x250>
 800b072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b076:	d81b      	bhi.n	800b0b0 <UART_SetConfig+0x258>
 800b078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b07c:	d00c      	beq.n	800b098 <UART_SetConfig+0x240>
 800b07e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b082:	d815      	bhi.n	800b0b0 <UART_SetConfig+0x258>
 800b084:	2b00      	cmp	r3, #0
 800b086:	d003      	beq.n	800b090 <UART_SetConfig+0x238>
 800b088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b08c:	d008      	beq.n	800b0a0 <UART_SetConfig+0x248>
 800b08e:	e00f      	b.n	800b0b0 <UART_SetConfig+0x258>
 800b090:	2300      	movs	r3, #0
 800b092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b096:	e052      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b098:	2302      	movs	r3, #2
 800b09a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b09e:	e04e      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b0a0:	2304      	movs	r3, #4
 800b0a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b0a6:	e04a      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b0a8:	2308      	movs	r3, #8
 800b0aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b0ae:	e046      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b0b0:	2310      	movs	r3, #16
 800b0b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b0b6:	e042      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a17      	ldr	r2, [pc, #92]	@ (800b11c <UART_SetConfig+0x2c4>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d13a      	bne.n	800b138 <UART_SetConfig+0x2e0>
 800b0c2:	4b18      	ldr	r3, [pc, #96]	@ (800b124 <UART_SetConfig+0x2cc>)
 800b0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b0cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0d0:	d01a      	beq.n	800b108 <UART_SetConfig+0x2b0>
 800b0d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0d6:	d81b      	bhi.n	800b110 <UART_SetConfig+0x2b8>
 800b0d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0dc:	d00c      	beq.n	800b0f8 <UART_SetConfig+0x2a0>
 800b0de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0e2:	d815      	bhi.n	800b110 <UART_SetConfig+0x2b8>
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <UART_SetConfig+0x298>
 800b0e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0ec:	d008      	beq.n	800b100 <UART_SetConfig+0x2a8>
 800b0ee:	e00f      	b.n	800b110 <UART_SetConfig+0x2b8>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b0f6:	e022      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b0fe:	e01e      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b100:	2304      	movs	r3, #4
 800b102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b106:	e01a      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b108:	2308      	movs	r3, #8
 800b10a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b10e:	e016      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b110:	2310      	movs	r3, #16
 800b112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b116:	e012      	b.n	800b13e <UART_SetConfig+0x2e6>
 800b118:	efff69f3 	.word	0xefff69f3
 800b11c:	40008000 	.word	0x40008000
 800b120:	40013800 	.word	0x40013800
 800b124:	40021000 	.word	0x40021000
 800b128:	40004400 	.word	0x40004400
 800b12c:	40004800 	.word	0x40004800
 800b130:	40004c00 	.word	0x40004c00
 800b134:	40005000 	.word	0x40005000
 800b138:	2310      	movs	r3, #16
 800b13a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a9f      	ldr	r2, [pc, #636]	@ (800b3c0 <UART_SetConfig+0x568>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d17a      	bne.n	800b23e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b14c:	2b08      	cmp	r3, #8
 800b14e:	d824      	bhi.n	800b19a <UART_SetConfig+0x342>
 800b150:	a201      	add	r2, pc, #4	@ (adr r2, 800b158 <UART_SetConfig+0x300>)
 800b152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b156:	bf00      	nop
 800b158:	0800b17d 	.word	0x0800b17d
 800b15c:	0800b19b 	.word	0x0800b19b
 800b160:	0800b185 	.word	0x0800b185
 800b164:	0800b19b 	.word	0x0800b19b
 800b168:	0800b18b 	.word	0x0800b18b
 800b16c:	0800b19b 	.word	0x0800b19b
 800b170:	0800b19b 	.word	0x0800b19b
 800b174:	0800b19b 	.word	0x0800b19b
 800b178:	0800b193 	.word	0x0800b193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b17c:	f7fd fe42 	bl	8008e04 <HAL_RCC_GetPCLK1Freq>
 800b180:	61f8      	str	r0, [r7, #28]
        break;
 800b182:	e010      	b.n	800b1a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b184:	4b8f      	ldr	r3, [pc, #572]	@ (800b3c4 <UART_SetConfig+0x56c>)
 800b186:	61fb      	str	r3, [r7, #28]
        break;
 800b188:	e00d      	b.n	800b1a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b18a:	f7fd fda3 	bl	8008cd4 <HAL_RCC_GetSysClockFreq>
 800b18e:	61f8      	str	r0, [r7, #28]
        break;
 800b190:	e009      	b.n	800b1a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b196:	61fb      	str	r3, [r7, #28]
        break;
 800b198:	e005      	b.n	800b1a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800b19a:	2300      	movs	r3, #0
 800b19c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b1a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 80fb 	beq.w	800b3a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	685a      	ldr	r2, [r3, #4]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	4413      	add	r3, r2
 800b1b8:	69fa      	ldr	r2, [r7, #28]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d305      	bcc.n	800b1ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b1c4:	69fa      	ldr	r2, [r7, #28]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d903      	bls.n	800b1d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b1d0:	e0e8      	b.n	800b3a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	461c      	mov	r4, r3
 800b1d8:	4615      	mov	r5, r2
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	f04f 0300 	mov.w	r3, #0
 800b1e2:	022b      	lsls	r3, r5, #8
 800b1e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b1e8:	0222      	lsls	r2, r4, #8
 800b1ea:	68f9      	ldr	r1, [r7, #12]
 800b1ec:	6849      	ldr	r1, [r1, #4]
 800b1ee:	0849      	lsrs	r1, r1, #1
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	4688      	mov	r8, r1
 800b1f4:	4681      	mov	r9, r0
 800b1f6:	eb12 0a08 	adds.w	sl, r2, r8
 800b1fa:	eb43 0b09 	adc.w	fp, r3, r9
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	603b      	str	r3, [r7, #0]
 800b206:	607a      	str	r2, [r7, #4]
 800b208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b20c:	4650      	mov	r0, sl
 800b20e:	4659      	mov	r1, fp
 800b210:	f7f5 fd3a 	bl	8000c88 <__aeabi_uldivmod>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	4613      	mov	r3, r2
 800b21a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b222:	d308      	bcc.n	800b236 <UART_SetConfig+0x3de>
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b22a:	d204      	bcs.n	800b236 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	60da      	str	r2, [r3, #12]
 800b234:	e0b6      	b.n	800b3a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b23c:	e0b2      	b.n	800b3a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b246:	d15e      	bne.n	800b306 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b248:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b24c:	2b08      	cmp	r3, #8
 800b24e:	d828      	bhi.n	800b2a2 <UART_SetConfig+0x44a>
 800b250:	a201      	add	r2, pc, #4	@ (adr r2, 800b258 <UART_SetConfig+0x400>)
 800b252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b256:	bf00      	nop
 800b258:	0800b27d 	.word	0x0800b27d
 800b25c:	0800b285 	.word	0x0800b285
 800b260:	0800b28d 	.word	0x0800b28d
 800b264:	0800b2a3 	.word	0x0800b2a3
 800b268:	0800b293 	.word	0x0800b293
 800b26c:	0800b2a3 	.word	0x0800b2a3
 800b270:	0800b2a3 	.word	0x0800b2a3
 800b274:	0800b2a3 	.word	0x0800b2a3
 800b278:	0800b29b 	.word	0x0800b29b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b27c:	f7fd fdc2 	bl	8008e04 <HAL_RCC_GetPCLK1Freq>
 800b280:	61f8      	str	r0, [r7, #28]
        break;
 800b282:	e014      	b.n	800b2ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b284:	f7fd fdd4 	bl	8008e30 <HAL_RCC_GetPCLK2Freq>
 800b288:	61f8      	str	r0, [r7, #28]
        break;
 800b28a:	e010      	b.n	800b2ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b28c:	4b4d      	ldr	r3, [pc, #308]	@ (800b3c4 <UART_SetConfig+0x56c>)
 800b28e:	61fb      	str	r3, [r7, #28]
        break;
 800b290:	e00d      	b.n	800b2ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b292:	f7fd fd1f 	bl	8008cd4 <HAL_RCC_GetSysClockFreq>
 800b296:	61f8      	str	r0, [r7, #28]
        break;
 800b298:	e009      	b.n	800b2ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b29a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b29e:	61fb      	str	r3, [r7, #28]
        break;
 800b2a0:	e005      	b.n	800b2ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b2ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d077      	beq.n	800b3a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	005a      	lsls	r2, r3, #1
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	085b      	lsrs	r3, r3, #1
 800b2be:	441a      	add	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	2b0f      	cmp	r3, #15
 800b2ce:	d916      	bls.n	800b2fe <UART_SetConfig+0x4a6>
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2d6:	d212      	bcs.n	800b2fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	f023 030f 	bic.w	r3, r3, #15
 800b2e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	085b      	lsrs	r3, r3, #1
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	f003 0307 	and.w	r3, r3, #7
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	8afb      	ldrh	r3, [r7, #22]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	8afa      	ldrh	r2, [r7, #22]
 800b2fa:	60da      	str	r2, [r3, #12]
 800b2fc:	e052      	b.n	800b3a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b304:	e04e      	b.n	800b3a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b306:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b30a:	2b08      	cmp	r3, #8
 800b30c:	d827      	bhi.n	800b35e <UART_SetConfig+0x506>
 800b30e:	a201      	add	r2, pc, #4	@ (adr r2, 800b314 <UART_SetConfig+0x4bc>)
 800b310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b314:	0800b339 	.word	0x0800b339
 800b318:	0800b341 	.word	0x0800b341
 800b31c:	0800b349 	.word	0x0800b349
 800b320:	0800b35f 	.word	0x0800b35f
 800b324:	0800b34f 	.word	0x0800b34f
 800b328:	0800b35f 	.word	0x0800b35f
 800b32c:	0800b35f 	.word	0x0800b35f
 800b330:	0800b35f 	.word	0x0800b35f
 800b334:	0800b357 	.word	0x0800b357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b338:	f7fd fd64 	bl	8008e04 <HAL_RCC_GetPCLK1Freq>
 800b33c:	61f8      	str	r0, [r7, #28]
        break;
 800b33e:	e014      	b.n	800b36a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b340:	f7fd fd76 	bl	8008e30 <HAL_RCC_GetPCLK2Freq>
 800b344:	61f8      	str	r0, [r7, #28]
        break;
 800b346:	e010      	b.n	800b36a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b348:	4b1e      	ldr	r3, [pc, #120]	@ (800b3c4 <UART_SetConfig+0x56c>)
 800b34a:	61fb      	str	r3, [r7, #28]
        break;
 800b34c:	e00d      	b.n	800b36a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b34e:	f7fd fcc1 	bl	8008cd4 <HAL_RCC_GetSysClockFreq>
 800b352:	61f8      	str	r0, [r7, #28]
        break;
 800b354:	e009      	b.n	800b36a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b35a:	61fb      	str	r3, [r7, #28]
        break;
 800b35c:	e005      	b.n	800b36a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b35e:	2300      	movs	r3, #0
 800b360:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b368:	bf00      	nop
    }

    if (pclk != 0U)
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d019      	beq.n	800b3a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	085a      	lsrs	r2, r3, #1
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	441a      	add	r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b382:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	2b0f      	cmp	r3, #15
 800b388:	d909      	bls.n	800b39e <UART_SetConfig+0x546>
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b390:	d205      	bcs.n	800b39e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	b29a      	uxth	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60da      	str	r2, [r3, #12]
 800b39c:	e002      	b.n	800b3a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b3b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3728      	adds	r7, #40	@ 0x28
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3be:	bf00      	nop
 800b3c0:	40008000 	.word	0x40008000
 800b3c4:	00f42400 	.word	0x00f42400

0800b3c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d4:	f003 0308 	and.w	r3, r3, #8
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00a      	beq.n	800b3f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	430a      	orrs	r2, r1
 800b3f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f6:	f003 0301 	and.w	r3, r3, #1
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00a      	beq.n	800b414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	430a      	orrs	r2, r1
 800b412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b418:	f003 0302 	and.w	r3, r3, #2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00a      	beq.n	800b436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	430a      	orrs	r2, r1
 800b434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b43a:	f003 0304 	and.w	r3, r3, #4
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00a      	beq.n	800b458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	430a      	orrs	r2, r1
 800b456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b45c:	f003 0310 	and.w	r3, r3, #16
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00a      	beq.n	800b47a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	430a      	orrs	r2, r1
 800b478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47e:	f003 0320 	and.w	r3, r3, #32
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00a      	beq.n	800b49c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	430a      	orrs	r2, r1
 800b49a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01a      	beq.n	800b4de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	430a      	orrs	r2, r1
 800b4bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4c6:	d10a      	bne.n	800b4de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00a      	beq.n	800b500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	430a      	orrs	r2, r1
 800b4fe:	605a      	str	r2, [r3, #4]
  }
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b098      	sub	sp, #96	@ 0x60
 800b510:	af02      	add	r7, sp, #8
 800b512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b51c:	f7f9 ff50 	bl	80053c0 <HAL_GetTick>
 800b520:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f003 0308 	and.w	r3, r3, #8
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	d12e      	bne.n	800b58e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b538:	2200      	movs	r2, #0
 800b53a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f88c 	bl	800b65c <UART_WaitOnFlagUntilTimeout>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d021      	beq.n	800b58e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b552:	e853 3f00 	ldrex	r3, [r3]
 800b556:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b55a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b55e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	461a      	mov	r2, r3
 800b566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b568:	647b      	str	r3, [r7, #68]	@ 0x44
 800b56a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b56e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e6      	bne.n	800b54a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2220      	movs	r2, #32
 800b580:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b58a:	2303      	movs	r3, #3
 800b58c:	e062      	b.n	800b654 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 0304 	and.w	r3, r3, #4
 800b598:	2b04      	cmp	r3, #4
 800b59a:	d149      	bne.n	800b630 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b59c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f856 	bl	800b65c <UART_WaitOnFlagUntilTimeout>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d03c      	beq.n	800b630 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5be:	e853 3f00 	ldrex	r3, [r3]
 800b5c2:	623b      	str	r3, [r7, #32]
   return(result);
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5dc:	e841 2300 	strex	r3, r2, [r1]
 800b5e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1e6      	bne.n	800b5b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	e853 3f00 	ldrex	r3, [r3]
 800b5f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f023 0301 	bic.w	r3, r3, #1
 800b5fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3308      	adds	r3, #8
 800b606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b608:	61fa      	str	r2, [r7, #28]
 800b60a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	69b9      	ldr	r1, [r7, #24]
 800b60e:	69fa      	ldr	r2, [r7, #28]
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	617b      	str	r3, [r7, #20]
   return(result);
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e5      	bne.n	800b5e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2220      	movs	r2, #32
 800b620:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e011      	b.n	800b654 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2220      	movs	r2, #32
 800b634:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2220      	movs	r2, #32
 800b63a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3758      	adds	r7, #88	@ 0x58
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	603b      	str	r3, [r7, #0]
 800b668:	4613      	mov	r3, r2
 800b66a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b66c:	e04f      	b.n	800b70e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b674:	d04b      	beq.n	800b70e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b676:	f7f9 fea3 	bl	80053c0 <HAL_GetTick>
 800b67a:	4602      	mov	r2, r0
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	69ba      	ldr	r2, [r7, #24]
 800b682:	429a      	cmp	r2, r3
 800b684:	d302      	bcc.n	800b68c <UART_WaitOnFlagUntilTimeout+0x30>
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d101      	bne.n	800b690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e04e      	b.n	800b72e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f003 0304 	and.w	r3, r3, #4
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d037      	beq.n	800b70e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	2b80      	cmp	r3, #128	@ 0x80
 800b6a2:	d034      	beq.n	800b70e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2b40      	cmp	r3, #64	@ 0x40
 800b6a8:	d031      	beq.n	800b70e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	69db      	ldr	r3, [r3, #28]
 800b6b0:	f003 0308 	and.w	r3, r3, #8
 800b6b4:	2b08      	cmp	r3, #8
 800b6b6:	d110      	bne.n	800b6da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2208      	movs	r2, #8
 800b6be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 f838 	bl	800b736 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2208      	movs	r2, #8
 800b6ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e029      	b.n	800b72e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	69db      	ldr	r3, [r3, #28]
 800b6e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6e8:	d111      	bne.n	800b70e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f000 f81e 	bl	800b736 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e00f      	b.n	800b72e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	69da      	ldr	r2, [r3, #28]
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	4013      	ands	r3, r2
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	bf0c      	ite	eq
 800b71e:	2301      	moveq	r3, #1
 800b720:	2300      	movne	r3, #0
 800b722:	b2db      	uxtb	r3, r3
 800b724:	461a      	mov	r2, r3
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d0a0      	beq.n	800b66e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b736:	b480      	push	{r7}
 800b738:	b095      	sub	sp, #84	@ 0x54
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b746:	e853 3f00 	ldrex	r3, [r3]
 800b74a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b74e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	461a      	mov	r2, r3
 800b75a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b75c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b75e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b762:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b764:	e841 2300 	strex	r3, r2, [r1]
 800b768:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e6      	bne.n	800b73e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3308      	adds	r3, #8
 800b776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	e853 3f00 	ldrex	r3, [r3]
 800b77e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	f023 0301 	bic.w	r3, r3, #1
 800b786:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3308      	adds	r3, #8
 800b78e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b790:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b792:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b798:	e841 2300 	strex	r3, r2, [r1]
 800b79c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1e5      	bne.n	800b770 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d118      	bne.n	800b7de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	e853 3f00 	ldrex	r3, [r3]
 800b7b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	f023 0310 	bic.w	r3, r3, #16
 800b7c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7ca:	61bb      	str	r3, [r7, #24]
 800b7cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	6979      	ldr	r1, [r7, #20]
 800b7d0:	69ba      	ldr	r2, [r7, #24]
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e6      	bne.n	800b7ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b7f2:	bf00      	nop
 800b7f4:	3754      	adds	r7, #84	@ 0x54
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b082      	sub	sp, #8
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e03c      	b.n	800b88a <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800b816:	b2db      	uxtb	r3, r3
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d106      	bne.n	800b82a <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7f8 fe0f 	bl	8004448 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2202      	movs	r2, #2
 800b82e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f022 0201 	bic.w	r2, r2, #1
 800b840:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f9de 	bl	800bc04 <USART_SetConfig>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d101      	bne.n	800b852 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	e01b      	b.n	800b88a <HAL_USART_Init+0x8c>

  /* In Synchronous SPI mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	685a      	ldr	r2, [r3, #4]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b860:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	689a      	ldr	r2, [r3, #8]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b870:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f042 0201 	orr.w	r2, r2, #1
 800b880:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fb14 	bl	800beb0 <USART_CheckIdleState>
 800b888:	4603      	mov	r3, r0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b08a      	sub	sp, #40	@ 0x28
 800b896:	af02      	add	r7, sp, #8
 800b898:	60f8      	str	r0, [r7, #12]
 800b89a:	60b9      	str	r1, [r7, #8]
 800b89c:	603b      	str	r3, [r7, #0]
 800b89e:	4613      	mov	r3, r2
 800b8a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	f040 8099 	bne.w	800b9e2 <HAL_USART_Transmit+0x150>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <HAL_USART_Transmit+0x2a>
 800b8b6:	88fb      	ldrh	r3, [r7, #6]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e091      	b.n	800b9e4 <HAL_USART_Transmit+0x152>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d101      	bne.n	800b8ce <HAL_USART_Transmit+0x3c>
 800b8ca:	2302      	movs	r3, #2
 800b8cc:	e08a      	b.n	800b9e4 <HAL_USART_Transmit+0x152>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2212      	movs	r2, #18
 800b8e0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b8e4:	f7f9 fd6c 	bl	80053c0 <HAL_GetTick>
 800b8e8:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	88fa      	ldrh	r2, [r7, #6]
 800b8ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	88fa      	ldrh	r2, [r7, #6]
 800b8f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8fe:	d108      	bne.n	800b912 <HAL_USART_Transmit+0x80>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d104      	bne.n	800b912 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800b908:	2300      	movs	r3, #0
 800b90a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	61bb      	str	r3, [r7, #24]
 800b910:	e003      	b.n	800b91a <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b916:	2300      	movs	r3, #0
 800b918:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b91a:	e02a      	b.n	800b972 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	2200      	movs	r2, #0
 800b924:	2180      	movs	r1, #128	@ 0x80
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f000 f935 	bl	800bb96 <USART_WaitOnFlagUntilTimeout>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d001      	beq.n	800b936 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 800b932:	2303      	movs	r3, #3
 800b934:	e056      	b.n	800b9e4 <HAL_USART_Transmit+0x152>
      }
      if (ptxdata8bits == NULL)
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10b      	bne.n	800b954 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	881a      	ldrh	r2, [r3, #0]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b948:	b292      	uxth	r2, r2
 800b94a:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	3302      	adds	r3, #2
 800b950:	61bb      	str	r3, [r7, #24]
 800b952:	e007      	b.n	800b964 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	781a      	ldrb	r2, [r3, #0]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	3301      	adds	r3, #1
 800b962:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b968:	b29b      	uxth	r3, r3
 800b96a:	3b01      	subs	r3, #1
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b976:	b29b      	uxth	r3, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1cf      	bne.n	800b91c <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2200      	movs	r2, #0
 800b984:	2140      	movs	r1, #64	@ 0x40
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 f905 	bl	800bb96 <USART_WaitOnFlagUntilTimeout>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 800b992:	2303      	movs	r3, #3
 800b994:	e026      	b.n	800b9e4 <HAL_USART_Transmit+0x152>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2240      	movs	r2, #64	@ 0x40
 800b99c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2208      	movs	r2, #8
 800b9a4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	8b1b      	ldrh	r3, [r3, #24]
 800b9ac:	b29a      	uxth	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f042 0208 	orr.w	r2, r2, #8
 800b9b6:	b292      	uxth	r2, r2
 800b9b8:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	8b1b      	ldrh	r3, [r3, #24]
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f042 0210 	orr.w	r2, r2, #16
 800b9ca:	b292      	uxth	r2, r2
 800b9cc:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return HAL_OK;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	e000      	b.n	800b9e4 <HAL_USART_Transmit+0x152>
  }
  else
  {
    return HAL_BUSY;
 800b9e2:	2302      	movs	r3, #2
  }
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3720      	adds	r7, #32
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08a      	sub	sp, #40	@ 0x28
 800b9f0:	af02      	add	r7, sp, #8
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	f040 80c1 	bne.w	800bb8c <HAL_USART_Receive+0x1a0>
  {
    if ((pRxData == NULL) || (Size == 0U))
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <HAL_USART_Receive+0x2a>
 800ba10:	88fb      	ldrh	r3, [r7, #6]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d101      	bne.n	800ba1a <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e0b9      	b.n	800bb8e <HAL_USART_Receive+0x1a2>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d101      	bne.n	800ba28 <HAL_USART_Receive+0x3c>
 800ba24:	2302      	movs	r3, #2
 800ba26:	e0b2      	b.n	800bb8e <HAL_USART_Receive+0x1a2>
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2222      	movs	r2, #34	@ 0x22
 800ba3a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba3e:	f7f9 fcbf 	bl	80053c0 <HAL_GetTick>
 800ba42:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	88fa      	ldrh	r2, [r7, #6]
 800ba48:	861a      	strh	r2, [r3, #48]	@ 0x30
    husart->RxXferCount = Size;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	88fa      	ldrh	r2, [r7, #6]
 800ba4e:	865a      	strh	r2, [r3, #50]	@ 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba58:	d10c      	bne.n	800ba74 <HAL_USART_Receive+0x88>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d104      	bne.n	800ba6c <HAL_USART_Receive+0x80>
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ba68:	869a      	strh	r2, [r3, #52]	@ 0x34
 800ba6a:	e027      	b.n	800babc <HAL_USART_Receive+0xd0>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	22ff      	movs	r2, #255	@ 0xff
 800ba70:	869a      	strh	r2, [r3, #52]	@ 0x34
 800ba72:	e023      	b.n	800babc <HAL_USART_Receive+0xd0>
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10b      	bne.n	800ba94 <HAL_USART_Receive+0xa8>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d103      	bne.n	800ba8c <HAL_USART_Receive+0xa0>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	22ff      	movs	r2, #255	@ 0xff
 800ba88:	869a      	strh	r2, [r3, #52]	@ 0x34
 800ba8a:	e017      	b.n	800babc <HAL_USART_Receive+0xd0>
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	227f      	movs	r2, #127	@ 0x7f
 800ba90:	869a      	strh	r2, [r3, #52]	@ 0x34
 800ba92:	e013      	b.n	800babc <HAL_USART_Receive+0xd0>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba9c:	d10b      	bne.n	800bab6 <HAL_USART_Receive+0xca>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d103      	bne.n	800baae <HAL_USART_Receive+0xc2>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	227f      	movs	r2, #127	@ 0x7f
 800baaa:	869a      	strh	r2, [r3, #52]	@ 0x34
 800baac:	e006      	b.n	800babc <HAL_USART_Receive+0xd0>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	223f      	movs	r2, #63	@ 0x3f
 800bab2:	869a      	strh	r2, [r3, #52]	@ 0x34
 800bab4:	e002      	b.n	800babc <HAL_USART_Receive+0xd0>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	869a      	strh	r2, [r3, #52]	@ 0x34
    uhMask = husart->Mask;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800bac0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800baca:	d108      	bne.n	800bade <HAL_USART_Receive+0xf2>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d104      	bne.n	800bade <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 800bad4:	2300      	movs	r3, #0
 800bad6:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	61bb      	str	r3, [r7, #24]
 800badc:	e003      	b.n	800bae6 <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 800bae6:	e042      	b.n	800bb6e <HAL_USART_Receive+0x182>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2200      	movs	r2, #0
 800baf0:	2180      	movs	r1, #128	@ 0x80
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f000 f84f 	bl	800bb96 <USART_WaitOnFlagUntilTimeout>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d001      	beq.n	800bb02 <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 800bafe:	2303      	movs	r3, #3
 800bb00:	e045      	b.n	800bb8e <HAL_USART_Receive+0x1a2>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	22ff      	movs	r2, #255	@ 0xff
 800bb08:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2200      	movs	r2, #0
 800bb12:	2120      	movs	r1, #32
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f000 f83e 	bl	800bb96 <USART_WaitOnFlagUntilTimeout>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e034      	b.n	800bb8e <HAL_USART_Receive+0x1a2>
      }

      if (prxdata8bits == NULL)
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10c      	bne.n	800bb44 <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	8a7b      	ldrh	r3, [r7, #18]
 800bb34:	4013      	ands	r3, r2
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	3302      	adds	r3, #2
 800bb40:	61bb      	str	r3, [r7, #24]
 800bb42:	e00d      	b.n	800bb60 <HAL_USART_Receive+0x174>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	b2da      	uxtb	r2, r3
 800bb4e:	8a7b      	ldrh	r3, [r7, #18]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	4013      	ands	r3, r2
 800bb54:	b2da      	uxtb	r2, r3
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	3b01      	subs	r3, #1
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	865a      	strh	r2, [r3, #50]	@ 0x32
    while (husart->RxXferCount > 0U)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1b7      	bne.n	800bae8 <HAL_USART_Receive+0xfc>
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR2_SLVEN */

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return HAL_OK;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	e000      	b.n	800bb8e <HAL_USART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 800bb8c:	2302      	movs	r3, #2
  }
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3720      	adds	r7, #32
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b084      	sub	sp, #16
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	60f8      	str	r0, [r7, #12]
 800bb9e:	60b9      	str	r1, [r7, #8]
 800bba0:	603b      	str	r3, [r7, #0]
 800bba2:	4613      	mov	r3, r2
 800bba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bba6:	e018      	b.n	800bbda <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbae:	d014      	beq.n	800bbda <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbb0:	f7f9 fc06 	bl	80053c0 <HAL_GetTick>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	69ba      	ldr	r2, [r7, #24]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d302      	bcc.n	800bbc6 <USART_WaitOnFlagUntilTimeout+0x30>
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d109      	bne.n	800bbda <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	e00f      	b.n	800bbfa <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	69da      	ldr	r2, [r3, #28]
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	bf0c      	ite	eq
 800bbea:	2301      	moveq	r3, #1
 800bbec:	2300      	movne	r3, #0
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	79fb      	ldrb	r3, [r7, #7]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d0d7      	beq.n	800bba8 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
	...

0800bc04 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800bc10:	2300      	movs	r3, #0
 800bc12:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	431a      	orrs	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	695b      	ldr	r3, [r3, #20]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	4b9a      	ldr	r3, [pc, #616]	@ (800be9c <USART_SetConfig+0x298>)
 800bc32:	4013      	ands	r3, r2
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	6812      	ldr	r2, [r2, #0]
 800bc38:	6979      	ldr	r1, [r7, #20]
 800bc3a:	430b      	orrs	r3, r1
 800bc3c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in USART Synchronous SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bc3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc42:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a1b      	ldr	r3, [r3, #32]
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	699a      	ldr	r2, [r3, #24]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	69db      	ldr	r3, [r3, #28]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	697a      	ldr	r2, [r7, #20]
 800bc78:	430a      	orrs	r2, r1
 800bc7a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a87      	ldr	r2, [pc, #540]	@ (800bea0 <USART_SetConfig+0x29c>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d121      	bne.n	800bcca <USART_SetConfig+0xc6>
 800bc86:	4b87      	ldr	r3, [pc, #540]	@ (800bea4 <USART_SetConfig+0x2a0>)
 800bc88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc8c:	f003 0303 	and.w	r3, r3, #3
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	d817      	bhi.n	800bcc4 <USART_SetConfig+0xc0>
 800bc94:	a201      	add	r2, pc, #4	@ (adr r2, 800bc9c <USART_SetConfig+0x98>)
 800bc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9a:	bf00      	nop
 800bc9c:	0800bcad 	.word	0x0800bcad
 800bca0:	0800bcb9 	.word	0x0800bcb9
 800bca4:	0800bcb3 	.word	0x0800bcb3
 800bca8:	0800bcbf 	.word	0x0800bcbf
 800bcac:	2301      	movs	r3, #1
 800bcae:	77fb      	strb	r3, [r7, #31]
 800bcb0:	e06b      	b.n	800bd8a <USART_SetConfig+0x186>
 800bcb2:	2302      	movs	r3, #2
 800bcb4:	77fb      	strb	r3, [r7, #31]
 800bcb6:	e068      	b.n	800bd8a <USART_SetConfig+0x186>
 800bcb8:	2304      	movs	r3, #4
 800bcba:	77fb      	strb	r3, [r7, #31]
 800bcbc:	e065      	b.n	800bd8a <USART_SetConfig+0x186>
 800bcbe:	2308      	movs	r3, #8
 800bcc0:	77fb      	strb	r3, [r7, #31]
 800bcc2:	e062      	b.n	800bd8a <USART_SetConfig+0x186>
 800bcc4:	2310      	movs	r3, #16
 800bcc6:	77fb      	strb	r3, [r7, #31]
 800bcc8:	e05f      	b.n	800bd8a <USART_SetConfig+0x186>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a76      	ldr	r2, [pc, #472]	@ (800bea8 <USART_SetConfig+0x2a4>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d132      	bne.n	800bd3a <USART_SetConfig+0x136>
 800bcd4:	4b73      	ldr	r3, [pc, #460]	@ (800bea4 <USART_SetConfig+0x2a0>)
 800bcd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcda:	f003 030c 	and.w	r3, r3, #12
 800bcde:	2b0c      	cmp	r3, #12
 800bce0:	d828      	bhi.n	800bd34 <USART_SetConfig+0x130>
 800bce2:	a201      	add	r2, pc, #4	@ (adr r2, 800bce8 <USART_SetConfig+0xe4>)
 800bce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce8:	0800bd1d 	.word	0x0800bd1d
 800bcec:	0800bd35 	.word	0x0800bd35
 800bcf0:	0800bd35 	.word	0x0800bd35
 800bcf4:	0800bd35 	.word	0x0800bd35
 800bcf8:	0800bd29 	.word	0x0800bd29
 800bcfc:	0800bd35 	.word	0x0800bd35
 800bd00:	0800bd35 	.word	0x0800bd35
 800bd04:	0800bd35 	.word	0x0800bd35
 800bd08:	0800bd23 	.word	0x0800bd23
 800bd0c:	0800bd35 	.word	0x0800bd35
 800bd10:	0800bd35 	.word	0x0800bd35
 800bd14:	0800bd35 	.word	0x0800bd35
 800bd18:	0800bd2f 	.word	0x0800bd2f
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	77fb      	strb	r3, [r7, #31]
 800bd20:	e033      	b.n	800bd8a <USART_SetConfig+0x186>
 800bd22:	2302      	movs	r3, #2
 800bd24:	77fb      	strb	r3, [r7, #31]
 800bd26:	e030      	b.n	800bd8a <USART_SetConfig+0x186>
 800bd28:	2304      	movs	r3, #4
 800bd2a:	77fb      	strb	r3, [r7, #31]
 800bd2c:	e02d      	b.n	800bd8a <USART_SetConfig+0x186>
 800bd2e:	2308      	movs	r3, #8
 800bd30:	77fb      	strb	r3, [r7, #31]
 800bd32:	e02a      	b.n	800bd8a <USART_SetConfig+0x186>
 800bd34:	2310      	movs	r3, #16
 800bd36:	77fb      	strb	r3, [r7, #31]
 800bd38:	e027      	b.n	800bd8a <USART_SetConfig+0x186>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a5b      	ldr	r2, [pc, #364]	@ (800beac <USART_SetConfig+0x2a8>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d120      	bne.n	800bd86 <USART_SetConfig+0x182>
 800bd44:	4b57      	ldr	r3, [pc, #348]	@ (800bea4 <USART_SetConfig+0x2a0>)
 800bd46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bd4e:	2b30      	cmp	r3, #48	@ 0x30
 800bd50:	d013      	beq.n	800bd7a <USART_SetConfig+0x176>
 800bd52:	2b30      	cmp	r3, #48	@ 0x30
 800bd54:	d814      	bhi.n	800bd80 <USART_SetConfig+0x17c>
 800bd56:	2b20      	cmp	r3, #32
 800bd58:	d009      	beq.n	800bd6e <USART_SetConfig+0x16a>
 800bd5a:	2b20      	cmp	r3, #32
 800bd5c:	d810      	bhi.n	800bd80 <USART_SetConfig+0x17c>
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d002      	beq.n	800bd68 <USART_SetConfig+0x164>
 800bd62:	2b10      	cmp	r3, #16
 800bd64:	d006      	beq.n	800bd74 <USART_SetConfig+0x170>
 800bd66:	e00b      	b.n	800bd80 <USART_SetConfig+0x17c>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	77fb      	strb	r3, [r7, #31]
 800bd6c:	e00d      	b.n	800bd8a <USART_SetConfig+0x186>
 800bd6e:	2302      	movs	r3, #2
 800bd70:	77fb      	strb	r3, [r7, #31]
 800bd72:	e00a      	b.n	800bd8a <USART_SetConfig+0x186>
 800bd74:	2304      	movs	r3, #4
 800bd76:	77fb      	strb	r3, [r7, #31]
 800bd78:	e007      	b.n	800bd8a <USART_SetConfig+0x186>
 800bd7a:	2308      	movs	r3, #8
 800bd7c:	77fb      	strb	r3, [r7, #31]
 800bd7e:	e004      	b.n	800bd8a <USART_SetConfig+0x186>
 800bd80:	2310      	movs	r3, #16
 800bd82:	77fb      	strb	r3, [r7, #31]
 800bd84:	e001      	b.n	800bd8a <USART_SetConfig+0x186>
 800bd86:	2310      	movs	r3, #16
 800bd88:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800bd8a:	7ffb      	ldrb	r3, [r7, #31]
 800bd8c:	2b08      	cmp	r3, #8
 800bd8e:	d85a      	bhi.n	800be46 <USART_SetConfig+0x242>
 800bd90:	a201      	add	r2, pc, #4	@ (adr r2, 800bd98 <USART_SetConfig+0x194>)
 800bd92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd96:	bf00      	nop
 800bd98:	0800bdbd 	.word	0x0800bdbd
 800bd9c:	0800bddb 	.word	0x0800bddb
 800bda0:	0800bdf9 	.word	0x0800bdf9
 800bda4:	0800be47 	.word	0x0800be47
 800bda8:	0800be13 	.word	0x0800be13
 800bdac:	0800be47 	.word	0x0800be47
 800bdb0:	0800be47 	.word	0x0800be47
 800bdb4:	0800be47 	.word	0x0800be47
 800bdb8:	0800be31 	.word	0x0800be31
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bdbc:	f7fd f822 	bl	8008e04 <HAL_RCC_GetPCLK1Freq>
 800bdc0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	005a      	lsls	r2, r3, #1
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	085b      	lsrs	r3, r3, #1
 800bdcc:	441a      	add	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800bdd8:	e038      	b.n	800be4c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800bdda:	f7fd f829 	bl	8008e30 <HAL_RCC_GetPCLK2Freq>
 800bdde:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	005a      	lsls	r2, r3, #1
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	085b      	lsrs	r3, r3, #1
 800bdea:	441a      	add	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800bdf6:	e029      	b.n	800be4c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	085b      	lsrs	r3, r3, #1
 800bdfe:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 800be02:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	6852      	ldr	r2, [r2, #4]
 800be0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800be0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800be10:	e01c      	b.n	800be4c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800be12:	f7fc ff5f 	bl	8008cd4 <HAL_RCC_GetSysClockFreq>
 800be16:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	005a      	lsls	r2, r3, #1
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	085b      	lsrs	r3, r3, #1
 800be22:	441a      	add	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	fbb2 f3f3 	udiv	r3, r2, r3
 800be2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800be2e:	e00d      	b.n	800be4c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	085b      	lsrs	r3, r3, #1
 800be36:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800be44:	e002      	b.n	800be4c <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	77bb      	strb	r3, [r7, #30]
      break;
 800be4a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	2b0f      	cmp	r3, #15
 800be50:	d916      	bls.n	800be80 <USART_SetConfig+0x27c>
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be58:	d212      	bcs.n	800be80 <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	f023 030f 	bic.w	r3, r3, #15
 800be62:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	085b      	lsrs	r3, r3, #1
 800be68:	b29b      	uxth	r3, r3
 800be6a:	f003 0307 	and.w	r3, r3, #7
 800be6e:	b29a      	uxth	r2, r3
 800be70:	89fb      	ldrh	r3, [r7, #14]
 800be72:	4313      	orrs	r3, r2
 800be74:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	89fa      	ldrh	r2, [r7, #14]
 800be7c:	60da      	str	r2, [r3, #12]
 800be7e:	e001      	b.n	800be84 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 800be90:	7fbb      	ldrb	r3, [r7, #30]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3720      	adds	r7, #32
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	efff69f3 	.word	0xefff69f3
 800bea0:	40013800 	.word	0x40013800
 800bea4:	40021000 	.word	0x40021000
 800bea8:	40004400 	.word	0x40004400
 800beac:	40004800 	.word	0x40004800

0800beb0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af02      	add	r7, sp, #8
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bebe:	f7f9 fa7f 	bl	80053c0 <HAL_GetTick>
 800bec2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 0308 	and.w	r3, r3, #8
 800bece:	2b08      	cmp	r3, #8
 800bed0:	d10e      	bne.n	800bef0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800bed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7ff fe58 	bl	800bb96 <USART_WaitOnFlagUntilTimeout>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800beec:	2303      	movs	r3, #3
 800beee:	e01e      	b.n	800bf2e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 0304 	and.w	r3, r3, #4
 800befa:	2b04      	cmp	r3, #4
 800befc:	d10e      	bne.n	800bf1c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800befe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7ff fe42 	bl	800bb96 <USART_WaitOnFlagUntilTimeout>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d001      	beq.n	800bf1c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e008      	b.n	800bf2e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <__cvt>:
 800bf36:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3a:	ec57 6b10 	vmov	r6, r7, d0
 800bf3e:	2f00      	cmp	r7, #0
 800bf40:	460c      	mov	r4, r1
 800bf42:	4619      	mov	r1, r3
 800bf44:	463b      	mov	r3, r7
 800bf46:	bfbb      	ittet	lt
 800bf48:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bf4c:	461f      	movlt	r7, r3
 800bf4e:	2300      	movge	r3, #0
 800bf50:	232d      	movlt	r3, #45	@ 0x2d
 800bf52:	700b      	strb	r3, [r1, #0]
 800bf54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf56:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bf5a:	4691      	mov	r9, r2
 800bf5c:	f023 0820 	bic.w	r8, r3, #32
 800bf60:	bfbc      	itt	lt
 800bf62:	4632      	movlt	r2, r6
 800bf64:	4616      	movlt	r6, r2
 800bf66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bf6a:	d005      	beq.n	800bf78 <__cvt+0x42>
 800bf6c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bf70:	d100      	bne.n	800bf74 <__cvt+0x3e>
 800bf72:	3401      	adds	r4, #1
 800bf74:	2102      	movs	r1, #2
 800bf76:	e000      	b.n	800bf7a <__cvt+0x44>
 800bf78:	2103      	movs	r1, #3
 800bf7a:	ab03      	add	r3, sp, #12
 800bf7c:	9301      	str	r3, [sp, #4]
 800bf7e:	ab02      	add	r3, sp, #8
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	ec47 6b10 	vmov	d0, r6, r7
 800bf86:	4653      	mov	r3, sl
 800bf88:	4622      	mov	r2, r4
 800bf8a:	f001 f915 	bl	800d1b8 <_dtoa_r>
 800bf8e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bf92:	4605      	mov	r5, r0
 800bf94:	d119      	bne.n	800bfca <__cvt+0x94>
 800bf96:	f019 0f01 	tst.w	r9, #1
 800bf9a:	d00e      	beq.n	800bfba <__cvt+0x84>
 800bf9c:	eb00 0904 	add.w	r9, r0, r4
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	4639      	mov	r1, r7
 800bfa8:	f7f4 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfac:	b108      	cbz	r0, 800bfb2 <__cvt+0x7c>
 800bfae:	f8cd 900c 	str.w	r9, [sp, #12]
 800bfb2:	2230      	movs	r2, #48	@ 0x30
 800bfb4:	9b03      	ldr	r3, [sp, #12]
 800bfb6:	454b      	cmp	r3, r9
 800bfb8:	d31e      	bcc.n	800bff8 <__cvt+0xc2>
 800bfba:	9b03      	ldr	r3, [sp, #12]
 800bfbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfbe:	1b5b      	subs	r3, r3, r5
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	6013      	str	r3, [r2, #0]
 800bfc4:	b004      	add	sp, #16
 800bfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bfce:	eb00 0904 	add.w	r9, r0, r4
 800bfd2:	d1e5      	bne.n	800bfa0 <__cvt+0x6a>
 800bfd4:	7803      	ldrb	r3, [r0, #0]
 800bfd6:	2b30      	cmp	r3, #48	@ 0x30
 800bfd8:	d10a      	bne.n	800bff0 <__cvt+0xba>
 800bfda:	2200      	movs	r2, #0
 800bfdc:	2300      	movs	r3, #0
 800bfde:	4630      	mov	r0, r6
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	f7f4 fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfe6:	b918      	cbnz	r0, 800bff0 <__cvt+0xba>
 800bfe8:	f1c4 0401 	rsb	r4, r4, #1
 800bfec:	f8ca 4000 	str.w	r4, [sl]
 800bff0:	f8da 3000 	ldr.w	r3, [sl]
 800bff4:	4499      	add	r9, r3
 800bff6:	e7d3      	b.n	800bfa0 <__cvt+0x6a>
 800bff8:	1c59      	adds	r1, r3, #1
 800bffa:	9103      	str	r1, [sp, #12]
 800bffc:	701a      	strb	r2, [r3, #0]
 800bffe:	e7d9      	b.n	800bfb4 <__cvt+0x7e>

0800c000 <__exponent>:
 800c000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c002:	2900      	cmp	r1, #0
 800c004:	bfba      	itte	lt
 800c006:	4249      	neglt	r1, r1
 800c008:	232d      	movlt	r3, #45	@ 0x2d
 800c00a:	232b      	movge	r3, #43	@ 0x2b
 800c00c:	2909      	cmp	r1, #9
 800c00e:	7002      	strb	r2, [r0, #0]
 800c010:	7043      	strb	r3, [r0, #1]
 800c012:	dd29      	ble.n	800c068 <__exponent+0x68>
 800c014:	f10d 0307 	add.w	r3, sp, #7
 800c018:	461d      	mov	r5, r3
 800c01a:	270a      	movs	r7, #10
 800c01c:	461a      	mov	r2, r3
 800c01e:	fbb1 f6f7 	udiv	r6, r1, r7
 800c022:	fb07 1416 	mls	r4, r7, r6, r1
 800c026:	3430      	adds	r4, #48	@ 0x30
 800c028:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c02c:	460c      	mov	r4, r1
 800c02e:	2c63      	cmp	r4, #99	@ 0x63
 800c030:	f103 33ff 	add.w	r3, r3, #4294967295
 800c034:	4631      	mov	r1, r6
 800c036:	dcf1      	bgt.n	800c01c <__exponent+0x1c>
 800c038:	3130      	adds	r1, #48	@ 0x30
 800c03a:	1e94      	subs	r4, r2, #2
 800c03c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c040:	1c41      	adds	r1, r0, #1
 800c042:	4623      	mov	r3, r4
 800c044:	42ab      	cmp	r3, r5
 800c046:	d30a      	bcc.n	800c05e <__exponent+0x5e>
 800c048:	f10d 0309 	add.w	r3, sp, #9
 800c04c:	1a9b      	subs	r3, r3, r2
 800c04e:	42ac      	cmp	r4, r5
 800c050:	bf88      	it	hi
 800c052:	2300      	movhi	r3, #0
 800c054:	3302      	adds	r3, #2
 800c056:	4403      	add	r3, r0
 800c058:	1a18      	subs	r0, r3, r0
 800c05a:	b003      	add	sp, #12
 800c05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c05e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c062:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c066:	e7ed      	b.n	800c044 <__exponent+0x44>
 800c068:	2330      	movs	r3, #48	@ 0x30
 800c06a:	3130      	adds	r1, #48	@ 0x30
 800c06c:	7083      	strb	r3, [r0, #2]
 800c06e:	70c1      	strb	r1, [r0, #3]
 800c070:	1d03      	adds	r3, r0, #4
 800c072:	e7f1      	b.n	800c058 <__exponent+0x58>

0800c074 <_printf_float>:
 800c074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c078:	b08d      	sub	sp, #52	@ 0x34
 800c07a:	460c      	mov	r4, r1
 800c07c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c080:	4616      	mov	r6, r2
 800c082:	461f      	mov	r7, r3
 800c084:	4605      	mov	r5, r0
 800c086:	f000 ff81 	bl	800cf8c <_localeconv_r>
 800c08a:	6803      	ldr	r3, [r0, #0]
 800c08c:	9304      	str	r3, [sp, #16]
 800c08e:	4618      	mov	r0, r3
 800c090:	f7f4 f8ee 	bl	8000270 <strlen>
 800c094:	2300      	movs	r3, #0
 800c096:	930a      	str	r3, [sp, #40]	@ 0x28
 800c098:	f8d8 3000 	ldr.w	r3, [r8]
 800c09c:	9005      	str	r0, [sp, #20]
 800c09e:	3307      	adds	r3, #7
 800c0a0:	f023 0307 	bic.w	r3, r3, #7
 800c0a4:	f103 0208 	add.w	r2, r3, #8
 800c0a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c0ac:	f8d4 b000 	ldr.w	fp, [r4]
 800c0b0:	f8c8 2000 	str.w	r2, [r8]
 800c0b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c0bc:	9307      	str	r3, [sp, #28]
 800c0be:	f8cd 8018 	str.w	r8, [sp, #24]
 800c0c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c0c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0ca:	4b9c      	ldr	r3, [pc, #624]	@ (800c33c <_printf_float+0x2c8>)
 800c0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d0:	f7f4 fd2c 	bl	8000b2c <__aeabi_dcmpun>
 800c0d4:	bb70      	cbnz	r0, 800c134 <_printf_float+0xc0>
 800c0d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0da:	4b98      	ldr	r3, [pc, #608]	@ (800c33c <_printf_float+0x2c8>)
 800c0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e0:	f7f4 fd06 	bl	8000af0 <__aeabi_dcmple>
 800c0e4:	bb30      	cbnz	r0, 800c134 <_printf_float+0xc0>
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	f7f4 fcf5 	bl	8000adc <__aeabi_dcmplt>
 800c0f2:	b110      	cbz	r0, 800c0fa <_printf_float+0x86>
 800c0f4:	232d      	movs	r3, #45	@ 0x2d
 800c0f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0fa:	4a91      	ldr	r2, [pc, #580]	@ (800c340 <_printf_float+0x2cc>)
 800c0fc:	4b91      	ldr	r3, [pc, #580]	@ (800c344 <_printf_float+0x2d0>)
 800c0fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c102:	bf8c      	ite	hi
 800c104:	4690      	movhi	r8, r2
 800c106:	4698      	movls	r8, r3
 800c108:	2303      	movs	r3, #3
 800c10a:	6123      	str	r3, [r4, #16]
 800c10c:	f02b 0304 	bic.w	r3, fp, #4
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	f04f 0900 	mov.w	r9, #0
 800c116:	9700      	str	r7, [sp, #0]
 800c118:	4633      	mov	r3, r6
 800c11a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c11c:	4621      	mov	r1, r4
 800c11e:	4628      	mov	r0, r5
 800c120:	f000 f9d2 	bl	800c4c8 <_printf_common>
 800c124:	3001      	adds	r0, #1
 800c126:	f040 808d 	bne.w	800c244 <_printf_float+0x1d0>
 800c12a:	f04f 30ff 	mov.w	r0, #4294967295
 800c12e:	b00d      	add	sp, #52	@ 0x34
 800c130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c134:	4642      	mov	r2, r8
 800c136:	464b      	mov	r3, r9
 800c138:	4640      	mov	r0, r8
 800c13a:	4649      	mov	r1, r9
 800c13c:	f7f4 fcf6 	bl	8000b2c <__aeabi_dcmpun>
 800c140:	b140      	cbz	r0, 800c154 <_printf_float+0xe0>
 800c142:	464b      	mov	r3, r9
 800c144:	2b00      	cmp	r3, #0
 800c146:	bfbc      	itt	lt
 800c148:	232d      	movlt	r3, #45	@ 0x2d
 800c14a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c14e:	4a7e      	ldr	r2, [pc, #504]	@ (800c348 <_printf_float+0x2d4>)
 800c150:	4b7e      	ldr	r3, [pc, #504]	@ (800c34c <_printf_float+0x2d8>)
 800c152:	e7d4      	b.n	800c0fe <_printf_float+0x8a>
 800c154:	6863      	ldr	r3, [r4, #4]
 800c156:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c15a:	9206      	str	r2, [sp, #24]
 800c15c:	1c5a      	adds	r2, r3, #1
 800c15e:	d13b      	bne.n	800c1d8 <_printf_float+0x164>
 800c160:	2306      	movs	r3, #6
 800c162:	6063      	str	r3, [r4, #4]
 800c164:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c168:	2300      	movs	r3, #0
 800c16a:	6022      	str	r2, [r4, #0]
 800c16c:	9303      	str	r3, [sp, #12]
 800c16e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c170:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c174:	ab09      	add	r3, sp, #36	@ 0x24
 800c176:	9300      	str	r3, [sp, #0]
 800c178:	6861      	ldr	r1, [r4, #4]
 800c17a:	ec49 8b10 	vmov	d0, r8, r9
 800c17e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c182:	4628      	mov	r0, r5
 800c184:	f7ff fed7 	bl	800bf36 <__cvt>
 800c188:	9b06      	ldr	r3, [sp, #24]
 800c18a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c18c:	2b47      	cmp	r3, #71	@ 0x47
 800c18e:	4680      	mov	r8, r0
 800c190:	d129      	bne.n	800c1e6 <_printf_float+0x172>
 800c192:	1cc8      	adds	r0, r1, #3
 800c194:	db02      	blt.n	800c19c <_printf_float+0x128>
 800c196:	6863      	ldr	r3, [r4, #4]
 800c198:	4299      	cmp	r1, r3
 800c19a:	dd41      	ble.n	800c220 <_printf_float+0x1ac>
 800c19c:	f1aa 0a02 	sub.w	sl, sl, #2
 800c1a0:	fa5f fa8a 	uxtb.w	sl, sl
 800c1a4:	3901      	subs	r1, #1
 800c1a6:	4652      	mov	r2, sl
 800c1a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c1ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800c1ae:	f7ff ff27 	bl	800c000 <__exponent>
 800c1b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1b4:	1813      	adds	r3, r2, r0
 800c1b6:	2a01      	cmp	r2, #1
 800c1b8:	4681      	mov	r9, r0
 800c1ba:	6123      	str	r3, [r4, #16]
 800c1bc:	dc02      	bgt.n	800c1c4 <_printf_float+0x150>
 800c1be:	6822      	ldr	r2, [r4, #0]
 800c1c0:	07d2      	lsls	r2, r2, #31
 800c1c2:	d501      	bpl.n	800c1c8 <_printf_float+0x154>
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	6123      	str	r3, [r4, #16]
 800c1c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d0a2      	beq.n	800c116 <_printf_float+0xa2>
 800c1d0:	232d      	movs	r3, #45	@ 0x2d
 800c1d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1d6:	e79e      	b.n	800c116 <_printf_float+0xa2>
 800c1d8:	9a06      	ldr	r2, [sp, #24]
 800c1da:	2a47      	cmp	r2, #71	@ 0x47
 800c1dc:	d1c2      	bne.n	800c164 <_printf_float+0xf0>
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1c0      	bne.n	800c164 <_printf_float+0xf0>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e7bd      	b.n	800c162 <_printf_float+0xee>
 800c1e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c1ea:	d9db      	bls.n	800c1a4 <_printf_float+0x130>
 800c1ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c1f0:	d118      	bne.n	800c224 <_printf_float+0x1b0>
 800c1f2:	2900      	cmp	r1, #0
 800c1f4:	6863      	ldr	r3, [r4, #4]
 800c1f6:	dd0b      	ble.n	800c210 <_printf_float+0x19c>
 800c1f8:	6121      	str	r1, [r4, #16]
 800c1fa:	b913      	cbnz	r3, 800c202 <_printf_float+0x18e>
 800c1fc:	6822      	ldr	r2, [r4, #0]
 800c1fe:	07d0      	lsls	r0, r2, #31
 800c200:	d502      	bpl.n	800c208 <_printf_float+0x194>
 800c202:	3301      	adds	r3, #1
 800c204:	440b      	add	r3, r1
 800c206:	6123      	str	r3, [r4, #16]
 800c208:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c20a:	f04f 0900 	mov.w	r9, #0
 800c20e:	e7db      	b.n	800c1c8 <_printf_float+0x154>
 800c210:	b913      	cbnz	r3, 800c218 <_printf_float+0x1a4>
 800c212:	6822      	ldr	r2, [r4, #0]
 800c214:	07d2      	lsls	r2, r2, #31
 800c216:	d501      	bpl.n	800c21c <_printf_float+0x1a8>
 800c218:	3302      	adds	r3, #2
 800c21a:	e7f4      	b.n	800c206 <_printf_float+0x192>
 800c21c:	2301      	movs	r3, #1
 800c21e:	e7f2      	b.n	800c206 <_printf_float+0x192>
 800c220:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c226:	4299      	cmp	r1, r3
 800c228:	db05      	blt.n	800c236 <_printf_float+0x1c2>
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	6121      	str	r1, [r4, #16]
 800c22e:	07d8      	lsls	r0, r3, #31
 800c230:	d5ea      	bpl.n	800c208 <_printf_float+0x194>
 800c232:	1c4b      	adds	r3, r1, #1
 800c234:	e7e7      	b.n	800c206 <_printf_float+0x192>
 800c236:	2900      	cmp	r1, #0
 800c238:	bfd4      	ite	le
 800c23a:	f1c1 0202 	rsble	r2, r1, #2
 800c23e:	2201      	movgt	r2, #1
 800c240:	4413      	add	r3, r2
 800c242:	e7e0      	b.n	800c206 <_printf_float+0x192>
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	055a      	lsls	r2, r3, #21
 800c248:	d407      	bmi.n	800c25a <_printf_float+0x1e6>
 800c24a:	6923      	ldr	r3, [r4, #16]
 800c24c:	4642      	mov	r2, r8
 800c24e:	4631      	mov	r1, r6
 800c250:	4628      	mov	r0, r5
 800c252:	47b8      	blx	r7
 800c254:	3001      	adds	r0, #1
 800c256:	d12b      	bne.n	800c2b0 <_printf_float+0x23c>
 800c258:	e767      	b.n	800c12a <_printf_float+0xb6>
 800c25a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c25e:	f240 80dd 	bls.w	800c41c <_printf_float+0x3a8>
 800c262:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c266:	2200      	movs	r2, #0
 800c268:	2300      	movs	r3, #0
 800c26a:	f7f4 fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c26e:	2800      	cmp	r0, #0
 800c270:	d033      	beq.n	800c2da <_printf_float+0x266>
 800c272:	4a37      	ldr	r2, [pc, #220]	@ (800c350 <_printf_float+0x2dc>)
 800c274:	2301      	movs	r3, #1
 800c276:	4631      	mov	r1, r6
 800c278:	4628      	mov	r0, r5
 800c27a:	47b8      	blx	r7
 800c27c:	3001      	adds	r0, #1
 800c27e:	f43f af54 	beq.w	800c12a <_printf_float+0xb6>
 800c282:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c286:	4543      	cmp	r3, r8
 800c288:	db02      	blt.n	800c290 <_printf_float+0x21c>
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	07d8      	lsls	r0, r3, #31
 800c28e:	d50f      	bpl.n	800c2b0 <_printf_float+0x23c>
 800c290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c294:	4631      	mov	r1, r6
 800c296:	4628      	mov	r0, r5
 800c298:	47b8      	blx	r7
 800c29a:	3001      	adds	r0, #1
 800c29c:	f43f af45 	beq.w	800c12a <_printf_float+0xb6>
 800c2a0:	f04f 0900 	mov.w	r9, #0
 800c2a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2a8:	f104 0a1a 	add.w	sl, r4, #26
 800c2ac:	45c8      	cmp	r8, r9
 800c2ae:	dc09      	bgt.n	800c2c4 <_printf_float+0x250>
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	079b      	lsls	r3, r3, #30
 800c2b4:	f100 8103 	bmi.w	800c4be <_printf_float+0x44a>
 800c2b8:	68e0      	ldr	r0, [r4, #12]
 800c2ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2bc:	4298      	cmp	r0, r3
 800c2be:	bfb8      	it	lt
 800c2c0:	4618      	movlt	r0, r3
 800c2c2:	e734      	b.n	800c12e <_printf_float+0xba>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	4652      	mov	r2, sl
 800c2c8:	4631      	mov	r1, r6
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	47b8      	blx	r7
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	f43f af2b 	beq.w	800c12a <_printf_float+0xb6>
 800c2d4:	f109 0901 	add.w	r9, r9, #1
 800c2d8:	e7e8      	b.n	800c2ac <_printf_float+0x238>
 800c2da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	dc39      	bgt.n	800c354 <_printf_float+0x2e0>
 800c2e0:	4a1b      	ldr	r2, [pc, #108]	@ (800c350 <_printf_float+0x2dc>)
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	47b8      	blx	r7
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	f43f af1d 	beq.w	800c12a <_printf_float+0xb6>
 800c2f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c2f4:	ea59 0303 	orrs.w	r3, r9, r3
 800c2f8:	d102      	bne.n	800c300 <_printf_float+0x28c>
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	07d9      	lsls	r1, r3, #31
 800c2fe:	d5d7      	bpl.n	800c2b0 <_printf_float+0x23c>
 800c300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c304:	4631      	mov	r1, r6
 800c306:	4628      	mov	r0, r5
 800c308:	47b8      	blx	r7
 800c30a:	3001      	adds	r0, #1
 800c30c:	f43f af0d 	beq.w	800c12a <_printf_float+0xb6>
 800c310:	f04f 0a00 	mov.w	sl, #0
 800c314:	f104 0b1a 	add.w	fp, r4, #26
 800c318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c31a:	425b      	negs	r3, r3
 800c31c:	4553      	cmp	r3, sl
 800c31e:	dc01      	bgt.n	800c324 <_printf_float+0x2b0>
 800c320:	464b      	mov	r3, r9
 800c322:	e793      	b.n	800c24c <_printf_float+0x1d8>
 800c324:	2301      	movs	r3, #1
 800c326:	465a      	mov	r2, fp
 800c328:	4631      	mov	r1, r6
 800c32a:	4628      	mov	r0, r5
 800c32c:	47b8      	blx	r7
 800c32e:	3001      	adds	r0, #1
 800c330:	f43f aefb 	beq.w	800c12a <_printf_float+0xb6>
 800c334:	f10a 0a01 	add.w	sl, sl, #1
 800c338:	e7ee      	b.n	800c318 <_printf_float+0x2a4>
 800c33a:	bf00      	nop
 800c33c:	7fefffff 	.word	0x7fefffff
 800c340:	08011750 	.word	0x08011750
 800c344:	0801174c 	.word	0x0801174c
 800c348:	08011758 	.word	0x08011758
 800c34c:	08011754 	.word	0x08011754
 800c350:	0801175c 	.word	0x0801175c
 800c354:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c356:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c35a:	4553      	cmp	r3, sl
 800c35c:	bfa8      	it	ge
 800c35e:	4653      	movge	r3, sl
 800c360:	2b00      	cmp	r3, #0
 800c362:	4699      	mov	r9, r3
 800c364:	dc36      	bgt.n	800c3d4 <_printf_float+0x360>
 800c366:	f04f 0b00 	mov.w	fp, #0
 800c36a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c36e:	f104 021a 	add.w	r2, r4, #26
 800c372:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c374:	9306      	str	r3, [sp, #24]
 800c376:	eba3 0309 	sub.w	r3, r3, r9
 800c37a:	455b      	cmp	r3, fp
 800c37c:	dc31      	bgt.n	800c3e2 <_printf_float+0x36e>
 800c37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c380:	459a      	cmp	sl, r3
 800c382:	dc3a      	bgt.n	800c3fa <_printf_float+0x386>
 800c384:	6823      	ldr	r3, [r4, #0]
 800c386:	07da      	lsls	r2, r3, #31
 800c388:	d437      	bmi.n	800c3fa <_printf_float+0x386>
 800c38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c38c:	ebaa 0903 	sub.w	r9, sl, r3
 800c390:	9b06      	ldr	r3, [sp, #24]
 800c392:	ebaa 0303 	sub.w	r3, sl, r3
 800c396:	4599      	cmp	r9, r3
 800c398:	bfa8      	it	ge
 800c39a:	4699      	movge	r9, r3
 800c39c:	f1b9 0f00 	cmp.w	r9, #0
 800c3a0:	dc33      	bgt.n	800c40a <_printf_float+0x396>
 800c3a2:	f04f 0800 	mov.w	r8, #0
 800c3a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3aa:	f104 0b1a 	add.w	fp, r4, #26
 800c3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3b0:	ebaa 0303 	sub.w	r3, sl, r3
 800c3b4:	eba3 0309 	sub.w	r3, r3, r9
 800c3b8:	4543      	cmp	r3, r8
 800c3ba:	f77f af79 	ble.w	800c2b0 <_printf_float+0x23c>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	465a      	mov	r2, fp
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	47b8      	blx	r7
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	f43f aeae 	beq.w	800c12a <_printf_float+0xb6>
 800c3ce:	f108 0801 	add.w	r8, r8, #1
 800c3d2:	e7ec      	b.n	800c3ae <_printf_float+0x33a>
 800c3d4:	4642      	mov	r2, r8
 800c3d6:	4631      	mov	r1, r6
 800c3d8:	4628      	mov	r0, r5
 800c3da:	47b8      	blx	r7
 800c3dc:	3001      	adds	r0, #1
 800c3de:	d1c2      	bne.n	800c366 <_printf_float+0x2f2>
 800c3e0:	e6a3      	b.n	800c12a <_printf_float+0xb6>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	4631      	mov	r1, r6
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	9206      	str	r2, [sp, #24]
 800c3ea:	47b8      	blx	r7
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	f43f ae9c 	beq.w	800c12a <_printf_float+0xb6>
 800c3f2:	9a06      	ldr	r2, [sp, #24]
 800c3f4:	f10b 0b01 	add.w	fp, fp, #1
 800c3f8:	e7bb      	b.n	800c372 <_printf_float+0x2fe>
 800c3fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3fe:	4631      	mov	r1, r6
 800c400:	4628      	mov	r0, r5
 800c402:	47b8      	blx	r7
 800c404:	3001      	adds	r0, #1
 800c406:	d1c0      	bne.n	800c38a <_printf_float+0x316>
 800c408:	e68f      	b.n	800c12a <_printf_float+0xb6>
 800c40a:	9a06      	ldr	r2, [sp, #24]
 800c40c:	464b      	mov	r3, r9
 800c40e:	4442      	add	r2, r8
 800c410:	4631      	mov	r1, r6
 800c412:	4628      	mov	r0, r5
 800c414:	47b8      	blx	r7
 800c416:	3001      	adds	r0, #1
 800c418:	d1c3      	bne.n	800c3a2 <_printf_float+0x32e>
 800c41a:	e686      	b.n	800c12a <_printf_float+0xb6>
 800c41c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c420:	f1ba 0f01 	cmp.w	sl, #1
 800c424:	dc01      	bgt.n	800c42a <_printf_float+0x3b6>
 800c426:	07db      	lsls	r3, r3, #31
 800c428:	d536      	bpl.n	800c498 <_printf_float+0x424>
 800c42a:	2301      	movs	r3, #1
 800c42c:	4642      	mov	r2, r8
 800c42e:	4631      	mov	r1, r6
 800c430:	4628      	mov	r0, r5
 800c432:	47b8      	blx	r7
 800c434:	3001      	adds	r0, #1
 800c436:	f43f ae78 	beq.w	800c12a <_printf_float+0xb6>
 800c43a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c43e:	4631      	mov	r1, r6
 800c440:	4628      	mov	r0, r5
 800c442:	47b8      	blx	r7
 800c444:	3001      	adds	r0, #1
 800c446:	f43f ae70 	beq.w	800c12a <_printf_float+0xb6>
 800c44a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c44e:	2200      	movs	r2, #0
 800c450:	2300      	movs	r3, #0
 800c452:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c456:	f7f4 fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800c45a:	b9c0      	cbnz	r0, 800c48e <_printf_float+0x41a>
 800c45c:	4653      	mov	r3, sl
 800c45e:	f108 0201 	add.w	r2, r8, #1
 800c462:	4631      	mov	r1, r6
 800c464:	4628      	mov	r0, r5
 800c466:	47b8      	blx	r7
 800c468:	3001      	adds	r0, #1
 800c46a:	d10c      	bne.n	800c486 <_printf_float+0x412>
 800c46c:	e65d      	b.n	800c12a <_printf_float+0xb6>
 800c46e:	2301      	movs	r3, #1
 800c470:	465a      	mov	r2, fp
 800c472:	4631      	mov	r1, r6
 800c474:	4628      	mov	r0, r5
 800c476:	47b8      	blx	r7
 800c478:	3001      	adds	r0, #1
 800c47a:	f43f ae56 	beq.w	800c12a <_printf_float+0xb6>
 800c47e:	f108 0801 	add.w	r8, r8, #1
 800c482:	45d0      	cmp	r8, sl
 800c484:	dbf3      	blt.n	800c46e <_printf_float+0x3fa>
 800c486:	464b      	mov	r3, r9
 800c488:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c48c:	e6df      	b.n	800c24e <_printf_float+0x1da>
 800c48e:	f04f 0800 	mov.w	r8, #0
 800c492:	f104 0b1a 	add.w	fp, r4, #26
 800c496:	e7f4      	b.n	800c482 <_printf_float+0x40e>
 800c498:	2301      	movs	r3, #1
 800c49a:	4642      	mov	r2, r8
 800c49c:	e7e1      	b.n	800c462 <_printf_float+0x3ee>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	464a      	mov	r2, r9
 800c4a2:	4631      	mov	r1, r6
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	47b8      	blx	r7
 800c4a8:	3001      	adds	r0, #1
 800c4aa:	f43f ae3e 	beq.w	800c12a <_printf_float+0xb6>
 800c4ae:	f108 0801 	add.w	r8, r8, #1
 800c4b2:	68e3      	ldr	r3, [r4, #12]
 800c4b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4b6:	1a5b      	subs	r3, r3, r1
 800c4b8:	4543      	cmp	r3, r8
 800c4ba:	dcf0      	bgt.n	800c49e <_printf_float+0x42a>
 800c4bc:	e6fc      	b.n	800c2b8 <_printf_float+0x244>
 800c4be:	f04f 0800 	mov.w	r8, #0
 800c4c2:	f104 0919 	add.w	r9, r4, #25
 800c4c6:	e7f4      	b.n	800c4b2 <_printf_float+0x43e>

0800c4c8 <_printf_common>:
 800c4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4cc:	4616      	mov	r6, r2
 800c4ce:	4698      	mov	r8, r3
 800c4d0:	688a      	ldr	r2, [r1, #8]
 800c4d2:	690b      	ldr	r3, [r1, #16]
 800c4d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	bfb8      	it	lt
 800c4dc:	4613      	movlt	r3, r2
 800c4de:	6033      	str	r3, [r6, #0]
 800c4e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4e4:	4607      	mov	r7, r0
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	b10a      	cbz	r2, 800c4ee <_printf_common+0x26>
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	6033      	str	r3, [r6, #0]
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	0699      	lsls	r1, r3, #26
 800c4f2:	bf42      	ittt	mi
 800c4f4:	6833      	ldrmi	r3, [r6, #0]
 800c4f6:	3302      	addmi	r3, #2
 800c4f8:	6033      	strmi	r3, [r6, #0]
 800c4fa:	6825      	ldr	r5, [r4, #0]
 800c4fc:	f015 0506 	ands.w	r5, r5, #6
 800c500:	d106      	bne.n	800c510 <_printf_common+0x48>
 800c502:	f104 0a19 	add.w	sl, r4, #25
 800c506:	68e3      	ldr	r3, [r4, #12]
 800c508:	6832      	ldr	r2, [r6, #0]
 800c50a:	1a9b      	subs	r3, r3, r2
 800c50c:	42ab      	cmp	r3, r5
 800c50e:	dc26      	bgt.n	800c55e <_printf_common+0x96>
 800c510:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c514:	6822      	ldr	r2, [r4, #0]
 800c516:	3b00      	subs	r3, #0
 800c518:	bf18      	it	ne
 800c51a:	2301      	movne	r3, #1
 800c51c:	0692      	lsls	r2, r2, #26
 800c51e:	d42b      	bmi.n	800c578 <_printf_common+0xb0>
 800c520:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c524:	4641      	mov	r1, r8
 800c526:	4638      	mov	r0, r7
 800c528:	47c8      	blx	r9
 800c52a:	3001      	adds	r0, #1
 800c52c:	d01e      	beq.n	800c56c <_printf_common+0xa4>
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	6922      	ldr	r2, [r4, #16]
 800c532:	f003 0306 	and.w	r3, r3, #6
 800c536:	2b04      	cmp	r3, #4
 800c538:	bf02      	ittt	eq
 800c53a:	68e5      	ldreq	r5, [r4, #12]
 800c53c:	6833      	ldreq	r3, [r6, #0]
 800c53e:	1aed      	subeq	r5, r5, r3
 800c540:	68a3      	ldr	r3, [r4, #8]
 800c542:	bf0c      	ite	eq
 800c544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c548:	2500      	movne	r5, #0
 800c54a:	4293      	cmp	r3, r2
 800c54c:	bfc4      	itt	gt
 800c54e:	1a9b      	subgt	r3, r3, r2
 800c550:	18ed      	addgt	r5, r5, r3
 800c552:	2600      	movs	r6, #0
 800c554:	341a      	adds	r4, #26
 800c556:	42b5      	cmp	r5, r6
 800c558:	d11a      	bne.n	800c590 <_printf_common+0xc8>
 800c55a:	2000      	movs	r0, #0
 800c55c:	e008      	b.n	800c570 <_printf_common+0xa8>
 800c55e:	2301      	movs	r3, #1
 800c560:	4652      	mov	r2, sl
 800c562:	4641      	mov	r1, r8
 800c564:	4638      	mov	r0, r7
 800c566:	47c8      	blx	r9
 800c568:	3001      	adds	r0, #1
 800c56a:	d103      	bne.n	800c574 <_printf_common+0xac>
 800c56c:	f04f 30ff 	mov.w	r0, #4294967295
 800c570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c574:	3501      	adds	r5, #1
 800c576:	e7c6      	b.n	800c506 <_printf_common+0x3e>
 800c578:	18e1      	adds	r1, r4, r3
 800c57a:	1c5a      	adds	r2, r3, #1
 800c57c:	2030      	movs	r0, #48	@ 0x30
 800c57e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c582:	4422      	add	r2, r4
 800c584:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c588:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c58c:	3302      	adds	r3, #2
 800c58e:	e7c7      	b.n	800c520 <_printf_common+0x58>
 800c590:	2301      	movs	r3, #1
 800c592:	4622      	mov	r2, r4
 800c594:	4641      	mov	r1, r8
 800c596:	4638      	mov	r0, r7
 800c598:	47c8      	blx	r9
 800c59a:	3001      	adds	r0, #1
 800c59c:	d0e6      	beq.n	800c56c <_printf_common+0xa4>
 800c59e:	3601      	adds	r6, #1
 800c5a0:	e7d9      	b.n	800c556 <_printf_common+0x8e>
	...

0800c5a4 <_printf_i>:
 800c5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a8:	7e0f      	ldrb	r7, [r1, #24]
 800c5aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5ac:	2f78      	cmp	r7, #120	@ 0x78
 800c5ae:	4691      	mov	r9, r2
 800c5b0:	4680      	mov	r8, r0
 800c5b2:	460c      	mov	r4, r1
 800c5b4:	469a      	mov	sl, r3
 800c5b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5ba:	d807      	bhi.n	800c5cc <_printf_i+0x28>
 800c5bc:	2f62      	cmp	r7, #98	@ 0x62
 800c5be:	d80a      	bhi.n	800c5d6 <_printf_i+0x32>
 800c5c0:	2f00      	cmp	r7, #0
 800c5c2:	f000 80d1 	beq.w	800c768 <_printf_i+0x1c4>
 800c5c6:	2f58      	cmp	r7, #88	@ 0x58
 800c5c8:	f000 80b8 	beq.w	800c73c <_printf_i+0x198>
 800c5cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5d4:	e03a      	b.n	800c64c <_printf_i+0xa8>
 800c5d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5da:	2b15      	cmp	r3, #21
 800c5dc:	d8f6      	bhi.n	800c5cc <_printf_i+0x28>
 800c5de:	a101      	add	r1, pc, #4	@ (adr r1, 800c5e4 <_printf_i+0x40>)
 800c5e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5e4:	0800c63d 	.word	0x0800c63d
 800c5e8:	0800c651 	.word	0x0800c651
 800c5ec:	0800c5cd 	.word	0x0800c5cd
 800c5f0:	0800c5cd 	.word	0x0800c5cd
 800c5f4:	0800c5cd 	.word	0x0800c5cd
 800c5f8:	0800c5cd 	.word	0x0800c5cd
 800c5fc:	0800c651 	.word	0x0800c651
 800c600:	0800c5cd 	.word	0x0800c5cd
 800c604:	0800c5cd 	.word	0x0800c5cd
 800c608:	0800c5cd 	.word	0x0800c5cd
 800c60c:	0800c5cd 	.word	0x0800c5cd
 800c610:	0800c74f 	.word	0x0800c74f
 800c614:	0800c67b 	.word	0x0800c67b
 800c618:	0800c709 	.word	0x0800c709
 800c61c:	0800c5cd 	.word	0x0800c5cd
 800c620:	0800c5cd 	.word	0x0800c5cd
 800c624:	0800c771 	.word	0x0800c771
 800c628:	0800c5cd 	.word	0x0800c5cd
 800c62c:	0800c67b 	.word	0x0800c67b
 800c630:	0800c5cd 	.word	0x0800c5cd
 800c634:	0800c5cd 	.word	0x0800c5cd
 800c638:	0800c711 	.word	0x0800c711
 800c63c:	6833      	ldr	r3, [r6, #0]
 800c63e:	1d1a      	adds	r2, r3, #4
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6032      	str	r2, [r6, #0]
 800c644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c648:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c64c:	2301      	movs	r3, #1
 800c64e:	e09c      	b.n	800c78a <_printf_i+0x1e6>
 800c650:	6833      	ldr	r3, [r6, #0]
 800c652:	6820      	ldr	r0, [r4, #0]
 800c654:	1d19      	adds	r1, r3, #4
 800c656:	6031      	str	r1, [r6, #0]
 800c658:	0606      	lsls	r6, r0, #24
 800c65a:	d501      	bpl.n	800c660 <_printf_i+0xbc>
 800c65c:	681d      	ldr	r5, [r3, #0]
 800c65e:	e003      	b.n	800c668 <_printf_i+0xc4>
 800c660:	0645      	lsls	r5, r0, #25
 800c662:	d5fb      	bpl.n	800c65c <_printf_i+0xb8>
 800c664:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c668:	2d00      	cmp	r5, #0
 800c66a:	da03      	bge.n	800c674 <_printf_i+0xd0>
 800c66c:	232d      	movs	r3, #45	@ 0x2d
 800c66e:	426d      	negs	r5, r5
 800c670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c674:	4858      	ldr	r0, [pc, #352]	@ (800c7d8 <_printf_i+0x234>)
 800c676:	230a      	movs	r3, #10
 800c678:	e011      	b.n	800c69e <_printf_i+0xfa>
 800c67a:	6821      	ldr	r1, [r4, #0]
 800c67c:	6833      	ldr	r3, [r6, #0]
 800c67e:	0608      	lsls	r0, r1, #24
 800c680:	f853 5b04 	ldr.w	r5, [r3], #4
 800c684:	d402      	bmi.n	800c68c <_printf_i+0xe8>
 800c686:	0649      	lsls	r1, r1, #25
 800c688:	bf48      	it	mi
 800c68a:	b2ad      	uxthmi	r5, r5
 800c68c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c68e:	4852      	ldr	r0, [pc, #328]	@ (800c7d8 <_printf_i+0x234>)
 800c690:	6033      	str	r3, [r6, #0]
 800c692:	bf14      	ite	ne
 800c694:	230a      	movne	r3, #10
 800c696:	2308      	moveq	r3, #8
 800c698:	2100      	movs	r1, #0
 800c69a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c69e:	6866      	ldr	r6, [r4, #4]
 800c6a0:	60a6      	str	r6, [r4, #8]
 800c6a2:	2e00      	cmp	r6, #0
 800c6a4:	db05      	blt.n	800c6b2 <_printf_i+0x10e>
 800c6a6:	6821      	ldr	r1, [r4, #0]
 800c6a8:	432e      	orrs	r6, r5
 800c6aa:	f021 0104 	bic.w	r1, r1, #4
 800c6ae:	6021      	str	r1, [r4, #0]
 800c6b0:	d04b      	beq.n	800c74a <_printf_i+0x1a6>
 800c6b2:	4616      	mov	r6, r2
 800c6b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6b8:	fb03 5711 	mls	r7, r3, r1, r5
 800c6bc:	5dc7      	ldrb	r7, [r0, r7]
 800c6be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6c2:	462f      	mov	r7, r5
 800c6c4:	42bb      	cmp	r3, r7
 800c6c6:	460d      	mov	r5, r1
 800c6c8:	d9f4      	bls.n	800c6b4 <_printf_i+0x110>
 800c6ca:	2b08      	cmp	r3, #8
 800c6cc:	d10b      	bne.n	800c6e6 <_printf_i+0x142>
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	07df      	lsls	r7, r3, #31
 800c6d2:	d508      	bpl.n	800c6e6 <_printf_i+0x142>
 800c6d4:	6923      	ldr	r3, [r4, #16]
 800c6d6:	6861      	ldr	r1, [r4, #4]
 800c6d8:	4299      	cmp	r1, r3
 800c6da:	bfde      	ittt	le
 800c6dc:	2330      	movle	r3, #48	@ 0x30
 800c6de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6e6:	1b92      	subs	r2, r2, r6
 800c6e8:	6122      	str	r2, [r4, #16]
 800c6ea:	f8cd a000 	str.w	sl, [sp]
 800c6ee:	464b      	mov	r3, r9
 800c6f0:	aa03      	add	r2, sp, #12
 800c6f2:	4621      	mov	r1, r4
 800c6f4:	4640      	mov	r0, r8
 800c6f6:	f7ff fee7 	bl	800c4c8 <_printf_common>
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	d14a      	bne.n	800c794 <_printf_i+0x1f0>
 800c6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c702:	b004      	add	sp, #16
 800c704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c708:	6823      	ldr	r3, [r4, #0]
 800c70a:	f043 0320 	orr.w	r3, r3, #32
 800c70e:	6023      	str	r3, [r4, #0]
 800c710:	4832      	ldr	r0, [pc, #200]	@ (800c7dc <_printf_i+0x238>)
 800c712:	2778      	movs	r7, #120	@ 0x78
 800c714:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c718:	6823      	ldr	r3, [r4, #0]
 800c71a:	6831      	ldr	r1, [r6, #0]
 800c71c:	061f      	lsls	r7, r3, #24
 800c71e:	f851 5b04 	ldr.w	r5, [r1], #4
 800c722:	d402      	bmi.n	800c72a <_printf_i+0x186>
 800c724:	065f      	lsls	r7, r3, #25
 800c726:	bf48      	it	mi
 800c728:	b2ad      	uxthmi	r5, r5
 800c72a:	6031      	str	r1, [r6, #0]
 800c72c:	07d9      	lsls	r1, r3, #31
 800c72e:	bf44      	itt	mi
 800c730:	f043 0320 	orrmi.w	r3, r3, #32
 800c734:	6023      	strmi	r3, [r4, #0]
 800c736:	b11d      	cbz	r5, 800c740 <_printf_i+0x19c>
 800c738:	2310      	movs	r3, #16
 800c73a:	e7ad      	b.n	800c698 <_printf_i+0xf4>
 800c73c:	4826      	ldr	r0, [pc, #152]	@ (800c7d8 <_printf_i+0x234>)
 800c73e:	e7e9      	b.n	800c714 <_printf_i+0x170>
 800c740:	6823      	ldr	r3, [r4, #0]
 800c742:	f023 0320 	bic.w	r3, r3, #32
 800c746:	6023      	str	r3, [r4, #0]
 800c748:	e7f6      	b.n	800c738 <_printf_i+0x194>
 800c74a:	4616      	mov	r6, r2
 800c74c:	e7bd      	b.n	800c6ca <_printf_i+0x126>
 800c74e:	6833      	ldr	r3, [r6, #0]
 800c750:	6825      	ldr	r5, [r4, #0]
 800c752:	6961      	ldr	r1, [r4, #20]
 800c754:	1d18      	adds	r0, r3, #4
 800c756:	6030      	str	r0, [r6, #0]
 800c758:	062e      	lsls	r6, r5, #24
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	d501      	bpl.n	800c762 <_printf_i+0x1be>
 800c75e:	6019      	str	r1, [r3, #0]
 800c760:	e002      	b.n	800c768 <_printf_i+0x1c4>
 800c762:	0668      	lsls	r0, r5, #25
 800c764:	d5fb      	bpl.n	800c75e <_printf_i+0x1ba>
 800c766:	8019      	strh	r1, [r3, #0]
 800c768:	2300      	movs	r3, #0
 800c76a:	6123      	str	r3, [r4, #16]
 800c76c:	4616      	mov	r6, r2
 800c76e:	e7bc      	b.n	800c6ea <_printf_i+0x146>
 800c770:	6833      	ldr	r3, [r6, #0]
 800c772:	1d1a      	adds	r2, r3, #4
 800c774:	6032      	str	r2, [r6, #0]
 800c776:	681e      	ldr	r6, [r3, #0]
 800c778:	6862      	ldr	r2, [r4, #4]
 800c77a:	2100      	movs	r1, #0
 800c77c:	4630      	mov	r0, r6
 800c77e:	f7f3 fd27 	bl	80001d0 <memchr>
 800c782:	b108      	cbz	r0, 800c788 <_printf_i+0x1e4>
 800c784:	1b80      	subs	r0, r0, r6
 800c786:	6060      	str	r0, [r4, #4]
 800c788:	6863      	ldr	r3, [r4, #4]
 800c78a:	6123      	str	r3, [r4, #16]
 800c78c:	2300      	movs	r3, #0
 800c78e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c792:	e7aa      	b.n	800c6ea <_printf_i+0x146>
 800c794:	6923      	ldr	r3, [r4, #16]
 800c796:	4632      	mov	r2, r6
 800c798:	4649      	mov	r1, r9
 800c79a:	4640      	mov	r0, r8
 800c79c:	47d0      	blx	sl
 800c79e:	3001      	adds	r0, #1
 800c7a0:	d0ad      	beq.n	800c6fe <_printf_i+0x15a>
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	079b      	lsls	r3, r3, #30
 800c7a6:	d413      	bmi.n	800c7d0 <_printf_i+0x22c>
 800c7a8:	68e0      	ldr	r0, [r4, #12]
 800c7aa:	9b03      	ldr	r3, [sp, #12]
 800c7ac:	4298      	cmp	r0, r3
 800c7ae:	bfb8      	it	lt
 800c7b0:	4618      	movlt	r0, r3
 800c7b2:	e7a6      	b.n	800c702 <_printf_i+0x15e>
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	4632      	mov	r2, r6
 800c7b8:	4649      	mov	r1, r9
 800c7ba:	4640      	mov	r0, r8
 800c7bc:	47d0      	blx	sl
 800c7be:	3001      	adds	r0, #1
 800c7c0:	d09d      	beq.n	800c6fe <_printf_i+0x15a>
 800c7c2:	3501      	adds	r5, #1
 800c7c4:	68e3      	ldr	r3, [r4, #12]
 800c7c6:	9903      	ldr	r1, [sp, #12]
 800c7c8:	1a5b      	subs	r3, r3, r1
 800c7ca:	42ab      	cmp	r3, r5
 800c7cc:	dcf2      	bgt.n	800c7b4 <_printf_i+0x210>
 800c7ce:	e7eb      	b.n	800c7a8 <_printf_i+0x204>
 800c7d0:	2500      	movs	r5, #0
 800c7d2:	f104 0619 	add.w	r6, r4, #25
 800c7d6:	e7f5      	b.n	800c7c4 <_printf_i+0x220>
 800c7d8:	0801175e 	.word	0x0801175e
 800c7dc:	0801176f 	.word	0x0801176f

0800c7e0 <_scanf_float>:
 800c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e4:	b087      	sub	sp, #28
 800c7e6:	4691      	mov	r9, r2
 800c7e8:	9303      	str	r3, [sp, #12]
 800c7ea:	688b      	ldr	r3, [r1, #8]
 800c7ec:	1e5a      	subs	r2, r3, #1
 800c7ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c7f2:	bf81      	itttt	hi
 800c7f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c7f8:	eb03 0b05 	addhi.w	fp, r3, r5
 800c7fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c800:	608b      	strhi	r3, [r1, #8]
 800c802:	680b      	ldr	r3, [r1, #0]
 800c804:	460a      	mov	r2, r1
 800c806:	f04f 0500 	mov.w	r5, #0
 800c80a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c80e:	f842 3b1c 	str.w	r3, [r2], #28
 800c812:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c816:	4680      	mov	r8, r0
 800c818:	460c      	mov	r4, r1
 800c81a:	bf98      	it	ls
 800c81c:	f04f 0b00 	movls.w	fp, #0
 800c820:	9201      	str	r2, [sp, #4]
 800c822:	4616      	mov	r6, r2
 800c824:	46aa      	mov	sl, r5
 800c826:	462f      	mov	r7, r5
 800c828:	9502      	str	r5, [sp, #8]
 800c82a:	68a2      	ldr	r2, [r4, #8]
 800c82c:	b15a      	cbz	r2, 800c846 <_scanf_float+0x66>
 800c82e:	f8d9 3000 	ldr.w	r3, [r9]
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	2b4e      	cmp	r3, #78	@ 0x4e
 800c836:	d863      	bhi.n	800c900 <_scanf_float+0x120>
 800c838:	2b40      	cmp	r3, #64	@ 0x40
 800c83a:	d83b      	bhi.n	800c8b4 <_scanf_float+0xd4>
 800c83c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c840:	b2c8      	uxtb	r0, r1
 800c842:	280e      	cmp	r0, #14
 800c844:	d939      	bls.n	800c8ba <_scanf_float+0xda>
 800c846:	b11f      	cbz	r7, 800c850 <_scanf_float+0x70>
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c84e:	6023      	str	r3, [r4, #0]
 800c850:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c854:	f1ba 0f01 	cmp.w	sl, #1
 800c858:	f200 8114 	bhi.w	800ca84 <_scanf_float+0x2a4>
 800c85c:	9b01      	ldr	r3, [sp, #4]
 800c85e:	429e      	cmp	r6, r3
 800c860:	f200 8105 	bhi.w	800ca6e <_scanf_float+0x28e>
 800c864:	2001      	movs	r0, #1
 800c866:	b007      	add	sp, #28
 800c868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c86c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c870:	2a0d      	cmp	r2, #13
 800c872:	d8e8      	bhi.n	800c846 <_scanf_float+0x66>
 800c874:	a101      	add	r1, pc, #4	@ (adr r1, 800c87c <_scanf_float+0x9c>)
 800c876:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c87a:	bf00      	nop
 800c87c:	0800c9c5 	.word	0x0800c9c5
 800c880:	0800c847 	.word	0x0800c847
 800c884:	0800c847 	.word	0x0800c847
 800c888:	0800c847 	.word	0x0800c847
 800c88c:	0800ca21 	.word	0x0800ca21
 800c890:	0800c9fb 	.word	0x0800c9fb
 800c894:	0800c847 	.word	0x0800c847
 800c898:	0800c847 	.word	0x0800c847
 800c89c:	0800c9d3 	.word	0x0800c9d3
 800c8a0:	0800c847 	.word	0x0800c847
 800c8a4:	0800c847 	.word	0x0800c847
 800c8a8:	0800c847 	.word	0x0800c847
 800c8ac:	0800c847 	.word	0x0800c847
 800c8b0:	0800c98f 	.word	0x0800c98f
 800c8b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c8b8:	e7da      	b.n	800c870 <_scanf_float+0x90>
 800c8ba:	290e      	cmp	r1, #14
 800c8bc:	d8c3      	bhi.n	800c846 <_scanf_float+0x66>
 800c8be:	a001      	add	r0, pc, #4	@ (adr r0, 800c8c4 <_scanf_float+0xe4>)
 800c8c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c8c4:	0800c97f 	.word	0x0800c97f
 800c8c8:	0800c847 	.word	0x0800c847
 800c8cc:	0800c97f 	.word	0x0800c97f
 800c8d0:	0800ca0f 	.word	0x0800ca0f
 800c8d4:	0800c847 	.word	0x0800c847
 800c8d8:	0800c921 	.word	0x0800c921
 800c8dc:	0800c965 	.word	0x0800c965
 800c8e0:	0800c965 	.word	0x0800c965
 800c8e4:	0800c965 	.word	0x0800c965
 800c8e8:	0800c965 	.word	0x0800c965
 800c8ec:	0800c965 	.word	0x0800c965
 800c8f0:	0800c965 	.word	0x0800c965
 800c8f4:	0800c965 	.word	0x0800c965
 800c8f8:	0800c965 	.word	0x0800c965
 800c8fc:	0800c965 	.word	0x0800c965
 800c900:	2b6e      	cmp	r3, #110	@ 0x6e
 800c902:	d809      	bhi.n	800c918 <_scanf_float+0x138>
 800c904:	2b60      	cmp	r3, #96	@ 0x60
 800c906:	d8b1      	bhi.n	800c86c <_scanf_float+0x8c>
 800c908:	2b54      	cmp	r3, #84	@ 0x54
 800c90a:	d07b      	beq.n	800ca04 <_scanf_float+0x224>
 800c90c:	2b59      	cmp	r3, #89	@ 0x59
 800c90e:	d19a      	bne.n	800c846 <_scanf_float+0x66>
 800c910:	2d07      	cmp	r5, #7
 800c912:	d198      	bne.n	800c846 <_scanf_float+0x66>
 800c914:	2508      	movs	r5, #8
 800c916:	e02f      	b.n	800c978 <_scanf_float+0x198>
 800c918:	2b74      	cmp	r3, #116	@ 0x74
 800c91a:	d073      	beq.n	800ca04 <_scanf_float+0x224>
 800c91c:	2b79      	cmp	r3, #121	@ 0x79
 800c91e:	e7f6      	b.n	800c90e <_scanf_float+0x12e>
 800c920:	6821      	ldr	r1, [r4, #0]
 800c922:	05c8      	lsls	r0, r1, #23
 800c924:	d51e      	bpl.n	800c964 <_scanf_float+0x184>
 800c926:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c92a:	6021      	str	r1, [r4, #0]
 800c92c:	3701      	adds	r7, #1
 800c92e:	f1bb 0f00 	cmp.w	fp, #0
 800c932:	d003      	beq.n	800c93c <_scanf_float+0x15c>
 800c934:	3201      	adds	r2, #1
 800c936:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c93a:	60a2      	str	r2, [r4, #8]
 800c93c:	68a3      	ldr	r3, [r4, #8]
 800c93e:	3b01      	subs	r3, #1
 800c940:	60a3      	str	r3, [r4, #8]
 800c942:	6923      	ldr	r3, [r4, #16]
 800c944:	3301      	adds	r3, #1
 800c946:	6123      	str	r3, [r4, #16]
 800c948:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f8c9 3004 	str.w	r3, [r9, #4]
 800c954:	f340 8082 	ble.w	800ca5c <_scanf_float+0x27c>
 800c958:	f8d9 3000 	ldr.w	r3, [r9]
 800c95c:	3301      	adds	r3, #1
 800c95e:	f8c9 3000 	str.w	r3, [r9]
 800c962:	e762      	b.n	800c82a <_scanf_float+0x4a>
 800c964:	eb1a 0105 	adds.w	r1, sl, r5
 800c968:	f47f af6d 	bne.w	800c846 <_scanf_float+0x66>
 800c96c:	6822      	ldr	r2, [r4, #0]
 800c96e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c972:	6022      	str	r2, [r4, #0]
 800c974:	460d      	mov	r5, r1
 800c976:	468a      	mov	sl, r1
 800c978:	f806 3b01 	strb.w	r3, [r6], #1
 800c97c:	e7de      	b.n	800c93c <_scanf_float+0x15c>
 800c97e:	6822      	ldr	r2, [r4, #0]
 800c980:	0610      	lsls	r0, r2, #24
 800c982:	f57f af60 	bpl.w	800c846 <_scanf_float+0x66>
 800c986:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c98a:	6022      	str	r2, [r4, #0]
 800c98c:	e7f4      	b.n	800c978 <_scanf_float+0x198>
 800c98e:	f1ba 0f00 	cmp.w	sl, #0
 800c992:	d10c      	bne.n	800c9ae <_scanf_float+0x1ce>
 800c994:	b977      	cbnz	r7, 800c9b4 <_scanf_float+0x1d4>
 800c996:	6822      	ldr	r2, [r4, #0]
 800c998:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c99c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c9a0:	d108      	bne.n	800c9b4 <_scanf_float+0x1d4>
 800c9a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c9a6:	6022      	str	r2, [r4, #0]
 800c9a8:	f04f 0a01 	mov.w	sl, #1
 800c9ac:	e7e4      	b.n	800c978 <_scanf_float+0x198>
 800c9ae:	f1ba 0f02 	cmp.w	sl, #2
 800c9b2:	d050      	beq.n	800ca56 <_scanf_float+0x276>
 800c9b4:	2d01      	cmp	r5, #1
 800c9b6:	d002      	beq.n	800c9be <_scanf_float+0x1de>
 800c9b8:	2d04      	cmp	r5, #4
 800c9ba:	f47f af44 	bne.w	800c846 <_scanf_float+0x66>
 800c9be:	3501      	adds	r5, #1
 800c9c0:	b2ed      	uxtb	r5, r5
 800c9c2:	e7d9      	b.n	800c978 <_scanf_float+0x198>
 800c9c4:	f1ba 0f01 	cmp.w	sl, #1
 800c9c8:	f47f af3d 	bne.w	800c846 <_scanf_float+0x66>
 800c9cc:	f04f 0a02 	mov.w	sl, #2
 800c9d0:	e7d2      	b.n	800c978 <_scanf_float+0x198>
 800c9d2:	b975      	cbnz	r5, 800c9f2 <_scanf_float+0x212>
 800c9d4:	2f00      	cmp	r7, #0
 800c9d6:	f47f af37 	bne.w	800c848 <_scanf_float+0x68>
 800c9da:	6822      	ldr	r2, [r4, #0]
 800c9dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c9e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c9e4:	f040 8103 	bne.w	800cbee <_scanf_float+0x40e>
 800c9e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c9ec:	6022      	str	r2, [r4, #0]
 800c9ee:	2501      	movs	r5, #1
 800c9f0:	e7c2      	b.n	800c978 <_scanf_float+0x198>
 800c9f2:	2d03      	cmp	r5, #3
 800c9f4:	d0e3      	beq.n	800c9be <_scanf_float+0x1de>
 800c9f6:	2d05      	cmp	r5, #5
 800c9f8:	e7df      	b.n	800c9ba <_scanf_float+0x1da>
 800c9fa:	2d02      	cmp	r5, #2
 800c9fc:	f47f af23 	bne.w	800c846 <_scanf_float+0x66>
 800ca00:	2503      	movs	r5, #3
 800ca02:	e7b9      	b.n	800c978 <_scanf_float+0x198>
 800ca04:	2d06      	cmp	r5, #6
 800ca06:	f47f af1e 	bne.w	800c846 <_scanf_float+0x66>
 800ca0a:	2507      	movs	r5, #7
 800ca0c:	e7b4      	b.n	800c978 <_scanf_float+0x198>
 800ca0e:	6822      	ldr	r2, [r4, #0]
 800ca10:	0591      	lsls	r1, r2, #22
 800ca12:	f57f af18 	bpl.w	800c846 <_scanf_float+0x66>
 800ca16:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ca1a:	6022      	str	r2, [r4, #0]
 800ca1c:	9702      	str	r7, [sp, #8]
 800ca1e:	e7ab      	b.n	800c978 <_scanf_float+0x198>
 800ca20:	6822      	ldr	r2, [r4, #0]
 800ca22:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ca26:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ca2a:	d005      	beq.n	800ca38 <_scanf_float+0x258>
 800ca2c:	0550      	lsls	r0, r2, #21
 800ca2e:	f57f af0a 	bpl.w	800c846 <_scanf_float+0x66>
 800ca32:	2f00      	cmp	r7, #0
 800ca34:	f000 80db 	beq.w	800cbee <_scanf_float+0x40e>
 800ca38:	0591      	lsls	r1, r2, #22
 800ca3a:	bf58      	it	pl
 800ca3c:	9902      	ldrpl	r1, [sp, #8]
 800ca3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca42:	bf58      	it	pl
 800ca44:	1a79      	subpl	r1, r7, r1
 800ca46:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ca4a:	bf58      	it	pl
 800ca4c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ca50:	6022      	str	r2, [r4, #0]
 800ca52:	2700      	movs	r7, #0
 800ca54:	e790      	b.n	800c978 <_scanf_float+0x198>
 800ca56:	f04f 0a03 	mov.w	sl, #3
 800ca5a:	e78d      	b.n	800c978 <_scanf_float+0x198>
 800ca5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ca60:	4649      	mov	r1, r9
 800ca62:	4640      	mov	r0, r8
 800ca64:	4798      	blx	r3
 800ca66:	2800      	cmp	r0, #0
 800ca68:	f43f aedf 	beq.w	800c82a <_scanf_float+0x4a>
 800ca6c:	e6eb      	b.n	800c846 <_scanf_float+0x66>
 800ca6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca76:	464a      	mov	r2, r9
 800ca78:	4640      	mov	r0, r8
 800ca7a:	4798      	blx	r3
 800ca7c:	6923      	ldr	r3, [r4, #16]
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	6123      	str	r3, [r4, #16]
 800ca82:	e6eb      	b.n	800c85c <_scanf_float+0x7c>
 800ca84:	1e6b      	subs	r3, r5, #1
 800ca86:	2b06      	cmp	r3, #6
 800ca88:	d824      	bhi.n	800cad4 <_scanf_float+0x2f4>
 800ca8a:	2d02      	cmp	r5, #2
 800ca8c:	d836      	bhi.n	800cafc <_scanf_float+0x31c>
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	429e      	cmp	r6, r3
 800ca92:	f67f aee7 	bls.w	800c864 <_scanf_float+0x84>
 800ca96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca9e:	464a      	mov	r2, r9
 800caa0:	4640      	mov	r0, r8
 800caa2:	4798      	blx	r3
 800caa4:	6923      	ldr	r3, [r4, #16]
 800caa6:	3b01      	subs	r3, #1
 800caa8:	6123      	str	r3, [r4, #16]
 800caaa:	e7f0      	b.n	800ca8e <_scanf_float+0x2ae>
 800caac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cab0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cab4:	464a      	mov	r2, r9
 800cab6:	4640      	mov	r0, r8
 800cab8:	4798      	blx	r3
 800caba:	6923      	ldr	r3, [r4, #16]
 800cabc:	3b01      	subs	r3, #1
 800cabe:	6123      	str	r3, [r4, #16]
 800cac0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cac4:	fa5f fa8a 	uxtb.w	sl, sl
 800cac8:	f1ba 0f02 	cmp.w	sl, #2
 800cacc:	d1ee      	bne.n	800caac <_scanf_float+0x2cc>
 800cace:	3d03      	subs	r5, #3
 800cad0:	b2ed      	uxtb	r5, r5
 800cad2:	1b76      	subs	r6, r6, r5
 800cad4:	6823      	ldr	r3, [r4, #0]
 800cad6:	05da      	lsls	r2, r3, #23
 800cad8:	d530      	bpl.n	800cb3c <_scanf_float+0x35c>
 800cada:	055b      	lsls	r3, r3, #21
 800cadc:	d511      	bpl.n	800cb02 <_scanf_float+0x322>
 800cade:	9b01      	ldr	r3, [sp, #4]
 800cae0:	429e      	cmp	r6, r3
 800cae2:	f67f aebf 	bls.w	800c864 <_scanf_float+0x84>
 800cae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800caea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800caee:	464a      	mov	r2, r9
 800caf0:	4640      	mov	r0, r8
 800caf2:	4798      	blx	r3
 800caf4:	6923      	ldr	r3, [r4, #16]
 800caf6:	3b01      	subs	r3, #1
 800caf8:	6123      	str	r3, [r4, #16]
 800cafa:	e7f0      	b.n	800cade <_scanf_float+0x2fe>
 800cafc:	46aa      	mov	sl, r5
 800cafe:	46b3      	mov	fp, r6
 800cb00:	e7de      	b.n	800cac0 <_scanf_float+0x2e0>
 800cb02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cb06:	6923      	ldr	r3, [r4, #16]
 800cb08:	2965      	cmp	r1, #101	@ 0x65
 800cb0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb0e:	f106 35ff 	add.w	r5, r6, #4294967295
 800cb12:	6123      	str	r3, [r4, #16]
 800cb14:	d00c      	beq.n	800cb30 <_scanf_float+0x350>
 800cb16:	2945      	cmp	r1, #69	@ 0x45
 800cb18:	d00a      	beq.n	800cb30 <_scanf_float+0x350>
 800cb1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb1e:	464a      	mov	r2, r9
 800cb20:	4640      	mov	r0, r8
 800cb22:	4798      	blx	r3
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	1eb5      	subs	r5, r6, #2
 800cb2e:	6123      	str	r3, [r4, #16]
 800cb30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb34:	464a      	mov	r2, r9
 800cb36:	4640      	mov	r0, r8
 800cb38:	4798      	blx	r3
 800cb3a:	462e      	mov	r6, r5
 800cb3c:	6822      	ldr	r2, [r4, #0]
 800cb3e:	f012 0210 	ands.w	r2, r2, #16
 800cb42:	d001      	beq.n	800cb48 <_scanf_float+0x368>
 800cb44:	2000      	movs	r0, #0
 800cb46:	e68e      	b.n	800c866 <_scanf_float+0x86>
 800cb48:	7032      	strb	r2, [r6, #0]
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cb50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb54:	d125      	bne.n	800cba2 <_scanf_float+0x3c2>
 800cb56:	9b02      	ldr	r3, [sp, #8]
 800cb58:	429f      	cmp	r7, r3
 800cb5a:	d00a      	beq.n	800cb72 <_scanf_float+0x392>
 800cb5c:	1bda      	subs	r2, r3, r7
 800cb5e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cb62:	429e      	cmp	r6, r3
 800cb64:	bf28      	it	cs
 800cb66:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cb6a:	4922      	ldr	r1, [pc, #136]	@ (800cbf4 <_scanf_float+0x414>)
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f000 f93d 	bl	800cdec <siprintf>
 800cb72:	9901      	ldr	r1, [sp, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	4640      	mov	r0, r8
 800cb78:	f002 fc9a 	bl	800f4b0 <_strtod_r>
 800cb7c:	9b03      	ldr	r3, [sp, #12]
 800cb7e:	6821      	ldr	r1, [r4, #0]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f011 0f02 	tst.w	r1, #2
 800cb86:	ec57 6b10 	vmov	r6, r7, d0
 800cb8a:	f103 0204 	add.w	r2, r3, #4
 800cb8e:	d015      	beq.n	800cbbc <_scanf_float+0x3dc>
 800cb90:	9903      	ldr	r1, [sp, #12]
 800cb92:	600a      	str	r2, [r1, #0]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	e9c3 6700 	strd	r6, r7, [r3]
 800cb9a:	68e3      	ldr	r3, [r4, #12]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	60e3      	str	r3, [r4, #12]
 800cba0:	e7d0      	b.n	800cb44 <_scanf_float+0x364>
 800cba2:	9b04      	ldr	r3, [sp, #16]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d0e4      	beq.n	800cb72 <_scanf_float+0x392>
 800cba8:	9905      	ldr	r1, [sp, #20]
 800cbaa:	230a      	movs	r3, #10
 800cbac:	3101      	adds	r1, #1
 800cbae:	4640      	mov	r0, r8
 800cbb0:	f002 fcfe 	bl	800f5b0 <_strtol_r>
 800cbb4:	9b04      	ldr	r3, [sp, #16]
 800cbb6:	9e05      	ldr	r6, [sp, #20]
 800cbb8:	1ac2      	subs	r2, r0, r3
 800cbba:	e7d0      	b.n	800cb5e <_scanf_float+0x37e>
 800cbbc:	f011 0f04 	tst.w	r1, #4
 800cbc0:	9903      	ldr	r1, [sp, #12]
 800cbc2:	600a      	str	r2, [r1, #0]
 800cbc4:	d1e6      	bne.n	800cb94 <_scanf_float+0x3b4>
 800cbc6:	681d      	ldr	r5, [r3, #0]
 800cbc8:	4632      	mov	r2, r6
 800cbca:	463b      	mov	r3, r7
 800cbcc:	4630      	mov	r0, r6
 800cbce:	4639      	mov	r1, r7
 800cbd0:	f7f3 ffac 	bl	8000b2c <__aeabi_dcmpun>
 800cbd4:	b128      	cbz	r0, 800cbe2 <_scanf_float+0x402>
 800cbd6:	4808      	ldr	r0, [pc, #32]	@ (800cbf8 <_scanf_float+0x418>)
 800cbd8:	f000 fa5e 	bl	800d098 <nanf>
 800cbdc:	ed85 0a00 	vstr	s0, [r5]
 800cbe0:	e7db      	b.n	800cb9a <_scanf_float+0x3ba>
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	f7f3 ffff 	bl	8000be8 <__aeabi_d2f>
 800cbea:	6028      	str	r0, [r5, #0]
 800cbec:	e7d5      	b.n	800cb9a <_scanf_float+0x3ba>
 800cbee:	2700      	movs	r7, #0
 800cbf0:	e62e      	b.n	800c850 <_scanf_float+0x70>
 800cbf2:	bf00      	nop
 800cbf4:	08011780 	.word	0x08011780
 800cbf8:	080118c1 	.word	0x080118c1

0800cbfc <std>:
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	b510      	push	{r4, lr}
 800cc00:	4604      	mov	r4, r0
 800cc02:	e9c0 3300 	strd	r3, r3, [r0]
 800cc06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc0a:	6083      	str	r3, [r0, #8]
 800cc0c:	8181      	strh	r1, [r0, #12]
 800cc0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc10:	81c2      	strh	r2, [r0, #14]
 800cc12:	6183      	str	r3, [r0, #24]
 800cc14:	4619      	mov	r1, r3
 800cc16:	2208      	movs	r2, #8
 800cc18:	305c      	adds	r0, #92	@ 0x5c
 800cc1a:	f000 f989 	bl	800cf30 <memset>
 800cc1e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc54 <std+0x58>)
 800cc20:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc22:	4b0d      	ldr	r3, [pc, #52]	@ (800cc58 <std+0x5c>)
 800cc24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc26:	4b0d      	ldr	r3, [pc, #52]	@ (800cc5c <std+0x60>)
 800cc28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc60 <std+0x64>)
 800cc2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc64 <std+0x68>)
 800cc30:	6224      	str	r4, [r4, #32]
 800cc32:	429c      	cmp	r4, r3
 800cc34:	d006      	beq.n	800cc44 <std+0x48>
 800cc36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc3a:	4294      	cmp	r4, r2
 800cc3c:	d002      	beq.n	800cc44 <std+0x48>
 800cc3e:	33d0      	adds	r3, #208	@ 0xd0
 800cc40:	429c      	cmp	r4, r3
 800cc42:	d105      	bne.n	800cc50 <std+0x54>
 800cc44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc4c:	f000 ba12 	b.w	800d074 <__retarget_lock_init_recursive>
 800cc50:	bd10      	pop	{r4, pc}
 800cc52:	bf00      	nop
 800cc54:	0800ce31 	.word	0x0800ce31
 800cc58:	0800ce53 	.word	0x0800ce53
 800cc5c:	0800ce8b 	.word	0x0800ce8b
 800cc60:	0800ceaf 	.word	0x0800ceaf
 800cc64:	200006e8 	.word	0x200006e8

0800cc68 <stdio_exit_handler>:
 800cc68:	4a02      	ldr	r2, [pc, #8]	@ (800cc74 <stdio_exit_handler+0xc>)
 800cc6a:	4903      	ldr	r1, [pc, #12]	@ (800cc78 <stdio_exit_handler+0x10>)
 800cc6c:	4803      	ldr	r0, [pc, #12]	@ (800cc7c <stdio_exit_handler+0x14>)
 800cc6e:	f000 b869 	b.w	800cd44 <_fwalk_sglue>
 800cc72:	bf00      	nop
 800cc74:	20000054 	.word	0x20000054
 800cc78:	0800f96d 	.word	0x0800f96d
 800cc7c:	20000064 	.word	0x20000064

0800cc80 <cleanup_stdio>:
 800cc80:	6841      	ldr	r1, [r0, #4]
 800cc82:	4b0c      	ldr	r3, [pc, #48]	@ (800ccb4 <cleanup_stdio+0x34>)
 800cc84:	4299      	cmp	r1, r3
 800cc86:	b510      	push	{r4, lr}
 800cc88:	4604      	mov	r4, r0
 800cc8a:	d001      	beq.n	800cc90 <cleanup_stdio+0x10>
 800cc8c:	f002 fe6e 	bl	800f96c <_fflush_r>
 800cc90:	68a1      	ldr	r1, [r4, #8]
 800cc92:	4b09      	ldr	r3, [pc, #36]	@ (800ccb8 <cleanup_stdio+0x38>)
 800cc94:	4299      	cmp	r1, r3
 800cc96:	d002      	beq.n	800cc9e <cleanup_stdio+0x1e>
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f002 fe67 	bl	800f96c <_fflush_r>
 800cc9e:	68e1      	ldr	r1, [r4, #12]
 800cca0:	4b06      	ldr	r3, [pc, #24]	@ (800ccbc <cleanup_stdio+0x3c>)
 800cca2:	4299      	cmp	r1, r3
 800cca4:	d004      	beq.n	800ccb0 <cleanup_stdio+0x30>
 800cca6:	4620      	mov	r0, r4
 800cca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccac:	f002 be5e 	b.w	800f96c <_fflush_r>
 800ccb0:	bd10      	pop	{r4, pc}
 800ccb2:	bf00      	nop
 800ccb4:	200006e8 	.word	0x200006e8
 800ccb8:	20000750 	.word	0x20000750
 800ccbc:	200007b8 	.word	0x200007b8

0800ccc0 <global_stdio_init.part.0>:
 800ccc0:	b510      	push	{r4, lr}
 800ccc2:	4b0b      	ldr	r3, [pc, #44]	@ (800ccf0 <global_stdio_init.part.0+0x30>)
 800ccc4:	4c0b      	ldr	r4, [pc, #44]	@ (800ccf4 <global_stdio_init.part.0+0x34>)
 800ccc6:	4a0c      	ldr	r2, [pc, #48]	@ (800ccf8 <global_stdio_init.part.0+0x38>)
 800ccc8:	601a      	str	r2, [r3, #0]
 800ccca:	4620      	mov	r0, r4
 800cccc:	2200      	movs	r2, #0
 800ccce:	2104      	movs	r1, #4
 800ccd0:	f7ff ff94 	bl	800cbfc <std>
 800ccd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ccd8:	2201      	movs	r2, #1
 800ccda:	2109      	movs	r1, #9
 800ccdc:	f7ff ff8e 	bl	800cbfc <std>
 800cce0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cce4:	2202      	movs	r2, #2
 800cce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccea:	2112      	movs	r1, #18
 800ccec:	f7ff bf86 	b.w	800cbfc <std>
 800ccf0:	20000820 	.word	0x20000820
 800ccf4:	200006e8 	.word	0x200006e8
 800ccf8:	0800cc69 	.word	0x0800cc69

0800ccfc <__sfp_lock_acquire>:
 800ccfc:	4801      	ldr	r0, [pc, #4]	@ (800cd04 <__sfp_lock_acquire+0x8>)
 800ccfe:	f000 b9ba 	b.w	800d076 <__retarget_lock_acquire_recursive>
 800cd02:	bf00      	nop
 800cd04:	20000829 	.word	0x20000829

0800cd08 <__sfp_lock_release>:
 800cd08:	4801      	ldr	r0, [pc, #4]	@ (800cd10 <__sfp_lock_release+0x8>)
 800cd0a:	f000 b9b5 	b.w	800d078 <__retarget_lock_release_recursive>
 800cd0e:	bf00      	nop
 800cd10:	20000829 	.word	0x20000829

0800cd14 <__sinit>:
 800cd14:	b510      	push	{r4, lr}
 800cd16:	4604      	mov	r4, r0
 800cd18:	f7ff fff0 	bl	800ccfc <__sfp_lock_acquire>
 800cd1c:	6a23      	ldr	r3, [r4, #32]
 800cd1e:	b11b      	cbz	r3, 800cd28 <__sinit+0x14>
 800cd20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd24:	f7ff bff0 	b.w	800cd08 <__sfp_lock_release>
 800cd28:	4b04      	ldr	r3, [pc, #16]	@ (800cd3c <__sinit+0x28>)
 800cd2a:	6223      	str	r3, [r4, #32]
 800cd2c:	4b04      	ldr	r3, [pc, #16]	@ (800cd40 <__sinit+0x2c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d1f5      	bne.n	800cd20 <__sinit+0xc>
 800cd34:	f7ff ffc4 	bl	800ccc0 <global_stdio_init.part.0>
 800cd38:	e7f2      	b.n	800cd20 <__sinit+0xc>
 800cd3a:	bf00      	nop
 800cd3c:	0800cc81 	.word	0x0800cc81
 800cd40:	20000820 	.word	0x20000820

0800cd44 <_fwalk_sglue>:
 800cd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd48:	4607      	mov	r7, r0
 800cd4a:	4688      	mov	r8, r1
 800cd4c:	4614      	mov	r4, r2
 800cd4e:	2600      	movs	r6, #0
 800cd50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd54:	f1b9 0901 	subs.w	r9, r9, #1
 800cd58:	d505      	bpl.n	800cd66 <_fwalk_sglue+0x22>
 800cd5a:	6824      	ldr	r4, [r4, #0]
 800cd5c:	2c00      	cmp	r4, #0
 800cd5e:	d1f7      	bne.n	800cd50 <_fwalk_sglue+0xc>
 800cd60:	4630      	mov	r0, r6
 800cd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd66:	89ab      	ldrh	r3, [r5, #12]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d907      	bls.n	800cd7c <_fwalk_sglue+0x38>
 800cd6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd70:	3301      	adds	r3, #1
 800cd72:	d003      	beq.n	800cd7c <_fwalk_sglue+0x38>
 800cd74:	4629      	mov	r1, r5
 800cd76:	4638      	mov	r0, r7
 800cd78:	47c0      	blx	r8
 800cd7a:	4306      	orrs	r6, r0
 800cd7c:	3568      	adds	r5, #104	@ 0x68
 800cd7e:	e7e9      	b.n	800cd54 <_fwalk_sglue+0x10>

0800cd80 <sniprintf>:
 800cd80:	b40c      	push	{r2, r3}
 800cd82:	b530      	push	{r4, r5, lr}
 800cd84:	4b18      	ldr	r3, [pc, #96]	@ (800cde8 <sniprintf+0x68>)
 800cd86:	1e0c      	subs	r4, r1, #0
 800cd88:	681d      	ldr	r5, [r3, #0]
 800cd8a:	b09d      	sub	sp, #116	@ 0x74
 800cd8c:	da08      	bge.n	800cda0 <sniprintf+0x20>
 800cd8e:	238b      	movs	r3, #139	@ 0x8b
 800cd90:	602b      	str	r3, [r5, #0]
 800cd92:	f04f 30ff 	mov.w	r0, #4294967295
 800cd96:	b01d      	add	sp, #116	@ 0x74
 800cd98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd9c:	b002      	add	sp, #8
 800cd9e:	4770      	bx	lr
 800cda0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cda4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cda8:	f04f 0300 	mov.w	r3, #0
 800cdac:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cdae:	bf14      	ite	ne
 800cdb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cdb4:	4623      	moveq	r3, r4
 800cdb6:	9304      	str	r3, [sp, #16]
 800cdb8:	9307      	str	r3, [sp, #28]
 800cdba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cdbe:	9002      	str	r0, [sp, #8]
 800cdc0:	9006      	str	r0, [sp, #24]
 800cdc2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cdc6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdc8:	ab21      	add	r3, sp, #132	@ 0x84
 800cdca:	a902      	add	r1, sp, #8
 800cdcc:	4628      	mov	r0, r5
 800cdce:	9301      	str	r3, [sp, #4]
 800cdd0:	f002 fc4c 	bl	800f66c <_svfiprintf_r>
 800cdd4:	1c43      	adds	r3, r0, #1
 800cdd6:	bfbc      	itt	lt
 800cdd8:	238b      	movlt	r3, #139	@ 0x8b
 800cdda:	602b      	strlt	r3, [r5, #0]
 800cddc:	2c00      	cmp	r4, #0
 800cdde:	d0da      	beq.n	800cd96 <sniprintf+0x16>
 800cde0:	9b02      	ldr	r3, [sp, #8]
 800cde2:	2200      	movs	r2, #0
 800cde4:	701a      	strb	r2, [r3, #0]
 800cde6:	e7d6      	b.n	800cd96 <sniprintf+0x16>
 800cde8:	20000060 	.word	0x20000060

0800cdec <siprintf>:
 800cdec:	b40e      	push	{r1, r2, r3}
 800cdee:	b510      	push	{r4, lr}
 800cdf0:	b09d      	sub	sp, #116	@ 0x74
 800cdf2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cdf4:	9002      	str	r0, [sp, #8]
 800cdf6:	9006      	str	r0, [sp, #24]
 800cdf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cdfc:	480a      	ldr	r0, [pc, #40]	@ (800ce28 <siprintf+0x3c>)
 800cdfe:	9107      	str	r1, [sp, #28]
 800ce00:	9104      	str	r1, [sp, #16]
 800ce02:	490a      	ldr	r1, [pc, #40]	@ (800ce2c <siprintf+0x40>)
 800ce04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce08:	9105      	str	r1, [sp, #20]
 800ce0a:	2400      	movs	r4, #0
 800ce0c:	a902      	add	r1, sp, #8
 800ce0e:	6800      	ldr	r0, [r0, #0]
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ce14:	f002 fc2a 	bl	800f66c <_svfiprintf_r>
 800ce18:	9b02      	ldr	r3, [sp, #8]
 800ce1a:	701c      	strb	r4, [r3, #0]
 800ce1c:	b01d      	add	sp, #116	@ 0x74
 800ce1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce22:	b003      	add	sp, #12
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	20000060 	.word	0x20000060
 800ce2c:	ffff0208 	.word	0xffff0208

0800ce30 <__sread>:
 800ce30:	b510      	push	{r4, lr}
 800ce32:	460c      	mov	r4, r1
 800ce34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce38:	f000 f8ce 	bl	800cfd8 <_read_r>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	bfab      	itete	ge
 800ce40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce42:	89a3      	ldrhlt	r3, [r4, #12]
 800ce44:	181b      	addge	r3, r3, r0
 800ce46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce4a:	bfac      	ite	ge
 800ce4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce4e:	81a3      	strhlt	r3, [r4, #12]
 800ce50:	bd10      	pop	{r4, pc}

0800ce52 <__swrite>:
 800ce52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce56:	461f      	mov	r7, r3
 800ce58:	898b      	ldrh	r3, [r1, #12]
 800ce5a:	05db      	lsls	r3, r3, #23
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	460c      	mov	r4, r1
 800ce60:	4616      	mov	r6, r2
 800ce62:	d505      	bpl.n	800ce70 <__swrite+0x1e>
 800ce64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce68:	2302      	movs	r3, #2
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f000 f8a2 	bl	800cfb4 <_lseek_r>
 800ce70:	89a3      	ldrh	r3, [r4, #12]
 800ce72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce7a:	81a3      	strh	r3, [r4, #12]
 800ce7c:	4632      	mov	r2, r6
 800ce7e:	463b      	mov	r3, r7
 800ce80:	4628      	mov	r0, r5
 800ce82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce86:	f000 b8b9 	b.w	800cffc <_write_r>

0800ce8a <__sseek>:
 800ce8a:	b510      	push	{r4, lr}
 800ce8c:	460c      	mov	r4, r1
 800ce8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce92:	f000 f88f 	bl	800cfb4 <_lseek_r>
 800ce96:	1c43      	adds	r3, r0, #1
 800ce98:	89a3      	ldrh	r3, [r4, #12]
 800ce9a:	bf15      	itete	ne
 800ce9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cea2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cea6:	81a3      	strheq	r3, [r4, #12]
 800cea8:	bf18      	it	ne
 800ceaa:	81a3      	strhne	r3, [r4, #12]
 800ceac:	bd10      	pop	{r4, pc}

0800ceae <__sclose>:
 800ceae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb2:	f000 b86f 	b.w	800cf94 <_close_r>

0800ceb6 <_vsniprintf_r>:
 800ceb6:	b530      	push	{r4, r5, lr}
 800ceb8:	4614      	mov	r4, r2
 800ceba:	2c00      	cmp	r4, #0
 800cebc:	b09b      	sub	sp, #108	@ 0x6c
 800cebe:	4605      	mov	r5, r0
 800cec0:	461a      	mov	r2, r3
 800cec2:	da05      	bge.n	800ced0 <_vsniprintf_r+0x1a>
 800cec4:	238b      	movs	r3, #139	@ 0x8b
 800cec6:	6003      	str	r3, [r0, #0]
 800cec8:	f04f 30ff 	mov.w	r0, #4294967295
 800cecc:	b01b      	add	sp, #108	@ 0x6c
 800cece:	bd30      	pop	{r4, r5, pc}
 800ced0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ced4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ced8:	f04f 0300 	mov.w	r3, #0
 800cedc:	9319      	str	r3, [sp, #100]	@ 0x64
 800cede:	bf14      	ite	ne
 800cee0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cee4:	4623      	moveq	r3, r4
 800cee6:	9302      	str	r3, [sp, #8]
 800cee8:	9305      	str	r3, [sp, #20]
 800ceea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ceee:	9100      	str	r1, [sp, #0]
 800cef0:	9104      	str	r1, [sp, #16]
 800cef2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cef6:	4669      	mov	r1, sp
 800cef8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cefa:	f002 fbb7 	bl	800f66c <_svfiprintf_r>
 800cefe:	1c43      	adds	r3, r0, #1
 800cf00:	bfbc      	itt	lt
 800cf02:	238b      	movlt	r3, #139	@ 0x8b
 800cf04:	602b      	strlt	r3, [r5, #0]
 800cf06:	2c00      	cmp	r4, #0
 800cf08:	d0e0      	beq.n	800cecc <_vsniprintf_r+0x16>
 800cf0a:	9b00      	ldr	r3, [sp, #0]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	701a      	strb	r2, [r3, #0]
 800cf10:	e7dc      	b.n	800cecc <_vsniprintf_r+0x16>
	...

0800cf14 <vsniprintf>:
 800cf14:	b507      	push	{r0, r1, r2, lr}
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	4613      	mov	r3, r2
 800cf1a:	460a      	mov	r2, r1
 800cf1c:	4601      	mov	r1, r0
 800cf1e:	4803      	ldr	r0, [pc, #12]	@ (800cf2c <vsniprintf+0x18>)
 800cf20:	6800      	ldr	r0, [r0, #0]
 800cf22:	f7ff ffc8 	bl	800ceb6 <_vsniprintf_r>
 800cf26:	b003      	add	sp, #12
 800cf28:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf2c:	20000060 	.word	0x20000060

0800cf30 <memset>:
 800cf30:	4402      	add	r2, r0
 800cf32:	4603      	mov	r3, r0
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d100      	bne.n	800cf3a <memset+0xa>
 800cf38:	4770      	bx	lr
 800cf3a:	f803 1b01 	strb.w	r1, [r3], #1
 800cf3e:	e7f9      	b.n	800cf34 <memset+0x4>

0800cf40 <strncat>:
 800cf40:	b530      	push	{r4, r5, lr}
 800cf42:	4604      	mov	r4, r0
 800cf44:	7825      	ldrb	r5, [r4, #0]
 800cf46:	4623      	mov	r3, r4
 800cf48:	3401      	adds	r4, #1
 800cf4a:	2d00      	cmp	r5, #0
 800cf4c:	d1fa      	bne.n	800cf44 <strncat+0x4>
 800cf4e:	3a01      	subs	r2, #1
 800cf50:	d304      	bcc.n	800cf5c <strncat+0x1c>
 800cf52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf56:	f803 4b01 	strb.w	r4, [r3], #1
 800cf5a:	b904      	cbnz	r4, 800cf5e <strncat+0x1e>
 800cf5c:	bd30      	pop	{r4, r5, pc}
 800cf5e:	2a00      	cmp	r2, #0
 800cf60:	d1f5      	bne.n	800cf4e <strncat+0xe>
 800cf62:	701a      	strb	r2, [r3, #0]
 800cf64:	e7f3      	b.n	800cf4e <strncat+0xe>

0800cf66 <strncpy>:
 800cf66:	b510      	push	{r4, lr}
 800cf68:	3901      	subs	r1, #1
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	b132      	cbz	r2, 800cf7c <strncpy+0x16>
 800cf6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cf72:	f803 4b01 	strb.w	r4, [r3], #1
 800cf76:	3a01      	subs	r2, #1
 800cf78:	2c00      	cmp	r4, #0
 800cf7a:	d1f7      	bne.n	800cf6c <strncpy+0x6>
 800cf7c:	441a      	add	r2, r3
 800cf7e:	2100      	movs	r1, #0
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d100      	bne.n	800cf86 <strncpy+0x20>
 800cf84:	bd10      	pop	{r4, pc}
 800cf86:	f803 1b01 	strb.w	r1, [r3], #1
 800cf8a:	e7f9      	b.n	800cf80 <strncpy+0x1a>

0800cf8c <_localeconv_r>:
 800cf8c:	4800      	ldr	r0, [pc, #0]	@ (800cf90 <_localeconv_r+0x4>)
 800cf8e:	4770      	bx	lr
 800cf90:	200001a0 	.word	0x200001a0

0800cf94 <_close_r>:
 800cf94:	b538      	push	{r3, r4, r5, lr}
 800cf96:	4d06      	ldr	r5, [pc, #24]	@ (800cfb0 <_close_r+0x1c>)
 800cf98:	2300      	movs	r3, #0
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	602b      	str	r3, [r5, #0]
 800cfa0:	f7f7 fb39 	bl	8004616 <_close>
 800cfa4:	1c43      	adds	r3, r0, #1
 800cfa6:	d102      	bne.n	800cfae <_close_r+0x1a>
 800cfa8:	682b      	ldr	r3, [r5, #0]
 800cfaa:	b103      	cbz	r3, 800cfae <_close_r+0x1a>
 800cfac:	6023      	str	r3, [r4, #0]
 800cfae:	bd38      	pop	{r3, r4, r5, pc}
 800cfb0:	20000824 	.word	0x20000824

0800cfb4 <_lseek_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4d07      	ldr	r5, [pc, #28]	@ (800cfd4 <_lseek_r+0x20>)
 800cfb8:	4604      	mov	r4, r0
 800cfba:	4608      	mov	r0, r1
 800cfbc:	4611      	mov	r1, r2
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	602a      	str	r2, [r5, #0]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	f7f7 fb4e 	bl	8004664 <_lseek>
 800cfc8:	1c43      	adds	r3, r0, #1
 800cfca:	d102      	bne.n	800cfd2 <_lseek_r+0x1e>
 800cfcc:	682b      	ldr	r3, [r5, #0]
 800cfce:	b103      	cbz	r3, 800cfd2 <_lseek_r+0x1e>
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	bd38      	pop	{r3, r4, r5, pc}
 800cfd4:	20000824 	.word	0x20000824

0800cfd8 <_read_r>:
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4d07      	ldr	r5, [pc, #28]	@ (800cff8 <_read_r+0x20>)
 800cfdc:	4604      	mov	r4, r0
 800cfde:	4608      	mov	r0, r1
 800cfe0:	4611      	mov	r1, r2
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	602a      	str	r2, [r5, #0]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	f7f7 fadc 	bl	80045a4 <_read>
 800cfec:	1c43      	adds	r3, r0, #1
 800cfee:	d102      	bne.n	800cff6 <_read_r+0x1e>
 800cff0:	682b      	ldr	r3, [r5, #0]
 800cff2:	b103      	cbz	r3, 800cff6 <_read_r+0x1e>
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	bd38      	pop	{r3, r4, r5, pc}
 800cff8:	20000824 	.word	0x20000824

0800cffc <_write_r>:
 800cffc:	b538      	push	{r3, r4, r5, lr}
 800cffe:	4d07      	ldr	r5, [pc, #28]	@ (800d01c <_write_r+0x20>)
 800d000:	4604      	mov	r4, r0
 800d002:	4608      	mov	r0, r1
 800d004:	4611      	mov	r1, r2
 800d006:	2200      	movs	r2, #0
 800d008:	602a      	str	r2, [r5, #0]
 800d00a:	461a      	mov	r2, r3
 800d00c:	f7f7 fae7 	bl	80045de <_write>
 800d010:	1c43      	adds	r3, r0, #1
 800d012:	d102      	bne.n	800d01a <_write_r+0x1e>
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	b103      	cbz	r3, 800d01a <_write_r+0x1e>
 800d018:	6023      	str	r3, [r4, #0]
 800d01a:	bd38      	pop	{r3, r4, r5, pc}
 800d01c:	20000824 	.word	0x20000824

0800d020 <__errno>:
 800d020:	4b01      	ldr	r3, [pc, #4]	@ (800d028 <__errno+0x8>)
 800d022:	6818      	ldr	r0, [r3, #0]
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	20000060 	.word	0x20000060

0800d02c <__libc_init_array>:
 800d02c:	b570      	push	{r4, r5, r6, lr}
 800d02e:	4d0d      	ldr	r5, [pc, #52]	@ (800d064 <__libc_init_array+0x38>)
 800d030:	4c0d      	ldr	r4, [pc, #52]	@ (800d068 <__libc_init_array+0x3c>)
 800d032:	1b64      	subs	r4, r4, r5
 800d034:	10a4      	asrs	r4, r4, #2
 800d036:	2600      	movs	r6, #0
 800d038:	42a6      	cmp	r6, r4
 800d03a:	d109      	bne.n	800d050 <__libc_init_array+0x24>
 800d03c:	4d0b      	ldr	r5, [pc, #44]	@ (800d06c <__libc_init_array+0x40>)
 800d03e:	4c0c      	ldr	r4, [pc, #48]	@ (800d070 <__libc_init_array+0x44>)
 800d040:	f003 fb78 	bl	8010734 <_init>
 800d044:	1b64      	subs	r4, r4, r5
 800d046:	10a4      	asrs	r4, r4, #2
 800d048:	2600      	movs	r6, #0
 800d04a:	42a6      	cmp	r6, r4
 800d04c:	d105      	bne.n	800d05a <__libc_init_array+0x2e>
 800d04e:	bd70      	pop	{r4, r5, r6, pc}
 800d050:	f855 3b04 	ldr.w	r3, [r5], #4
 800d054:	4798      	blx	r3
 800d056:	3601      	adds	r6, #1
 800d058:	e7ee      	b.n	800d038 <__libc_init_array+0xc>
 800d05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d05e:	4798      	blx	r3
 800d060:	3601      	adds	r6, #1
 800d062:	e7f2      	b.n	800d04a <__libc_init_array+0x1e>
 800d064:	08011b7c 	.word	0x08011b7c
 800d068:	08011b7c 	.word	0x08011b7c
 800d06c:	08011b7c 	.word	0x08011b7c
 800d070:	08011b80 	.word	0x08011b80

0800d074 <__retarget_lock_init_recursive>:
 800d074:	4770      	bx	lr

0800d076 <__retarget_lock_acquire_recursive>:
 800d076:	4770      	bx	lr

0800d078 <__retarget_lock_release_recursive>:
 800d078:	4770      	bx	lr

0800d07a <memcpy>:
 800d07a:	440a      	add	r2, r1
 800d07c:	4291      	cmp	r1, r2
 800d07e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d082:	d100      	bne.n	800d086 <memcpy+0xc>
 800d084:	4770      	bx	lr
 800d086:	b510      	push	{r4, lr}
 800d088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d08c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d090:	4291      	cmp	r1, r2
 800d092:	d1f9      	bne.n	800d088 <memcpy+0xe>
 800d094:	bd10      	pop	{r4, pc}
	...

0800d098 <nanf>:
 800d098:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d0a0 <nanf+0x8>
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	7fc00000 	.word	0x7fc00000

0800d0a4 <quorem>:
 800d0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a8:	6903      	ldr	r3, [r0, #16]
 800d0aa:	690c      	ldr	r4, [r1, #16]
 800d0ac:	42a3      	cmp	r3, r4
 800d0ae:	4607      	mov	r7, r0
 800d0b0:	db7e      	blt.n	800d1b0 <quorem+0x10c>
 800d0b2:	3c01      	subs	r4, #1
 800d0b4:	f101 0814 	add.w	r8, r1, #20
 800d0b8:	00a3      	lsls	r3, r4, #2
 800d0ba:	f100 0514 	add.w	r5, r0, #20
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0c4:	9301      	str	r3, [sp, #4]
 800d0c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d0ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d0d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800d0da:	d32e      	bcc.n	800d13a <quorem+0x96>
 800d0dc:	f04f 0a00 	mov.w	sl, #0
 800d0e0:	46c4      	mov	ip, r8
 800d0e2:	46ae      	mov	lr, r5
 800d0e4:	46d3      	mov	fp, sl
 800d0e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d0ea:	b298      	uxth	r0, r3
 800d0ec:	fb06 a000 	mla	r0, r6, r0, sl
 800d0f0:	0c02      	lsrs	r2, r0, #16
 800d0f2:	0c1b      	lsrs	r3, r3, #16
 800d0f4:	fb06 2303 	mla	r3, r6, r3, r2
 800d0f8:	f8de 2000 	ldr.w	r2, [lr]
 800d0fc:	b280      	uxth	r0, r0
 800d0fe:	b292      	uxth	r2, r2
 800d100:	1a12      	subs	r2, r2, r0
 800d102:	445a      	add	r2, fp
 800d104:	f8de 0000 	ldr.w	r0, [lr]
 800d108:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d112:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d116:	b292      	uxth	r2, r2
 800d118:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d11c:	45e1      	cmp	r9, ip
 800d11e:	f84e 2b04 	str.w	r2, [lr], #4
 800d122:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d126:	d2de      	bcs.n	800d0e6 <quorem+0x42>
 800d128:	9b00      	ldr	r3, [sp, #0]
 800d12a:	58eb      	ldr	r3, [r5, r3]
 800d12c:	b92b      	cbnz	r3, 800d13a <quorem+0x96>
 800d12e:	9b01      	ldr	r3, [sp, #4]
 800d130:	3b04      	subs	r3, #4
 800d132:	429d      	cmp	r5, r3
 800d134:	461a      	mov	r2, r3
 800d136:	d32f      	bcc.n	800d198 <quorem+0xf4>
 800d138:	613c      	str	r4, [r7, #16]
 800d13a:	4638      	mov	r0, r7
 800d13c:	f001 f9c8 	bl	800e4d0 <__mcmp>
 800d140:	2800      	cmp	r0, #0
 800d142:	db25      	blt.n	800d190 <quorem+0xec>
 800d144:	4629      	mov	r1, r5
 800d146:	2000      	movs	r0, #0
 800d148:	f858 2b04 	ldr.w	r2, [r8], #4
 800d14c:	f8d1 c000 	ldr.w	ip, [r1]
 800d150:	fa1f fe82 	uxth.w	lr, r2
 800d154:	fa1f f38c 	uxth.w	r3, ip
 800d158:	eba3 030e 	sub.w	r3, r3, lr
 800d15c:	4403      	add	r3, r0
 800d15e:	0c12      	lsrs	r2, r2, #16
 800d160:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d164:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d168:	b29b      	uxth	r3, r3
 800d16a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d16e:	45c1      	cmp	r9, r8
 800d170:	f841 3b04 	str.w	r3, [r1], #4
 800d174:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d178:	d2e6      	bcs.n	800d148 <quorem+0xa4>
 800d17a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d17e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d182:	b922      	cbnz	r2, 800d18e <quorem+0xea>
 800d184:	3b04      	subs	r3, #4
 800d186:	429d      	cmp	r5, r3
 800d188:	461a      	mov	r2, r3
 800d18a:	d30b      	bcc.n	800d1a4 <quorem+0x100>
 800d18c:	613c      	str	r4, [r7, #16]
 800d18e:	3601      	adds	r6, #1
 800d190:	4630      	mov	r0, r6
 800d192:	b003      	add	sp, #12
 800d194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d198:	6812      	ldr	r2, [r2, #0]
 800d19a:	3b04      	subs	r3, #4
 800d19c:	2a00      	cmp	r2, #0
 800d19e:	d1cb      	bne.n	800d138 <quorem+0x94>
 800d1a0:	3c01      	subs	r4, #1
 800d1a2:	e7c6      	b.n	800d132 <quorem+0x8e>
 800d1a4:	6812      	ldr	r2, [r2, #0]
 800d1a6:	3b04      	subs	r3, #4
 800d1a8:	2a00      	cmp	r2, #0
 800d1aa:	d1ef      	bne.n	800d18c <quorem+0xe8>
 800d1ac:	3c01      	subs	r4, #1
 800d1ae:	e7ea      	b.n	800d186 <quorem+0xe2>
 800d1b0:	2000      	movs	r0, #0
 800d1b2:	e7ee      	b.n	800d192 <quorem+0xee>
 800d1b4:	0000      	movs	r0, r0
	...

0800d1b8 <_dtoa_r>:
 800d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1bc:	69c7      	ldr	r7, [r0, #28]
 800d1be:	b097      	sub	sp, #92	@ 0x5c
 800d1c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d1c4:	ec55 4b10 	vmov	r4, r5, d0
 800d1c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d1ca:	9107      	str	r1, [sp, #28]
 800d1cc:	4681      	mov	r9, r0
 800d1ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800d1d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d1d2:	b97f      	cbnz	r7, 800d1f4 <_dtoa_r+0x3c>
 800d1d4:	2010      	movs	r0, #16
 800d1d6:	f000 fe09 	bl	800ddec <malloc>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	f8c9 001c 	str.w	r0, [r9, #28]
 800d1e0:	b920      	cbnz	r0, 800d1ec <_dtoa_r+0x34>
 800d1e2:	4ba9      	ldr	r3, [pc, #676]	@ (800d488 <_dtoa_r+0x2d0>)
 800d1e4:	21ef      	movs	r1, #239	@ 0xef
 800d1e6:	48a9      	ldr	r0, [pc, #676]	@ (800d48c <_dtoa_r+0x2d4>)
 800d1e8:	f002 fc2e 	bl	800fa48 <__assert_func>
 800d1ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d1f0:	6007      	str	r7, [r0, #0]
 800d1f2:	60c7      	str	r7, [r0, #12]
 800d1f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d1f8:	6819      	ldr	r1, [r3, #0]
 800d1fa:	b159      	cbz	r1, 800d214 <_dtoa_r+0x5c>
 800d1fc:	685a      	ldr	r2, [r3, #4]
 800d1fe:	604a      	str	r2, [r1, #4]
 800d200:	2301      	movs	r3, #1
 800d202:	4093      	lsls	r3, r2
 800d204:	608b      	str	r3, [r1, #8]
 800d206:	4648      	mov	r0, r9
 800d208:	f000 fee6 	bl	800dfd8 <_Bfree>
 800d20c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d210:	2200      	movs	r2, #0
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	1e2b      	subs	r3, r5, #0
 800d216:	bfb9      	ittee	lt
 800d218:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d21c:	9305      	strlt	r3, [sp, #20]
 800d21e:	2300      	movge	r3, #0
 800d220:	6033      	strge	r3, [r6, #0]
 800d222:	9f05      	ldr	r7, [sp, #20]
 800d224:	4b9a      	ldr	r3, [pc, #616]	@ (800d490 <_dtoa_r+0x2d8>)
 800d226:	bfbc      	itt	lt
 800d228:	2201      	movlt	r2, #1
 800d22a:	6032      	strlt	r2, [r6, #0]
 800d22c:	43bb      	bics	r3, r7
 800d22e:	d112      	bne.n	800d256 <_dtoa_r+0x9e>
 800d230:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d232:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d236:	6013      	str	r3, [r2, #0]
 800d238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d23c:	4323      	orrs	r3, r4
 800d23e:	f000 855a 	beq.w	800dcf6 <_dtoa_r+0xb3e>
 800d242:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d244:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d4a4 <_dtoa_r+0x2ec>
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 855c 	beq.w	800dd06 <_dtoa_r+0xb4e>
 800d24e:	f10a 0303 	add.w	r3, sl, #3
 800d252:	f000 bd56 	b.w	800dd02 <_dtoa_r+0xb4a>
 800d256:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d25a:	2200      	movs	r2, #0
 800d25c:	ec51 0b17 	vmov	r0, r1, d7
 800d260:	2300      	movs	r3, #0
 800d262:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d266:	f7f3 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d26a:	4680      	mov	r8, r0
 800d26c:	b158      	cbz	r0, 800d286 <_dtoa_r+0xce>
 800d26e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d270:	2301      	movs	r3, #1
 800d272:	6013      	str	r3, [r2, #0]
 800d274:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d276:	b113      	cbz	r3, 800d27e <_dtoa_r+0xc6>
 800d278:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d27a:	4b86      	ldr	r3, [pc, #536]	@ (800d494 <_dtoa_r+0x2dc>)
 800d27c:	6013      	str	r3, [r2, #0]
 800d27e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d4a8 <_dtoa_r+0x2f0>
 800d282:	f000 bd40 	b.w	800dd06 <_dtoa_r+0xb4e>
 800d286:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d28a:	aa14      	add	r2, sp, #80	@ 0x50
 800d28c:	a915      	add	r1, sp, #84	@ 0x54
 800d28e:	4648      	mov	r0, r9
 800d290:	f001 fa3e 	bl	800e710 <__d2b>
 800d294:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d298:	9002      	str	r0, [sp, #8]
 800d29a:	2e00      	cmp	r6, #0
 800d29c:	d078      	beq.n	800d390 <_dtoa_r+0x1d8>
 800d29e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d2a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d2ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d2b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d2b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	4b76      	ldr	r3, [pc, #472]	@ (800d498 <_dtoa_r+0x2e0>)
 800d2be:	f7f2 ffe3 	bl	8000288 <__aeabi_dsub>
 800d2c2:	a36b      	add	r3, pc, #428	@ (adr r3, 800d470 <_dtoa_r+0x2b8>)
 800d2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c8:	f7f3 f996 	bl	80005f8 <__aeabi_dmul>
 800d2cc:	a36a      	add	r3, pc, #424	@ (adr r3, 800d478 <_dtoa_r+0x2c0>)
 800d2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d2:	f7f2 ffdb 	bl	800028c <__adddf3>
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	4630      	mov	r0, r6
 800d2da:	460d      	mov	r5, r1
 800d2dc:	f7f3 f922 	bl	8000524 <__aeabi_i2d>
 800d2e0:	a367      	add	r3, pc, #412	@ (adr r3, 800d480 <_dtoa_r+0x2c8>)
 800d2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e6:	f7f3 f987 	bl	80005f8 <__aeabi_dmul>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	f7f2 ffcb 	bl	800028c <__adddf3>
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	460d      	mov	r5, r1
 800d2fa:	f7f3 fc2d 	bl	8000b58 <__aeabi_d2iz>
 800d2fe:	2200      	movs	r2, #0
 800d300:	4607      	mov	r7, r0
 800d302:	2300      	movs	r3, #0
 800d304:	4620      	mov	r0, r4
 800d306:	4629      	mov	r1, r5
 800d308:	f7f3 fbe8 	bl	8000adc <__aeabi_dcmplt>
 800d30c:	b140      	cbz	r0, 800d320 <_dtoa_r+0x168>
 800d30e:	4638      	mov	r0, r7
 800d310:	f7f3 f908 	bl	8000524 <__aeabi_i2d>
 800d314:	4622      	mov	r2, r4
 800d316:	462b      	mov	r3, r5
 800d318:	f7f3 fbd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d31c:	b900      	cbnz	r0, 800d320 <_dtoa_r+0x168>
 800d31e:	3f01      	subs	r7, #1
 800d320:	2f16      	cmp	r7, #22
 800d322:	d852      	bhi.n	800d3ca <_dtoa_r+0x212>
 800d324:	4b5d      	ldr	r3, [pc, #372]	@ (800d49c <_dtoa_r+0x2e4>)
 800d326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d332:	f7f3 fbd3 	bl	8000adc <__aeabi_dcmplt>
 800d336:	2800      	cmp	r0, #0
 800d338:	d049      	beq.n	800d3ce <_dtoa_r+0x216>
 800d33a:	3f01      	subs	r7, #1
 800d33c:	2300      	movs	r3, #0
 800d33e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d340:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d342:	1b9b      	subs	r3, r3, r6
 800d344:	1e5a      	subs	r2, r3, #1
 800d346:	bf45      	ittet	mi
 800d348:	f1c3 0301 	rsbmi	r3, r3, #1
 800d34c:	9300      	strmi	r3, [sp, #0]
 800d34e:	2300      	movpl	r3, #0
 800d350:	2300      	movmi	r3, #0
 800d352:	9206      	str	r2, [sp, #24]
 800d354:	bf54      	ite	pl
 800d356:	9300      	strpl	r3, [sp, #0]
 800d358:	9306      	strmi	r3, [sp, #24]
 800d35a:	2f00      	cmp	r7, #0
 800d35c:	db39      	blt.n	800d3d2 <_dtoa_r+0x21a>
 800d35e:	9b06      	ldr	r3, [sp, #24]
 800d360:	970d      	str	r7, [sp, #52]	@ 0x34
 800d362:	443b      	add	r3, r7
 800d364:	9306      	str	r3, [sp, #24]
 800d366:	2300      	movs	r3, #0
 800d368:	9308      	str	r3, [sp, #32]
 800d36a:	9b07      	ldr	r3, [sp, #28]
 800d36c:	2b09      	cmp	r3, #9
 800d36e:	d863      	bhi.n	800d438 <_dtoa_r+0x280>
 800d370:	2b05      	cmp	r3, #5
 800d372:	bfc4      	itt	gt
 800d374:	3b04      	subgt	r3, #4
 800d376:	9307      	strgt	r3, [sp, #28]
 800d378:	9b07      	ldr	r3, [sp, #28]
 800d37a:	f1a3 0302 	sub.w	r3, r3, #2
 800d37e:	bfcc      	ite	gt
 800d380:	2400      	movgt	r4, #0
 800d382:	2401      	movle	r4, #1
 800d384:	2b03      	cmp	r3, #3
 800d386:	d863      	bhi.n	800d450 <_dtoa_r+0x298>
 800d388:	e8df f003 	tbb	[pc, r3]
 800d38c:	2b375452 	.word	0x2b375452
 800d390:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d394:	441e      	add	r6, r3
 800d396:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d39a:	2b20      	cmp	r3, #32
 800d39c:	bfc1      	itttt	gt
 800d39e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d3a2:	409f      	lslgt	r7, r3
 800d3a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d3a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d3ac:	bfd6      	itet	le
 800d3ae:	f1c3 0320 	rsble	r3, r3, #32
 800d3b2:	ea47 0003 	orrgt.w	r0, r7, r3
 800d3b6:	fa04 f003 	lslle.w	r0, r4, r3
 800d3ba:	f7f3 f8a3 	bl	8000504 <__aeabi_ui2d>
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d3c4:	3e01      	subs	r6, #1
 800d3c6:	9212      	str	r2, [sp, #72]	@ 0x48
 800d3c8:	e776      	b.n	800d2b8 <_dtoa_r+0x100>
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e7b7      	b.n	800d33e <_dtoa_r+0x186>
 800d3ce:	9010      	str	r0, [sp, #64]	@ 0x40
 800d3d0:	e7b6      	b.n	800d340 <_dtoa_r+0x188>
 800d3d2:	9b00      	ldr	r3, [sp, #0]
 800d3d4:	1bdb      	subs	r3, r3, r7
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	427b      	negs	r3, r7
 800d3da:	9308      	str	r3, [sp, #32]
 800d3dc:	2300      	movs	r3, #0
 800d3de:	930d      	str	r3, [sp, #52]	@ 0x34
 800d3e0:	e7c3      	b.n	800d36a <_dtoa_r+0x1b2>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3e8:	eb07 0b03 	add.w	fp, r7, r3
 800d3ec:	f10b 0301 	add.w	r3, fp, #1
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	9303      	str	r3, [sp, #12]
 800d3f4:	bfb8      	it	lt
 800d3f6:	2301      	movlt	r3, #1
 800d3f8:	e006      	b.n	800d408 <_dtoa_r+0x250>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d400:	2b00      	cmp	r3, #0
 800d402:	dd28      	ble.n	800d456 <_dtoa_r+0x29e>
 800d404:	469b      	mov	fp, r3
 800d406:	9303      	str	r3, [sp, #12]
 800d408:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d40c:	2100      	movs	r1, #0
 800d40e:	2204      	movs	r2, #4
 800d410:	f102 0514 	add.w	r5, r2, #20
 800d414:	429d      	cmp	r5, r3
 800d416:	d926      	bls.n	800d466 <_dtoa_r+0x2ae>
 800d418:	6041      	str	r1, [r0, #4]
 800d41a:	4648      	mov	r0, r9
 800d41c:	f000 fd9c 	bl	800df58 <_Balloc>
 800d420:	4682      	mov	sl, r0
 800d422:	2800      	cmp	r0, #0
 800d424:	d142      	bne.n	800d4ac <_dtoa_r+0x2f4>
 800d426:	4b1e      	ldr	r3, [pc, #120]	@ (800d4a0 <_dtoa_r+0x2e8>)
 800d428:	4602      	mov	r2, r0
 800d42a:	f240 11af 	movw	r1, #431	@ 0x1af
 800d42e:	e6da      	b.n	800d1e6 <_dtoa_r+0x2e>
 800d430:	2300      	movs	r3, #0
 800d432:	e7e3      	b.n	800d3fc <_dtoa_r+0x244>
 800d434:	2300      	movs	r3, #0
 800d436:	e7d5      	b.n	800d3e4 <_dtoa_r+0x22c>
 800d438:	2401      	movs	r4, #1
 800d43a:	2300      	movs	r3, #0
 800d43c:	9307      	str	r3, [sp, #28]
 800d43e:	9409      	str	r4, [sp, #36]	@ 0x24
 800d440:	f04f 3bff 	mov.w	fp, #4294967295
 800d444:	2200      	movs	r2, #0
 800d446:	f8cd b00c 	str.w	fp, [sp, #12]
 800d44a:	2312      	movs	r3, #18
 800d44c:	920c      	str	r2, [sp, #48]	@ 0x30
 800d44e:	e7db      	b.n	800d408 <_dtoa_r+0x250>
 800d450:	2301      	movs	r3, #1
 800d452:	9309      	str	r3, [sp, #36]	@ 0x24
 800d454:	e7f4      	b.n	800d440 <_dtoa_r+0x288>
 800d456:	f04f 0b01 	mov.w	fp, #1
 800d45a:	f8cd b00c 	str.w	fp, [sp, #12]
 800d45e:	465b      	mov	r3, fp
 800d460:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d464:	e7d0      	b.n	800d408 <_dtoa_r+0x250>
 800d466:	3101      	adds	r1, #1
 800d468:	0052      	lsls	r2, r2, #1
 800d46a:	e7d1      	b.n	800d410 <_dtoa_r+0x258>
 800d46c:	f3af 8000 	nop.w
 800d470:	636f4361 	.word	0x636f4361
 800d474:	3fd287a7 	.word	0x3fd287a7
 800d478:	8b60c8b3 	.word	0x8b60c8b3
 800d47c:	3fc68a28 	.word	0x3fc68a28
 800d480:	509f79fb 	.word	0x509f79fb
 800d484:	3fd34413 	.word	0x3fd34413
 800d488:	08011792 	.word	0x08011792
 800d48c:	080117a9 	.word	0x080117a9
 800d490:	7ff00000 	.word	0x7ff00000
 800d494:	0801175d 	.word	0x0801175d
 800d498:	3ff80000 	.word	0x3ff80000
 800d49c:	08011958 	.word	0x08011958
 800d4a0:	08011801 	.word	0x08011801
 800d4a4:	0801178e 	.word	0x0801178e
 800d4a8:	0801175c 	.word	0x0801175c
 800d4ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d4b0:	6018      	str	r0, [r3, #0]
 800d4b2:	9b03      	ldr	r3, [sp, #12]
 800d4b4:	2b0e      	cmp	r3, #14
 800d4b6:	f200 80a1 	bhi.w	800d5fc <_dtoa_r+0x444>
 800d4ba:	2c00      	cmp	r4, #0
 800d4bc:	f000 809e 	beq.w	800d5fc <_dtoa_r+0x444>
 800d4c0:	2f00      	cmp	r7, #0
 800d4c2:	dd33      	ble.n	800d52c <_dtoa_r+0x374>
 800d4c4:	4b9c      	ldr	r3, [pc, #624]	@ (800d738 <_dtoa_r+0x580>)
 800d4c6:	f007 020f 	and.w	r2, r7, #15
 800d4ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4ce:	ed93 7b00 	vldr	d7, [r3]
 800d4d2:	05f8      	lsls	r0, r7, #23
 800d4d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d4d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d4dc:	d516      	bpl.n	800d50c <_dtoa_r+0x354>
 800d4de:	4b97      	ldr	r3, [pc, #604]	@ (800d73c <_dtoa_r+0x584>)
 800d4e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d4e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4e8:	f7f3 f9b0 	bl	800084c <__aeabi_ddiv>
 800d4ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4f0:	f004 040f 	and.w	r4, r4, #15
 800d4f4:	2603      	movs	r6, #3
 800d4f6:	4d91      	ldr	r5, [pc, #580]	@ (800d73c <_dtoa_r+0x584>)
 800d4f8:	b954      	cbnz	r4, 800d510 <_dtoa_r+0x358>
 800d4fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d4fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d502:	f7f3 f9a3 	bl	800084c <__aeabi_ddiv>
 800d506:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d50a:	e028      	b.n	800d55e <_dtoa_r+0x3a6>
 800d50c:	2602      	movs	r6, #2
 800d50e:	e7f2      	b.n	800d4f6 <_dtoa_r+0x33e>
 800d510:	07e1      	lsls	r1, r4, #31
 800d512:	d508      	bpl.n	800d526 <_dtoa_r+0x36e>
 800d514:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d518:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d51c:	f7f3 f86c 	bl	80005f8 <__aeabi_dmul>
 800d520:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d524:	3601      	adds	r6, #1
 800d526:	1064      	asrs	r4, r4, #1
 800d528:	3508      	adds	r5, #8
 800d52a:	e7e5      	b.n	800d4f8 <_dtoa_r+0x340>
 800d52c:	f000 80af 	beq.w	800d68e <_dtoa_r+0x4d6>
 800d530:	427c      	negs	r4, r7
 800d532:	4b81      	ldr	r3, [pc, #516]	@ (800d738 <_dtoa_r+0x580>)
 800d534:	4d81      	ldr	r5, [pc, #516]	@ (800d73c <_dtoa_r+0x584>)
 800d536:	f004 020f 	and.w	r2, r4, #15
 800d53a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d546:	f7f3 f857 	bl	80005f8 <__aeabi_dmul>
 800d54a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d54e:	1124      	asrs	r4, r4, #4
 800d550:	2300      	movs	r3, #0
 800d552:	2602      	movs	r6, #2
 800d554:	2c00      	cmp	r4, #0
 800d556:	f040 808f 	bne.w	800d678 <_dtoa_r+0x4c0>
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1d3      	bne.n	800d506 <_dtoa_r+0x34e>
 800d55e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d560:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d564:	2b00      	cmp	r3, #0
 800d566:	f000 8094 	beq.w	800d692 <_dtoa_r+0x4da>
 800d56a:	4b75      	ldr	r3, [pc, #468]	@ (800d740 <_dtoa_r+0x588>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	4620      	mov	r0, r4
 800d570:	4629      	mov	r1, r5
 800d572:	f7f3 fab3 	bl	8000adc <__aeabi_dcmplt>
 800d576:	2800      	cmp	r0, #0
 800d578:	f000 808b 	beq.w	800d692 <_dtoa_r+0x4da>
 800d57c:	9b03      	ldr	r3, [sp, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f000 8087 	beq.w	800d692 <_dtoa_r+0x4da>
 800d584:	f1bb 0f00 	cmp.w	fp, #0
 800d588:	dd34      	ble.n	800d5f4 <_dtoa_r+0x43c>
 800d58a:	4620      	mov	r0, r4
 800d58c:	4b6d      	ldr	r3, [pc, #436]	@ (800d744 <_dtoa_r+0x58c>)
 800d58e:	2200      	movs	r2, #0
 800d590:	4629      	mov	r1, r5
 800d592:	f7f3 f831 	bl	80005f8 <__aeabi_dmul>
 800d596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d59a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d59e:	3601      	adds	r6, #1
 800d5a0:	465c      	mov	r4, fp
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	f7f2 ffbe 	bl	8000524 <__aeabi_i2d>
 800d5a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5ac:	f7f3 f824 	bl	80005f8 <__aeabi_dmul>
 800d5b0:	4b65      	ldr	r3, [pc, #404]	@ (800d748 <_dtoa_r+0x590>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f7f2 fe6a 	bl	800028c <__adddf3>
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d5be:	2c00      	cmp	r4, #0
 800d5c0:	d16a      	bne.n	800d698 <_dtoa_r+0x4e0>
 800d5c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5c6:	4b61      	ldr	r3, [pc, #388]	@ (800d74c <_dtoa_r+0x594>)
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f7f2 fe5d 	bl	8000288 <__aeabi_dsub>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d5d6:	462a      	mov	r2, r5
 800d5d8:	4633      	mov	r3, r6
 800d5da:	f7f3 fa9d 	bl	8000b18 <__aeabi_dcmpgt>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	f040 8298 	bne.w	800db14 <_dtoa_r+0x95c>
 800d5e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5e8:	462a      	mov	r2, r5
 800d5ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d5ee:	f7f3 fa75 	bl	8000adc <__aeabi_dcmplt>
 800d5f2:	bb38      	cbnz	r0, 800d644 <_dtoa_r+0x48c>
 800d5f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d5f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d5fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f2c0 8157 	blt.w	800d8b2 <_dtoa_r+0x6fa>
 800d604:	2f0e      	cmp	r7, #14
 800d606:	f300 8154 	bgt.w	800d8b2 <_dtoa_r+0x6fa>
 800d60a:	4b4b      	ldr	r3, [pc, #300]	@ (800d738 <_dtoa_r+0x580>)
 800d60c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d610:	ed93 7b00 	vldr	d7, [r3]
 800d614:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d616:	2b00      	cmp	r3, #0
 800d618:	ed8d 7b00 	vstr	d7, [sp]
 800d61c:	f280 80e5 	bge.w	800d7ea <_dtoa_r+0x632>
 800d620:	9b03      	ldr	r3, [sp, #12]
 800d622:	2b00      	cmp	r3, #0
 800d624:	f300 80e1 	bgt.w	800d7ea <_dtoa_r+0x632>
 800d628:	d10c      	bne.n	800d644 <_dtoa_r+0x48c>
 800d62a:	4b48      	ldr	r3, [pc, #288]	@ (800d74c <_dtoa_r+0x594>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	ec51 0b17 	vmov	r0, r1, d7
 800d632:	f7f2 ffe1 	bl	80005f8 <__aeabi_dmul>
 800d636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d63a:	f7f3 fa63 	bl	8000b04 <__aeabi_dcmpge>
 800d63e:	2800      	cmp	r0, #0
 800d640:	f000 8266 	beq.w	800db10 <_dtoa_r+0x958>
 800d644:	2400      	movs	r4, #0
 800d646:	4625      	mov	r5, r4
 800d648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d64a:	4656      	mov	r6, sl
 800d64c:	ea6f 0803 	mvn.w	r8, r3
 800d650:	2700      	movs	r7, #0
 800d652:	4621      	mov	r1, r4
 800d654:	4648      	mov	r0, r9
 800d656:	f000 fcbf 	bl	800dfd8 <_Bfree>
 800d65a:	2d00      	cmp	r5, #0
 800d65c:	f000 80bd 	beq.w	800d7da <_dtoa_r+0x622>
 800d660:	b12f      	cbz	r7, 800d66e <_dtoa_r+0x4b6>
 800d662:	42af      	cmp	r7, r5
 800d664:	d003      	beq.n	800d66e <_dtoa_r+0x4b6>
 800d666:	4639      	mov	r1, r7
 800d668:	4648      	mov	r0, r9
 800d66a:	f000 fcb5 	bl	800dfd8 <_Bfree>
 800d66e:	4629      	mov	r1, r5
 800d670:	4648      	mov	r0, r9
 800d672:	f000 fcb1 	bl	800dfd8 <_Bfree>
 800d676:	e0b0      	b.n	800d7da <_dtoa_r+0x622>
 800d678:	07e2      	lsls	r2, r4, #31
 800d67a:	d505      	bpl.n	800d688 <_dtoa_r+0x4d0>
 800d67c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d680:	f7f2 ffba 	bl	80005f8 <__aeabi_dmul>
 800d684:	3601      	adds	r6, #1
 800d686:	2301      	movs	r3, #1
 800d688:	1064      	asrs	r4, r4, #1
 800d68a:	3508      	adds	r5, #8
 800d68c:	e762      	b.n	800d554 <_dtoa_r+0x39c>
 800d68e:	2602      	movs	r6, #2
 800d690:	e765      	b.n	800d55e <_dtoa_r+0x3a6>
 800d692:	9c03      	ldr	r4, [sp, #12]
 800d694:	46b8      	mov	r8, r7
 800d696:	e784      	b.n	800d5a2 <_dtoa_r+0x3ea>
 800d698:	4b27      	ldr	r3, [pc, #156]	@ (800d738 <_dtoa_r+0x580>)
 800d69a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d69c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6a4:	4454      	add	r4, sl
 800d6a6:	2900      	cmp	r1, #0
 800d6a8:	d054      	beq.n	800d754 <_dtoa_r+0x59c>
 800d6aa:	4929      	ldr	r1, [pc, #164]	@ (800d750 <_dtoa_r+0x598>)
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	f7f3 f8cd 	bl	800084c <__aeabi_ddiv>
 800d6b2:	4633      	mov	r3, r6
 800d6b4:	462a      	mov	r2, r5
 800d6b6:	f7f2 fde7 	bl	8000288 <__aeabi_dsub>
 800d6ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d6be:	4656      	mov	r6, sl
 800d6c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6c4:	f7f3 fa48 	bl	8000b58 <__aeabi_d2iz>
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	f7f2 ff2b 	bl	8000524 <__aeabi_i2d>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6d6:	f7f2 fdd7 	bl	8000288 <__aeabi_dsub>
 800d6da:	3530      	adds	r5, #48	@ 0x30
 800d6dc:	4602      	mov	r2, r0
 800d6de:	460b      	mov	r3, r1
 800d6e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d6e4:	f806 5b01 	strb.w	r5, [r6], #1
 800d6e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d6ec:	f7f3 f9f6 	bl	8000adc <__aeabi_dcmplt>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d172      	bne.n	800d7da <_dtoa_r+0x622>
 800d6f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6f8:	4911      	ldr	r1, [pc, #68]	@ (800d740 <_dtoa_r+0x588>)
 800d6fa:	2000      	movs	r0, #0
 800d6fc:	f7f2 fdc4 	bl	8000288 <__aeabi_dsub>
 800d700:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d704:	f7f3 f9ea 	bl	8000adc <__aeabi_dcmplt>
 800d708:	2800      	cmp	r0, #0
 800d70a:	f040 80b4 	bne.w	800d876 <_dtoa_r+0x6be>
 800d70e:	42a6      	cmp	r6, r4
 800d710:	f43f af70 	beq.w	800d5f4 <_dtoa_r+0x43c>
 800d714:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d718:	4b0a      	ldr	r3, [pc, #40]	@ (800d744 <_dtoa_r+0x58c>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	f7f2 ff6c 	bl	80005f8 <__aeabi_dmul>
 800d720:	4b08      	ldr	r3, [pc, #32]	@ (800d744 <_dtoa_r+0x58c>)
 800d722:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d726:	2200      	movs	r2, #0
 800d728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d72c:	f7f2 ff64 	bl	80005f8 <__aeabi_dmul>
 800d730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d734:	e7c4      	b.n	800d6c0 <_dtoa_r+0x508>
 800d736:	bf00      	nop
 800d738:	08011958 	.word	0x08011958
 800d73c:	08011930 	.word	0x08011930
 800d740:	3ff00000 	.word	0x3ff00000
 800d744:	40240000 	.word	0x40240000
 800d748:	401c0000 	.word	0x401c0000
 800d74c:	40140000 	.word	0x40140000
 800d750:	3fe00000 	.word	0x3fe00000
 800d754:	4631      	mov	r1, r6
 800d756:	4628      	mov	r0, r5
 800d758:	f7f2 ff4e 	bl	80005f8 <__aeabi_dmul>
 800d75c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d760:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d762:	4656      	mov	r6, sl
 800d764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d768:	f7f3 f9f6 	bl	8000b58 <__aeabi_d2iz>
 800d76c:	4605      	mov	r5, r0
 800d76e:	f7f2 fed9 	bl	8000524 <__aeabi_i2d>
 800d772:	4602      	mov	r2, r0
 800d774:	460b      	mov	r3, r1
 800d776:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d77a:	f7f2 fd85 	bl	8000288 <__aeabi_dsub>
 800d77e:	3530      	adds	r5, #48	@ 0x30
 800d780:	f806 5b01 	strb.w	r5, [r6], #1
 800d784:	4602      	mov	r2, r0
 800d786:	460b      	mov	r3, r1
 800d788:	42a6      	cmp	r6, r4
 800d78a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d78e:	f04f 0200 	mov.w	r2, #0
 800d792:	d124      	bne.n	800d7de <_dtoa_r+0x626>
 800d794:	4baf      	ldr	r3, [pc, #700]	@ (800da54 <_dtoa_r+0x89c>)
 800d796:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d79a:	f7f2 fd77 	bl	800028c <__adddf3>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7a6:	f7f3 f9b7 	bl	8000b18 <__aeabi_dcmpgt>
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d163      	bne.n	800d876 <_dtoa_r+0x6be>
 800d7ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d7b2:	49a8      	ldr	r1, [pc, #672]	@ (800da54 <_dtoa_r+0x89c>)
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	f7f2 fd67 	bl	8000288 <__aeabi_dsub>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7c2:	f7f3 f98b 	bl	8000adc <__aeabi_dcmplt>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	f43f af14 	beq.w	800d5f4 <_dtoa_r+0x43c>
 800d7cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d7ce:	1e73      	subs	r3, r6, #1
 800d7d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d7d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d7d6:	2b30      	cmp	r3, #48	@ 0x30
 800d7d8:	d0f8      	beq.n	800d7cc <_dtoa_r+0x614>
 800d7da:	4647      	mov	r7, r8
 800d7dc:	e03b      	b.n	800d856 <_dtoa_r+0x69e>
 800d7de:	4b9e      	ldr	r3, [pc, #632]	@ (800da58 <_dtoa_r+0x8a0>)
 800d7e0:	f7f2 ff0a 	bl	80005f8 <__aeabi_dmul>
 800d7e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7e8:	e7bc      	b.n	800d764 <_dtoa_r+0x5ac>
 800d7ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d7ee:	4656      	mov	r6, sl
 800d7f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	4629      	mov	r1, r5
 800d7f8:	f7f3 f828 	bl	800084c <__aeabi_ddiv>
 800d7fc:	f7f3 f9ac 	bl	8000b58 <__aeabi_d2iz>
 800d800:	4680      	mov	r8, r0
 800d802:	f7f2 fe8f 	bl	8000524 <__aeabi_i2d>
 800d806:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d80a:	f7f2 fef5 	bl	80005f8 <__aeabi_dmul>
 800d80e:	4602      	mov	r2, r0
 800d810:	460b      	mov	r3, r1
 800d812:	4620      	mov	r0, r4
 800d814:	4629      	mov	r1, r5
 800d816:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d81a:	f7f2 fd35 	bl	8000288 <__aeabi_dsub>
 800d81e:	f806 4b01 	strb.w	r4, [r6], #1
 800d822:	9d03      	ldr	r5, [sp, #12]
 800d824:	eba6 040a 	sub.w	r4, r6, sl
 800d828:	42a5      	cmp	r5, r4
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	d133      	bne.n	800d898 <_dtoa_r+0x6e0>
 800d830:	f7f2 fd2c 	bl	800028c <__adddf3>
 800d834:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d838:	4604      	mov	r4, r0
 800d83a:	460d      	mov	r5, r1
 800d83c:	f7f3 f96c 	bl	8000b18 <__aeabi_dcmpgt>
 800d840:	b9c0      	cbnz	r0, 800d874 <_dtoa_r+0x6bc>
 800d842:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d846:	4620      	mov	r0, r4
 800d848:	4629      	mov	r1, r5
 800d84a:	f7f3 f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d84e:	b110      	cbz	r0, 800d856 <_dtoa_r+0x69e>
 800d850:	f018 0f01 	tst.w	r8, #1
 800d854:	d10e      	bne.n	800d874 <_dtoa_r+0x6bc>
 800d856:	9902      	ldr	r1, [sp, #8]
 800d858:	4648      	mov	r0, r9
 800d85a:	f000 fbbd 	bl	800dfd8 <_Bfree>
 800d85e:	2300      	movs	r3, #0
 800d860:	7033      	strb	r3, [r6, #0]
 800d862:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d864:	3701      	adds	r7, #1
 800d866:	601f      	str	r7, [r3, #0]
 800d868:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 824b 	beq.w	800dd06 <_dtoa_r+0xb4e>
 800d870:	601e      	str	r6, [r3, #0]
 800d872:	e248      	b.n	800dd06 <_dtoa_r+0xb4e>
 800d874:	46b8      	mov	r8, r7
 800d876:	4633      	mov	r3, r6
 800d878:	461e      	mov	r6, r3
 800d87a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d87e:	2a39      	cmp	r2, #57	@ 0x39
 800d880:	d106      	bne.n	800d890 <_dtoa_r+0x6d8>
 800d882:	459a      	cmp	sl, r3
 800d884:	d1f8      	bne.n	800d878 <_dtoa_r+0x6c0>
 800d886:	2230      	movs	r2, #48	@ 0x30
 800d888:	f108 0801 	add.w	r8, r8, #1
 800d88c:	f88a 2000 	strb.w	r2, [sl]
 800d890:	781a      	ldrb	r2, [r3, #0]
 800d892:	3201      	adds	r2, #1
 800d894:	701a      	strb	r2, [r3, #0]
 800d896:	e7a0      	b.n	800d7da <_dtoa_r+0x622>
 800d898:	4b6f      	ldr	r3, [pc, #444]	@ (800da58 <_dtoa_r+0x8a0>)
 800d89a:	2200      	movs	r2, #0
 800d89c:	f7f2 feac 	bl	80005f8 <__aeabi_dmul>
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	460d      	mov	r5, r1
 800d8a8:	f7f3 f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	d09f      	beq.n	800d7f0 <_dtoa_r+0x638>
 800d8b0:	e7d1      	b.n	800d856 <_dtoa_r+0x69e>
 800d8b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8b4:	2a00      	cmp	r2, #0
 800d8b6:	f000 80ea 	beq.w	800da8e <_dtoa_r+0x8d6>
 800d8ba:	9a07      	ldr	r2, [sp, #28]
 800d8bc:	2a01      	cmp	r2, #1
 800d8be:	f300 80cd 	bgt.w	800da5c <_dtoa_r+0x8a4>
 800d8c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d8c4:	2a00      	cmp	r2, #0
 800d8c6:	f000 80c1 	beq.w	800da4c <_dtoa_r+0x894>
 800d8ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d8ce:	9c08      	ldr	r4, [sp, #32]
 800d8d0:	9e00      	ldr	r6, [sp, #0]
 800d8d2:	9a00      	ldr	r2, [sp, #0]
 800d8d4:	441a      	add	r2, r3
 800d8d6:	9200      	str	r2, [sp, #0]
 800d8d8:	9a06      	ldr	r2, [sp, #24]
 800d8da:	2101      	movs	r1, #1
 800d8dc:	441a      	add	r2, r3
 800d8de:	4648      	mov	r0, r9
 800d8e0:	9206      	str	r2, [sp, #24]
 800d8e2:	f000 fc77 	bl	800e1d4 <__i2b>
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	b166      	cbz	r6, 800d904 <_dtoa_r+0x74c>
 800d8ea:	9b06      	ldr	r3, [sp, #24]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	dd09      	ble.n	800d904 <_dtoa_r+0x74c>
 800d8f0:	42b3      	cmp	r3, r6
 800d8f2:	9a00      	ldr	r2, [sp, #0]
 800d8f4:	bfa8      	it	ge
 800d8f6:	4633      	movge	r3, r6
 800d8f8:	1ad2      	subs	r2, r2, r3
 800d8fa:	9200      	str	r2, [sp, #0]
 800d8fc:	9a06      	ldr	r2, [sp, #24]
 800d8fe:	1af6      	subs	r6, r6, r3
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	9306      	str	r3, [sp, #24]
 800d904:	9b08      	ldr	r3, [sp, #32]
 800d906:	b30b      	cbz	r3, 800d94c <_dtoa_r+0x794>
 800d908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f000 80c6 	beq.w	800da9c <_dtoa_r+0x8e4>
 800d910:	2c00      	cmp	r4, #0
 800d912:	f000 80c0 	beq.w	800da96 <_dtoa_r+0x8de>
 800d916:	4629      	mov	r1, r5
 800d918:	4622      	mov	r2, r4
 800d91a:	4648      	mov	r0, r9
 800d91c:	f000 fd12 	bl	800e344 <__pow5mult>
 800d920:	9a02      	ldr	r2, [sp, #8]
 800d922:	4601      	mov	r1, r0
 800d924:	4605      	mov	r5, r0
 800d926:	4648      	mov	r0, r9
 800d928:	f000 fc6a 	bl	800e200 <__multiply>
 800d92c:	9902      	ldr	r1, [sp, #8]
 800d92e:	4680      	mov	r8, r0
 800d930:	4648      	mov	r0, r9
 800d932:	f000 fb51 	bl	800dfd8 <_Bfree>
 800d936:	9b08      	ldr	r3, [sp, #32]
 800d938:	1b1b      	subs	r3, r3, r4
 800d93a:	9308      	str	r3, [sp, #32]
 800d93c:	f000 80b1 	beq.w	800daa2 <_dtoa_r+0x8ea>
 800d940:	9a08      	ldr	r2, [sp, #32]
 800d942:	4641      	mov	r1, r8
 800d944:	4648      	mov	r0, r9
 800d946:	f000 fcfd 	bl	800e344 <__pow5mult>
 800d94a:	9002      	str	r0, [sp, #8]
 800d94c:	2101      	movs	r1, #1
 800d94e:	4648      	mov	r0, r9
 800d950:	f000 fc40 	bl	800e1d4 <__i2b>
 800d954:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d956:	4604      	mov	r4, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f000 81d8 	beq.w	800dd0e <_dtoa_r+0xb56>
 800d95e:	461a      	mov	r2, r3
 800d960:	4601      	mov	r1, r0
 800d962:	4648      	mov	r0, r9
 800d964:	f000 fcee 	bl	800e344 <__pow5mult>
 800d968:	9b07      	ldr	r3, [sp, #28]
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	4604      	mov	r4, r0
 800d96e:	f300 809f 	bgt.w	800dab0 <_dtoa_r+0x8f8>
 800d972:	9b04      	ldr	r3, [sp, #16]
 800d974:	2b00      	cmp	r3, #0
 800d976:	f040 8097 	bne.w	800daa8 <_dtoa_r+0x8f0>
 800d97a:	9b05      	ldr	r3, [sp, #20]
 800d97c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d980:	2b00      	cmp	r3, #0
 800d982:	f040 8093 	bne.w	800daac <_dtoa_r+0x8f4>
 800d986:	9b05      	ldr	r3, [sp, #20]
 800d988:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d98c:	0d1b      	lsrs	r3, r3, #20
 800d98e:	051b      	lsls	r3, r3, #20
 800d990:	b133      	cbz	r3, 800d9a0 <_dtoa_r+0x7e8>
 800d992:	9b00      	ldr	r3, [sp, #0]
 800d994:	3301      	adds	r3, #1
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	9b06      	ldr	r3, [sp, #24]
 800d99a:	3301      	adds	r3, #1
 800d99c:	9306      	str	r3, [sp, #24]
 800d99e:	2301      	movs	r3, #1
 800d9a0:	9308      	str	r3, [sp, #32]
 800d9a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	f000 81b8 	beq.w	800dd1a <_dtoa_r+0xb62>
 800d9aa:	6923      	ldr	r3, [r4, #16]
 800d9ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d9b0:	6918      	ldr	r0, [r3, #16]
 800d9b2:	f000 fbc3 	bl	800e13c <__hi0bits>
 800d9b6:	f1c0 0020 	rsb	r0, r0, #32
 800d9ba:	9b06      	ldr	r3, [sp, #24]
 800d9bc:	4418      	add	r0, r3
 800d9be:	f010 001f 	ands.w	r0, r0, #31
 800d9c2:	f000 8082 	beq.w	800daca <_dtoa_r+0x912>
 800d9c6:	f1c0 0320 	rsb	r3, r0, #32
 800d9ca:	2b04      	cmp	r3, #4
 800d9cc:	dd73      	ble.n	800dab6 <_dtoa_r+0x8fe>
 800d9ce:	9b00      	ldr	r3, [sp, #0]
 800d9d0:	f1c0 001c 	rsb	r0, r0, #28
 800d9d4:	4403      	add	r3, r0
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	9b06      	ldr	r3, [sp, #24]
 800d9da:	4403      	add	r3, r0
 800d9dc:	4406      	add	r6, r0
 800d9de:	9306      	str	r3, [sp, #24]
 800d9e0:	9b00      	ldr	r3, [sp, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	dd05      	ble.n	800d9f2 <_dtoa_r+0x83a>
 800d9e6:	9902      	ldr	r1, [sp, #8]
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	4648      	mov	r0, r9
 800d9ec:	f000 fd04 	bl	800e3f8 <__lshift>
 800d9f0:	9002      	str	r0, [sp, #8]
 800d9f2:	9b06      	ldr	r3, [sp, #24]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	dd05      	ble.n	800da04 <_dtoa_r+0x84c>
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	4648      	mov	r0, r9
 800d9fe:	f000 fcfb 	bl	800e3f8 <__lshift>
 800da02:	4604      	mov	r4, r0
 800da04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da06:	2b00      	cmp	r3, #0
 800da08:	d061      	beq.n	800dace <_dtoa_r+0x916>
 800da0a:	9802      	ldr	r0, [sp, #8]
 800da0c:	4621      	mov	r1, r4
 800da0e:	f000 fd5f 	bl	800e4d0 <__mcmp>
 800da12:	2800      	cmp	r0, #0
 800da14:	da5b      	bge.n	800dace <_dtoa_r+0x916>
 800da16:	2300      	movs	r3, #0
 800da18:	9902      	ldr	r1, [sp, #8]
 800da1a:	220a      	movs	r2, #10
 800da1c:	4648      	mov	r0, r9
 800da1e:	f000 fafd 	bl	800e01c <__multadd>
 800da22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da24:	9002      	str	r0, [sp, #8]
 800da26:	f107 38ff 	add.w	r8, r7, #4294967295
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 8177 	beq.w	800dd1e <_dtoa_r+0xb66>
 800da30:	4629      	mov	r1, r5
 800da32:	2300      	movs	r3, #0
 800da34:	220a      	movs	r2, #10
 800da36:	4648      	mov	r0, r9
 800da38:	f000 faf0 	bl	800e01c <__multadd>
 800da3c:	f1bb 0f00 	cmp.w	fp, #0
 800da40:	4605      	mov	r5, r0
 800da42:	dc6f      	bgt.n	800db24 <_dtoa_r+0x96c>
 800da44:	9b07      	ldr	r3, [sp, #28]
 800da46:	2b02      	cmp	r3, #2
 800da48:	dc49      	bgt.n	800dade <_dtoa_r+0x926>
 800da4a:	e06b      	b.n	800db24 <_dtoa_r+0x96c>
 800da4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800da4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800da52:	e73c      	b.n	800d8ce <_dtoa_r+0x716>
 800da54:	3fe00000 	.word	0x3fe00000
 800da58:	40240000 	.word	0x40240000
 800da5c:	9b03      	ldr	r3, [sp, #12]
 800da5e:	1e5c      	subs	r4, r3, #1
 800da60:	9b08      	ldr	r3, [sp, #32]
 800da62:	42a3      	cmp	r3, r4
 800da64:	db09      	blt.n	800da7a <_dtoa_r+0x8c2>
 800da66:	1b1c      	subs	r4, r3, r4
 800da68:	9b03      	ldr	r3, [sp, #12]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	f6bf af30 	bge.w	800d8d0 <_dtoa_r+0x718>
 800da70:	9b00      	ldr	r3, [sp, #0]
 800da72:	9a03      	ldr	r2, [sp, #12]
 800da74:	1a9e      	subs	r6, r3, r2
 800da76:	2300      	movs	r3, #0
 800da78:	e72b      	b.n	800d8d2 <_dtoa_r+0x71a>
 800da7a:	9b08      	ldr	r3, [sp, #32]
 800da7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800da7e:	9408      	str	r4, [sp, #32]
 800da80:	1ae3      	subs	r3, r4, r3
 800da82:	441a      	add	r2, r3
 800da84:	9e00      	ldr	r6, [sp, #0]
 800da86:	9b03      	ldr	r3, [sp, #12]
 800da88:	920d      	str	r2, [sp, #52]	@ 0x34
 800da8a:	2400      	movs	r4, #0
 800da8c:	e721      	b.n	800d8d2 <_dtoa_r+0x71a>
 800da8e:	9c08      	ldr	r4, [sp, #32]
 800da90:	9e00      	ldr	r6, [sp, #0]
 800da92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800da94:	e728      	b.n	800d8e8 <_dtoa_r+0x730>
 800da96:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800da9a:	e751      	b.n	800d940 <_dtoa_r+0x788>
 800da9c:	9a08      	ldr	r2, [sp, #32]
 800da9e:	9902      	ldr	r1, [sp, #8]
 800daa0:	e750      	b.n	800d944 <_dtoa_r+0x78c>
 800daa2:	f8cd 8008 	str.w	r8, [sp, #8]
 800daa6:	e751      	b.n	800d94c <_dtoa_r+0x794>
 800daa8:	2300      	movs	r3, #0
 800daaa:	e779      	b.n	800d9a0 <_dtoa_r+0x7e8>
 800daac:	9b04      	ldr	r3, [sp, #16]
 800daae:	e777      	b.n	800d9a0 <_dtoa_r+0x7e8>
 800dab0:	2300      	movs	r3, #0
 800dab2:	9308      	str	r3, [sp, #32]
 800dab4:	e779      	b.n	800d9aa <_dtoa_r+0x7f2>
 800dab6:	d093      	beq.n	800d9e0 <_dtoa_r+0x828>
 800dab8:	9a00      	ldr	r2, [sp, #0]
 800daba:	331c      	adds	r3, #28
 800dabc:	441a      	add	r2, r3
 800dabe:	9200      	str	r2, [sp, #0]
 800dac0:	9a06      	ldr	r2, [sp, #24]
 800dac2:	441a      	add	r2, r3
 800dac4:	441e      	add	r6, r3
 800dac6:	9206      	str	r2, [sp, #24]
 800dac8:	e78a      	b.n	800d9e0 <_dtoa_r+0x828>
 800daca:	4603      	mov	r3, r0
 800dacc:	e7f4      	b.n	800dab8 <_dtoa_r+0x900>
 800dace:	9b03      	ldr	r3, [sp, #12]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	46b8      	mov	r8, r7
 800dad4:	dc20      	bgt.n	800db18 <_dtoa_r+0x960>
 800dad6:	469b      	mov	fp, r3
 800dad8:	9b07      	ldr	r3, [sp, #28]
 800dada:	2b02      	cmp	r3, #2
 800dadc:	dd1e      	ble.n	800db1c <_dtoa_r+0x964>
 800dade:	f1bb 0f00 	cmp.w	fp, #0
 800dae2:	f47f adb1 	bne.w	800d648 <_dtoa_r+0x490>
 800dae6:	4621      	mov	r1, r4
 800dae8:	465b      	mov	r3, fp
 800daea:	2205      	movs	r2, #5
 800daec:	4648      	mov	r0, r9
 800daee:	f000 fa95 	bl	800e01c <__multadd>
 800daf2:	4601      	mov	r1, r0
 800daf4:	4604      	mov	r4, r0
 800daf6:	9802      	ldr	r0, [sp, #8]
 800daf8:	f000 fcea 	bl	800e4d0 <__mcmp>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	f77f ada3 	ble.w	800d648 <_dtoa_r+0x490>
 800db02:	4656      	mov	r6, sl
 800db04:	2331      	movs	r3, #49	@ 0x31
 800db06:	f806 3b01 	strb.w	r3, [r6], #1
 800db0a:	f108 0801 	add.w	r8, r8, #1
 800db0e:	e59f      	b.n	800d650 <_dtoa_r+0x498>
 800db10:	9c03      	ldr	r4, [sp, #12]
 800db12:	46b8      	mov	r8, r7
 800db14:	4625      	mov	r5, r4
 800db16:	e7f4      	b.n	800db02 <_dtoa_r+0x94a>
 800db18:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800db1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f000 8101 	beq.w	800dd26 <_dtoa_r+0xb6e>
 800db24:	2e00      	cmp	r6, #0
 800db26:	dd05      	ble.n	800db34 <_dtoa_r+0x97c>
 800db28:	4629      	mov	r1, r5
 800db2a:	4632      	mov	r2, r6
 800db2c:	4648      	mov	r0, r9
 800db2e:	f000 fc63 	bl	800e3f8 <__lshift>
 800db32:	4605      	mov	r5, r0
 800db34:	9b08      	ldr	r3, [sp, #32]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d05c      	beq.n	800dbf4 <_dtoa_r+0xa3c>
 800db3a:	6869      	ldr	r1, [r5, #4]
 800db3c:	4648      	mov	r0, r9
 800db3e:	f000 fa0b 	bl	800df58 <_Balloc>
 800db42:	4606      	mov	r6, r0
 800db44:	b928      	cbnz	r0, 800db52 <_dtoa_r+0x99a>
 800db46:	4b82      	ldr	r3, [pc, #520]	@ (800dd50 <_dtoa_r+0xb98>)
 800db48:	4602      	mov	r2, r0
 800db4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800db4e:	f7ff bb4a 	b.w	800d1e6 <_dtoa_r+0x2e>
 800db52:	692a      	ldr	r2, [r5, #16]
 800db54:	3202      	adds	r2, #2
 800db56:	0092      	lsls	r2, r2, #2
 800db58:	f105 010c 	add.w	r1, r5, #12
 800db5c:	300c      	adds	r0, #12
 800db5e:	f7ff fa8c 	bl	800d07a <memcpy>
 800db62:	2201      	movs	r2, #1
 800db64:	4631      	mov	r1, r6
 800db66:	4648      	mov	r0, r9
 800db68:	f000 fc46 	bl	800e3f8 <__lshift>
 800db6c:	f10a 0301 	add.w	r3, sl, #1
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	eb0a 030b 	add.w	r3, sl, fp
 800db76:	9308      	str	r3, [sp, #32]
 800db78:	9b04      	ldr	r3, [sp, #16]
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	462f      	mov	r7, r5
 800db80:	9306      	str	r3, [sp, #24]
 800db82:	4605      	mov	r5, r0
 800db84:	9b00      	ldr	r3, [sp, #0]
 800db86:	9802      	ldr	r0, [sp, #8]
 800db88:	4621      	mov	r1, r4
 800db8a:	f103 3bff 	add.w	fp, r3, #4294967295
 800db8e:	f7ff fa89 	bl	800d0a4 <quorem>
 800db92:	4603      	mov	r3, r0
 800db94:	3330      	adds	r3, #48	@ 0x30
 800db96:	9003      	str	r0, [sp, #12]
 800db98:	4639      	mov	r1, r7
 800db9a:	9802      	ldr	r0, [sp, #8]
 800db9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db9e:	f000 fc97 	bl	800e4d0 <__mcmp>
 800dba2:	462a      	mov	r2, r5
 800dba4:	9004      	str	r0, [sp, #16]
 800dba6:	4621      	mov	r1, r4
 800dba8:	4648      	mov	r0, r9
 800dbaa:	f000 fcad 	bl	800e508 <__mdiff>
 800dbae:	68c2      	ldr	r2, [r0, #12]
 800dbb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	bb02      	cbnz	r2, 800dbf8 <_dtoa_r+0xa40>
 800dbb6:	4601      	mov	r1, r0
 800dbb8:	9802      	ldr	r0, [sp, #8]
 800dbba:	f000 fc89 	bl	800e4d0 <__mcmp>
 800dbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	4631      	mov	r1, r6
 800dbc4:	4648      	mov	r0, r9
 800dbc6:	920c      	str	r2, [sp, #48]	@ 0x30
 800dbc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbca:	f000 fa05 	bl	800dfd8 <_Bfree>
 800dbce:	9b07      	ldr	r3, [sp, #28]
 800dbd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dbd2:	9e00      	ldr	r6, [sp, #0]
 800dbd4:	ea42 0103 	orr.w	r1, r2, r3
 800dbd8:	9b06      	ldr	r3, [sp, #24]
 800dbda:	4319      	orrs	r1, r3
 800dbdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbde:	d10d      	bne.n	800dbfc <_dtoa_r+0xa44>
 800dbe0:	2b39      	cmp	r3, #57	@ 0x39
 800dbe2:	d027      	beq.n	800dc34 <_dtoa_r+0xa7c>
 800dbe4:	9a04      	ldr	r2, [sp, #16]
 800dbe6:	2a00      	cmp	r2, #0
 800dbe8:	dd01      	ble.n	800dbee <_dtoa_r+0xa36>
 800dbea:	9b03      	ldr	r3, [sp, #12]
 800dbec:	3331      	adds	r3, #49	@ 0x31
 800dbee:	f88b 3000 	strb.w	r3, [fp]
 800dbf2:	e52e      	b.n	800d652 <_dtoa_r+0x49a>
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	e7b9      	b.n	800db6c <_dtoa_r+0x9b4>
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	e7e2      	b.n	800dbc2 <_dtoa_r+0xa0a>
 800dbfc:	9904      	ldr	r1, [sp, #16]
 800dbfe:	2900      	cmp	r1, #0
 800dc00:	db04      	blt.n	800dc0c <_dtoa_r+0xa54>
 800dc02:	9807      	ldr	r0, [sp, #28]
 800dc04:	4301      	orrs	r1, r0
 800dc06:	9806      	ldr	r0, [sp, #24]
 800dc08:	4301      	orrs	r1, r0
 800dc0a:	d120      	bne.n	800dc4e <_dtoa_r+0xa96>
 800dc0c:	2a00      	cmp	r2, #0
 800dc0e:	ddee      	ble.n	800dbee <_dtoa_r+0xa36>
 800dc10:	9902      	ldr	r1, [sp, #8]
 800dc12:	9300      	str	r3, [sp, #0]
 800dc14:	2201      	movs	r2, #1
 800dc16:	4648      	mov	r0, r9
 800dc18:	f000 fbee 	bl	800e3f8 <__lshift>
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	9002      	str	r0, [sp, #8]
 800dc20:	f000 fc56 	bl	800e4d0 <__mcmp>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	9b00      	ldr	r3, [sp, #0]
 800dc28:	dc02      	bgt.n	800dc30 <_dtoa_r+0xa78>
 800dc2a:	d1e0      	bne.n	800dbee <_dtoa_r+0xa36>
 800dc2c:	07da      	lsls	r2, r3, #31
 800dc2e:	d5de      	bpl.n	800dbee <_dtoa_r+0xa36>
 800dc30:	2b39      	cmp	r3, #57	@ 0x39
 800dc32:	d1da      	bne.n	800dbea <_dtoa_r+0xa32>
 800dc34:	2339      	movs	r3, #57	@ 0x39
 800dc36:	f88b 3000 	strb.w	r3, [fp]
 800dc3a:	4633      	mov	r3, r6
 800dc3c:	461e      	mov	r6, r3
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dc44:	2a39      	cmp	r2, #57	@ 0x39
 800dc46:	d04e      	beq.n	800dce6 <_dtoa_r+0xb2e>
 800dc48:	3201      	adds	r2, #1
 800dc4a:	701a      	strb	r2, [r3, #0]
 800dc4c:	e501      	b.n	800d652 <_dtoa_r+0x49a>
 800dc4e:	2a00      	cmp	r2, #0
 800dc50:	dd03      	ble.n	800dc5a <_dtoa_r+0xaa2>
 800dc52:	2b39      	cmp	r3, #57	@ 0x39
 800dc54:	d0ee      	beq.n	800dc34 <_dtoa_r+0xa7c>
 800dc56:	3301      	adds	r3, #1
 800dc58:	e7c9      	b.n	800dbee <_dtoa_r+0xa36>
 800dc5a:	9a00      	ldr	r2, [sp, #0]
 800dc5c:	9908      	ldr	r1, [sp, #32]
 800dc5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dc62:	428a      	cmp	r2, r1
 800dc64:	d028      	beq.n	800dcb8 <_dtoa_r+0xb00>
 800dc66:	9902      	ldr	r1, [sp, #8]
 800dc68:	2300      	movs	r3, #0
 800dc6a:	220a      	movs	r2, #10
 800dc6c:	4648      	mov	r0, r9
 800dc6e:	f000 f9d5 	bl	800e01c <__multadd>
 800dc72:	42af      	cmp	r7, r5
 800dc74:	9002      	str	r0, [sp, #8]
 800dc76:	f04f 0300 	mov.w	r3, #0
 800dc7a:	f04f 020a 	mov.w	r2, #10
 800dc7e:	4639      	mov	r1, r7
 800dc80:	4648      	mov	r0, r9
 800dc82:	d107      	bne.n	800dc94 <_dtoa_r+0xadc>
 800dc84:	f000 f9ca 	bl	800e01c <__multadd>
 800dc88:	4607      	mov	r7, r0
 800dc8a:	4605      	mov	r5, r0
 800dc8c:	9b00      	ldr	r3, [sp, #0]
 800dc8e:	3301      	adds	r3, #1
 800dc90:	9300      	str	r3, [sp, #0]
 800dc92:	e777      	b.n	800db84 <_dtoa_r+0x9cc>
 800dc94:	f000 f9c2 	bl	800e01c <__multadd>
 800dc98:	4629      	mov	r1, r5
 800dc9a:	4607      	mov	r7, r0
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	220a      	movs	r2, #10
 800dca0:	4648      	mov	r0, r9
 800dca2:	f000 f9bb 	bl	800e01c <__multadd>
 800dca6:	4605      	mov	r5, r0
 800dca8:	e7f0      	b.n	800dc8c <_dtoa_r+0xad4>
 800dcaa:	f1bb 0f00 	cmp.w	fp, #0
 800dcae:	bfcc      	ite	gt
 800dcb0:	465e      	movgt	r6, fp
 800dcb2:	2601      	movle	r6, #1
 800dcb4:	4456      	add	r6, sl
 800dcb6:	2700      	movs	r7, #0
 800dcb8:	9902      	ldr	r1, [sp, #8]
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	4648      	mov	r0, r9
 800dcc0:	f000 fb9a 	bl	800e3f8 <__lshift>
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	9002      	str	r0, [sp, #8]
 800dcc8:	f000 fc02 	bl	800e4d0 <__mcmp>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	dcb4      	bgt.n	800dc3a <_dtoa_r+0xa82>
 800dcd0:	d102      	bne.n	800dcd8 <_dtoa_r+0xb20>
 800dcd2:	9b00      	ldr	r3, [sp, #0]
 800dcd4:	07db      	lsls	r3, r3, #31
 800dcd6:	d4b0      	bmi.n	800dc3a <_dtoa_r+0xa82>
 800dcd8:	4633      	mov	r3, r6
 800dcda:	461e      	mov	r6, r3
 800dcdc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dce0:	2a30      	cmp	r2, #48	@ 0x30
 800dce2:	d0fa      	beq.n	800dcda <_dtoa_r+0xb22>
 800dce4:	e4b5      	b.n	800d652 <_dtoa_r+0x49a>
 800dce6:	459a      	cmp	sl, r3
 800dce8:	d1a8      	bne.n	800dc3c <_dtoa_r+0xa84>
 800dcea:	2331      	movs	r3, #49	@ 0x31
 800dcec:	f108 0801 	add.w	r8, r8, #1
 800dcf0:	f88a 3000 	strb.w	r3, [sl]
 800dcf4:	e4ad      	b.n	800d652 <_dtoa_r+0x49a>
 800dcf6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dcf8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dd54 <_dtoa_r+0xb9c>
 800dcfc:	b11b      	cbz	r3, 800dd06 <_dtoa_r+0xb4e>
 800dcfe:	f10a 0308 	add.w	r3, sl, #8
 800dd02:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	4650      	mov	r0, sl
 800dd08:	b017      	add	sp, #92	@ 0x5c
 800dd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0e:	9b07      	ldr	r3, [sp, #28]
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	f77f ae2e 	ble.w	800d972 <_dtoa_r+0x7ba>
 800dd16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd18:	9308      	str	r3, [sp, #32]
 800dd1a:	2001      	movs	r0, #1
 800dd1c:	e64d      	b.n	800d9ba <_dtoa_r+0x802>
 800dd1e:	f1bb 0f00 	cmp.w	fp, #0
 800dd22:	f77f aed9 	ble.w	800dad8 <_dtoa_r+0x920>
 800dd26:	4656      	mov	r6, sl
 800dd28:	9802      	ldr	r0, [sp, #8]
 800dd2a:	4621      	mov	r1, r4
 800dd2c:	f7ff f9ba 	bl	800d0a4 <quorem>
 800dd30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dd34:	f806 3b01 	strb.w	r3, [r6], #1
 800dd38:	eba6 020a 	sub.w	r2, r6, sl
 800dd3c:	4593      	cmp	fp, r2
 800dd3e:	ddb4      	ble.n	800dcaa <_dtoa_r+0xaf2>
 800dd40:	9902      	ldr	r1, [sp, #8]
 800dd42:	2300      	movs	r3, #0
 800dd44:	220a      	movs	r2, #10
 800dd46:	4648      	mov	r0, r9
 800dd48:	f000 f968 	bl	800e01c <__multadd>
 800dd4c:	9002      	str	r0, [sp, #8]
 800dd4e:	e7eb      	b.n	800dd28 <_dtoa_r+0xb70>
 800dd50:	08011801 	.word	0x08011801
 800dd54:	08011785 	.word	0x08011785

0800dd58 <_free_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	4605      	mov	r5, r0
 800dd5c:	2900      	cmp	r1, #0
 800dd5e:	d041      	beq.n	800dde4 <_free_r+0x8c>
 800dd60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd64:	1f0c      	subs	r4, r1, #4
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	bfb8      	it	lt
 800dd6a:	18e4      	addlt	r4, r4, r3
 800dd6c:	f000 f8e8 	bl	800df40 <__malloc_lock>
 800dd70:	4a1d      	ldr	r2, [pc, #116]	@ (800dde8 <_free_r+0x90>)
 800dd72:	6813      	ldr	r3, [r2, #0]
 800dd74:	b933      	cbnz	r3, 800dd84 <_free_r+0x2c>
 800dd76:	6063      	str	r3, [r4, #4]
 800dd78:	6014      	str	r4, [r2, #0]
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd80:	f000 b8e4 	b.w	800df4c <__malloc_unlock>
 800dd84:	42a3      	cmp	r3, r4
 800dd86:	d908      	bls.n	800dd9a <_free_r+0x42>
 800dd88:	6820      	ldr	r0, [r4, #0]
 800dd8a:	1821      	adds	r1, r4, r0
 800dd8c:	428b      	cmp	r3, r1
 800dd8e:	bf01      	itttt	eq
 800dd90:	6819      	ldreq	r1, [r3, #0]
 800dd92:	685b      	ldreq	r3, [r3, #4]
 800dd94:	1809      	addeq	r1, r1, r0
 800dd96:	6021      	streq	r1, [r4, #0]
 800dd98:	e7ed      	b.n	800dd76 <_free_r+0x1e>
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	b10b      	cbz	r3, 800dda4 <_free_r+0x4c>
 800dda0:	42a3      	cmp	r3, r4
 800dda2:	d9fa      	bls.n	800dd9a <_free_r+0x42>
 800dda4:	6811      	ldr	r1, [r2, #0]
 800dda6:	1850      	adds	r0, r2, r1
 800dda8:	42a0      	cmp	r0, r4
 800ddaa:	d10b      	bne.n	800ddc4 <_free_r+0x6c>
 800ddac:	6820      	ldr	r0, [r4, #0]
 800ddae:	4401      	add	r1, r0
 800ddb0:	1850      	adds	r0, r2, r1
 800ddb2:	4283      	cmp	r3, r0
 800ddb4:	6011      	str	r1, [r2, #0]
 800ddb6:	d1e0      	bne.n	800dd7a <_free_r+0x22>
 800ddb8:	6818      	ldr	r0, [r3, #0]
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	6053      	str	r3, [r2, #4]
 800ddbe:	4408      	add	r0, r1
 800ddc0:	6010      	str	r0, [r2, #0]
 800ddc2:	e7da      	b.n	800dd7a <_free_r+0x22>
 800ddc4:	d902      	bls.n	800ddcc <_free_r+0x74>
 800ddc6:	230c      	movs	r3, #12
 800ddc8:	602b      	str	r3, [r5, #0]
 800ddca:	e7d6      	b.n	800dd7a <_free_r+0x22>
 800ddcc:	6820      	ldr	r0, [r4, #0]
 800ddce:	1821      	adds	r1, r4, r0
 800ddd0:	428b      	cmp	r3, r1
 800ddd2:	bf04      	itt	eq
 800ddd4:	6819      	ldreq	r1, [r3, #0]
 800ddd6:	685b      	ldreq	r3, [r3, #4]
 800ddd8:	6063      	str	r3, [r4, #4]
 800ddda:	bf04      	itt	eq
 800dddc:	1809      	addeq	r1, r1, r0
 800ddde:	6021      	streq	r1, [r4, #0]
 800dde0:	6054      	str	r4, [r2, #4]
 800dde2:	e7ca      	b.n	800dd7a <_free_r+0x22>
 800dde4:	bd38      	pop	{r3, r4, r5, pc}
 800dde6:	bf00      	nop
 800dde8:	20000830 	.word	0x20000830

0800ddec <malloc>:
 800ddec:	4b02      	ldr	r3, [pc, #8]	@ (800ddf8 <malloc+0xc>)
 800ddee:	4601      	mov	r1, r0
 800ddf0:	6818      	ldr	r0, [r3, #0]
 800ddf2:	f000 b825 	b.w	800de40 <_malloc_r>
 800ddf6:	bf00      	nop
 800ddf8:	20000060 	.word	0x20000060

0800ddfc <sbrk_aligned>:
 800ddfc:	b570      	push	{r4, r5, r6, lr}
 800ddfe:	4e0f      	ldr	r6, [pc, #60]	@ (800de3c <sbrk_aligned+0x40>)
 800de00:	460c      	mov	r4, r1
 800de02:	6831      	ldr	r1, [r6, #0]
 800de04:	4605      	mov	r5, r0
 800de06:	b911      	cbnz	r1, 800de0e <sbrk_aligned+0x12>
 800de08:	f001 fe04 	bl	800fa14 <_sbrk_r>
 800de0c:	6030      	str	r0, [r6, #0]
 800de0e:	4621      	mov	r1, r4
 800de10:	4628      	mov	r0, r5
 800de12:	f001 fdff 	bl	800fa14 <_sbrk_r>
 800de16:	1c43      	adds	r3, r0, #1
 800de18:	d103      	bne.n	800de22 <sbrk_aligned+0x26>
 800de1a:	f04f 34ff 	mov.w	r4, #4294967295
 800de1e:	4620      	mov	r0, r4
 800de20:	bd70      	pop	{r4, r5, r6, pc}
 800de22:	1cc4      	adds	r4, r0, #3
 800de24:	f024 0403 	bic.w	r4, r4, #3
 800de28:	42a0      	cmp	r0, r4
 800de2a:	d0f8      	beq.n	800de1e <sbrk_aligned+0x22>
 800de2c:	1a21      	subs	r1, r4, r0
 800de2e:	4628      	mov	r0, r5
 800de30:	f001 fdf0 	bl	800fa14 <_sbrk_r>
 800de34:	3001      	adds	r0, #1
 800de36:	d1f2      	bne.n	800de1e <sbrk_aligned+0x22>
 800de38:	e7ef      	b.n	800de1a <sbrk_aligned+0x1e>
 800de3a:	bf00      	nop
 800de3c:	2000082c 	.word	0x2000082c

0800de40 <_malloc_r>:
 800de40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de44:	1ccd      	adds	r5, r1, #3
 800de46:	f025 0503 	bic.w	r5, r5, #3
 800de4a:	3508      	adds	r5, #8
 800de4c:	2d0c      	cmp	r5, #12
 800de4e:	bf38      	it	cc
 800de50:	250c      	movcc	r5, #12
 800de52:	2d00      	cmp	r5, #0
 800de54:	4606      	mov	r6, r0
 800de56:	db01      	blt.n	800de5c <_malloc_r+0x1c>
 800de58:	42a9      	cmp	r1, r5
 800de5a:	d904      	bls.n	800de66 <_malloc_r+0x26>
 800de5c:	230c      	movs	r3, #12
 800de5e:	6033      	str	r3, [r6, #0]
 800de60:	2000      	movs	r0, #0
 800de62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df3c <_malloc_r+0xfc>
 800de6a:	f000 f869 	bl	800df40 <__malloc_lock>
 800de6e:	f8d8 3000 	ldr.w	r3, [r8]
 800de72:	461c      	mov	r4, r3
 800de74:	bb44      	cbnz	r4, 800dec8 <_malloc_r+0x88>
 800de76:	4629      	mov	r1, r5
 800de78:	4630      	mov	r0, r6
 800de7a:	f7ff ffbf 	bl	800ddfc <sbrk_aligned>
 800de7e:	1c43      	adds	r3, r0, #1
 800de80:	4604      	mov	r4, r0
 800de82:	d158      	bne.n	800df36 <_malloc_r+0xf6>
 800de84:	f8d8 4000 	ldr.w	r4, [r8]
 800de88:	4627      	mov	r7, r4
 800de8a:	2f00      	cmp	r7, #0
 800de8c:	d143      	bne.n	800df16 <_malloc_r+0xd6>
 800de8e:	2c00      	cmp	r4, #0
 800de90:	d04b      	beq.n	800df2a <_malloc_r+0xea>
 800de92:	6823      	ldr	r3, [r4, #0]
 800de94:	4639      	mov	r1, r7
 800de96:	4630      	mov	r0, r6
 800de98:	eb04 0903 	add.w	r9, r4, r3
 800de9c:	f001 fdba 	bl	800fa14 <_sbrk_r>
 800dea0:	4581      	cmp	r9, r0
 800dea2:	d142      	bne.n	800df2a <_malloc_r+0xea>
 800dea4:	6821      	ldr	r1, [r4, #0]
 800dea6:	1a6d      	subs	r5, r5, r1
 800dea8:	4629      	mov	r1, r5
 800deaa:	4630      	mov	r0, r6
 800deac:	f7ff ffa6 	bl	800ddfc <sbrk_aligned>
 800deb0:	3001      	adds	r0, #1
 800deb2:	d03a      	beq.n	800df2a <_malloc_r+0xea>
 800deb4:	6823      	ldr	r3, [r4, #0]
 800deb6:	442b      	add	r3, r5
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	f8d8 3000 	ldr.w	r3, [r8]
 800debe:	685a      	ldr	r2, [r3, #4]
 800dec0:	bb62      	cbnz	r2, 800df1c <_malloc_r+0xdc>
 800dec2:	f8c8 7000 	str.w	r7, [r8]
 800dec6:	e00f      	b.n	800dee8 <_malloc_r+0xa8>
 800dec8:	6822      	ldr	r2, [r4, #0]
 800deca:	1b52      	subs	r2, r2, r5
 800decc:	d420      	bmi.n	800df10 <_malloc_r+0xd0>
 800dece:	2a0b      	cmp	r2, #11
 800ded0:	d917      	bls.n	800df02 <_malloc_r+0xc2>
 800ded2:	1961      	adds	r1, r4, r5
 800ded4:	42a3      	cmp	r3, r4
 800ded6:	6025      	str	r5, [r4, #0]
 800ded8:	bf18      	it	ne
 800deda:	6059      	strne	r1, [r3, #4]
 800dedc:	6863      	ldr	r3, [r4, #4]
 800dede:	bf08      	it	eq
 800dee0:	f8c8 1000 	streq.w	r1, [r8]
 800dee4:	5162      	str	r2, [r4, r5]
 800dee6:	604b      	str	r3, [r1, #4]
 800dee8:	4630      	mov	r0, r6
 800deea:	f000 f82f 	bl	800df4c <__malloc_unlock>
 800deee:	f104 000b 	add.w	r0, r4, #11
 800def2:	1d23      	adds	r3, r4, #4
 800def4:	f020 0007 	bic.w	r0, r0, #7
 800def8:	1ac2      	subs	r2, r0, r3
 800defa:	bf1c      	itt	ne
 800defc:	1a1b      	subne	r3, r3, r0
 800defe:	50a3      	strne	r3, [r4, r2]
 800df00:	e7af      	b.n	800de62 <_malloc_r+0x22>
 800df02:	6862      	ldr	r2, [r4, #4]
 800df04:	42a3      	cmp	r3, r4
 800df06:	bf0c      	ite	eq
 800df08:	f8c8 2000 	streq.w	r2, [r8]
 800df0c:	605a      	strne	r2, [r3, #4]
 800df0e:	e7eb      	b.n	800dee8 <_malloc_r+0xa8>
 800df10:	4623      	mov	r3, r4
 800df12:	6864      	ldr	r4, [r4, #4]
 800df14:	e7ae      	b.n	800de74 <_malloc_r+0x34>
 800df16:	463c      	mov	r4, r7
 800df18:	687f      	ldr	r7, [r7, #4]
 800df1a:	e7b6      	b.n	800de8a <_malloc_r+0x4a>
 800df1c:	461a      	mov	r2, r3
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	42a3      	cmp	r3, r4
 800df22:	d1fb      	bne.n	800df1c <_malloc_r+0xdc>
 800df24:	2300      	movs	r3, #0
 800df26:	6053      	str	r3, [r2, #4]
 800df28:	e7de      	b.n	800dee8 <_malloc_r+0xa8>
 800df2a:	230c      	movs	r3, #12
 800df2c:	6033      	str	r3, [r6, #0]
 800df2e:	4630      	mov	r0, r6
 800df30:	f000 f80c 	bl	800df4c <__malloc_unlock>
 800df34:	e794      	b.n	800de60 <_malloc_r+0x20>
 800df36:	6005      	str	r5, [r0, #0]
 800df38:	e7d6      	b.n	800dee8 <_malloc_r+0xa8>
 800df3a:	bf00      	nop
 800df3c:	20000830 	.word	0x20000830

0800df40 <__malloc_lock>:
 800df40:	4801      	ldr	r0, [pc, #4]	@ (800df48 <__malloc_lock+0x8>)
 800df42:	f7ff b898 	b.w	800d076 <__retarget_lock_acquire_recursive>
 800df46:	bf00      	nop
 800df48:	20000828 	.word	0x20000828

0800df4c <__malloc_unlock>:
 800df4c:	4801      	ldr	r0, [pc, #4]	@ (800df54 <__malloc_unlock+0x8>)
 800df4e:	f7ff b893 	b.w	800d078 <__retarget_lock_release_recursive>
 800df52:	bf00      	nop
 800df54:	20000828 	.word	0x20000828

0800df58 <_Balloc>:
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	69c6      	ldr	r6, [r0, #28]
 800df5c:	4604      	mov	r4, r0
 800df5e:	460d      	mov	r5, r1
 800df60:	b976      	cbnz	r6, 800df80 <_Balloc+0x28>
 800df62:	2010      	movs	r0, #16
 800df64:	f7ff ff42 	bl	800ddec <malloc>
 800df68:	4602      	mov	r2, r0
 800df6a:	61e0      	str	r0, [r4, #28]
 800df6c:	b920      	cbnz	r0, 800df78 <_Balloc+0x20>
 800df6e:	4b18      	ldr	r3, [pc, #96]	@ (800dfd0 <_Balloc+0x78>)
 800df70:	4818      	ldr	r0, [pc, #96]	@ (800dfd4 <_Balloc+0x7c>)
 800df72:	216b      	movs	r1, #107	@ 0x6b
 800df74:	f001 fd68 	bl	800fa48 <__assert_func>
 800df78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df7c:	6006      	str	r6, [r0, #0]
 800df7e:	60c6      	str	r6, [r0, #12]
 800df80:	69e6      	ldr	r6, [r4, #28]
 800df82:	68f3      	ldr	r3, [r6, #12]
 800df84:	b183      	cbz	r3, 800dfa8 <_Balloc+0x50>
 800df86:	69e3      	ldr	r3, [r4, #28]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df8e:	b9b8      	cbnz	r0, 800dfc0 <_Balloc+0x68>
 800df90:	2101      	movs	r1, #1
 800df92:	fa01 f605 	lsl.w	r6, r1, r5
 800df96:	1d72      	adds	r2, r6, #5
 800df98:	0092      	lsls	r2, r2, #2
 800df9a:	4620      	mov	r0, r4
 800df9c:	f001 fd72 	bl	800fa84 <_calloc_r>
 800dfa0:	b160      	cbz	r0, 800dfbc <_Balloc+0x64>
 800dfa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfa6:	e00e      	b.n	800dfc6 <_Balloc+0x6e>
 800dfa8:	2221      	movs	r2, #33	@ 0x21
 800dfaa:	2104      	movs	r1, #4
 800dfac:	4620      	mov	r0, r4
 800dfae:	f001 fd69 	bl	800fa84 <_calloc_r>
 800dfb2:	69e3      	ldr	r3, [r4, #28]
 800dfb4:	60f0      	str	r0, [r6, #12]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1e4      	bne.n	800df86 <_Balloc+0x2e>
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	bd70      	pop	{r4, r5, r6, pc}
 800dfc0:	6802      	ldr	r2, [r0, #0]
 800dfc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfcc:	e7f7      	b.n	800dfbe <_Balloc+0x66>
 800dfce:	bf00      	nop
 800dfd0:	08011792 	.word	0x08011792
 800dfd4:	08011812 	.word	0x08011812

0800dfd8 <_Bfree>:
 800dfd8:	b570      	push	{r4, r5, r6, lr}
 800dfda:	69c6      	ldr	r6, [r0, #28]
 800dfdc:	4605      	mov	r5, r0
 800dfde:	460c      	mov	r4, r1
 800dfe0:	b976      	cbnz	r6, 800e000 <_Bfree+0x28>
 800dfe2:	2010      	movs	r0, #16
 800dfe4:	f7ff ff02 	bl	800ddec <malloc>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	61e8      	str	r0, [r5, #28]
 800dfec:	b920      	cbnz	r0, 800dff8 <_Bfree+0x20>
 800dfee:	4b09      	ldr	r3, [pc, #36]	@ (800e014 <_Bfree+0x3c>)
 800dff0:	4809      	ldr	r0, [pc, #36]	@ (800e018 <_Bfree+0x40>)
 800dff2:	218f      	movs	r1, #143	@ 0x8f
 800dff4:	f001 fd28 	bl	800fa48 <__assert_func>
 800dff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dffc:	6006      	str	r6, [r0, #0]
 800dffe:	60c6      	str	r6, [r0, #12]
 800e000:	b13c      	cbz	r4, 800e012 <_Bfree+0x3a>
 800e002:	69eb      	ldr	r3, [r5, #28]
 800e004:	6862      	ldr	r2, [r4, #4]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e00c:	6021      	str	r1, [r4, #0]
 800e00e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e012:	bd70      	pop	{r4, r5, r6, pc}
 800e014:	08011792 	.word	0x08011792
 800e018:	08011812 	.word	0x08011812

0800e01c <__multadd>:
 800e01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e020:	690d      	ldr	r5, [r1, #16]
 800e022:	4607      	mov	r7, r0
 800e024:	460c      	mov	r4, r1
 800e026:	461e      	mov	r6, r3
 800e028:	f101 0c14 	add.w	ip, r1, #20
 800e02c:	2000      	movs	r0, #0
 800e02e:	f8dc 3000 	ldr.w	r3, [ip]
 800e032:	b299      	uxth	r1, r3
 800e034:	fb02 6101 	mla	r1, r2, r1, r6
 800e038:	0c1e      	lsrs	r6, r3, #16
 800e03a:	0c0b      	lsrs	r3, r1, #16
 800e03c:	fb02 3306 	mla	r3, r2, r6, r3
 800e040:	b289      	uxth	r1, r1
 800e042:	3001      	adds	r0, #1
 800e044:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e048:	4285      	cmp	r5, r0
 800e04a:	f84c 1b04 	str.w	r1, [ip], #4
 800e04e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e052:	dcec      	bgt.n	800e02e <__multadd+0x12>
 800e054:	b30e      	cbz	r6, 800e09a <__multadd+0x7e>
 800e056:	68a3      	ldr	r3, [r4, #8]
 800e058:	42ab      	cmp	r3, r5
 800e05a:	dc19      	bgt.n	800e090 <__multadd+0x74>
 800e05c:	6861      	ldr	r1, [r4, #4]
 800e05e:	4638      	mov	r0, r7
 800e060:	3101      	adds	r1, #1
 800e062:	f7ff ff79 	bl	800df58 <_Balloc>
 800e066:	4680      	mov	r8, r0
 800e068:	b928      	cbnz	r0, 800e076 <__multadd+0x5a>
 800e06a:	4602      	mov	r2, r0
 800e06c:	4b0c      	ldr	r3, [pc, #48]	@ (800e0a0 <__multadd+0x84>)
 800e06e:	480d      	ldr	r0, [pc, #52]	@ (800e0a4 <__multadd+0x88>)
 800e070:	21ba      	movs	r1, #186	@ 0xba
 800e072:	f001 fce9 	bl	800fa48 <__assert_func>
 800e076:	6922      	ldr	r2, [r4, #16]
 800e078:	3202      	adds	r2, #2
 800e07a:	f104 010c 	add.w	r1, r4, #12
 800e07e:	0092      	lsls	r2, r2, #2
 800e080:	300c      	adds	r0, #12
 800e082:	f7fe fffa 	bl	800d07a <memcpy>
 800e086:	4621      	mov	r1, r4
 800e088:	4638      	mov	r0, r7
 800e08a:	f7ff ffa5 	bl	800dfd8 <_Bfree>
 800e08e:	4644      	mov	r4, r8
 800e090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e094:	3501      	adds	r5, #1
 800e096:	615e      	str	r6, [r3, #20]
 800e098:	6125      	str	r5, [r4, #16]
 800e09a:	4620      	mov	r0, r4
 800e09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a0:	08011801 	.word	0x08011801
 800e0a4:	08011812 	.word	0x08011812

0800e0a8 <__s2b>:
 800e0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0ac:	460c      	mov	r4, r1
 800e0ae:	4615      	mov	r5, r2
 800e0b0:	461f      	mov	r7, r3
 800e0b2:	2209      	movs	r2, #9
 800e0b4:	3308      	adds	r3, #8
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0bc:	2100      	movs	r1, #0
 800e0be:	2201      	movs	r2, #1
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	db09      	blt.n	800e0d8 <__s2b+0x30>
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	f7ff ff47 	bl	800df58 <_Balloc>
 800e0ca:	b940      	cbnz	r0, 800e0de <__s2b+0x36>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	4b19      	ldr	r3, [pc, #100]	@ (800e134 <__s2b+0x8c>)
 800e0d0:	4819      	ldr	r0, [pc, #100]	@ (800e138 <__s2b+0x90>)
 800e0d2:	21d3      	movs	r1, #211	@ 0xd3
 800e0d4:	f001 fcb8 	bl	800fa48 <__assert_func>
 800e0d8:	0052      	lsls	r2, r2, #1
 800e0da:	3101      	adds	r1, #1
 800e0dc:	e7f0      	b.n	800e0c0 <__s2b+0x18>
 800e0de:	9b08      	ldr	r3, [sp, #32]
 800e0e0:	6143      	str	r3, [r0, #20]
 800e0e2:	2d09      	cmp	r5, #9
 800e0e4:	f04f 0301 	mov.w	r3, #1
 800e0e8:	6103      	str	r3, [r0, #16]
 800e0ea:	dd16      	ble.n	800e11a <__s2b+0x72>
 800e0ec:	f104 0909 	add.w	r9, r4, #9
 800e0f0:	46c8      	mov	r8, r9
 800e0f2:	442c      	add	r4, r5
 800e0f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e0f8:	4601      	mov	r1, r0
 800e0fa:	3b30      	subs	r3, #48	@ 0x30
 800e0fc:	220a      	movs	r2, #10
 800e0fe:	4630      	mov	r0, r6
 800e100:	f7ff ff8c 	bl	800e01c <__multadd>
 800e104:	45a0      	cmp	r8, r4
 800e106:	d1f5      	bne.n	800e0f4 <__s2b+0x4c>
 800e108:	f1a5 0408 	sub.w	r4, r5, #8
 800e10c:	444c      	add	r4, r9
 800e10e:	1b2d      	subs	r5, r5, r4
 800e110:	1963      	adds	r3, r4, r5
 800e112:	42bb      	cmp	r3, r7
 800e114:	db04      	blt.n	800e120 <__s2b+0x78>
 800e116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e11a:	340a      	adds	r4, #10
 800e11c:	2509      	movs	r5, #9
 800e11e:	e7f6      	b.n	800e10e <__s2b+0x66>
 800e120:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e124:	4601      	mov	r1, r0
 800e126:	3b30      	subs	r3, #48	@ 0x30
 800e128:	220a      	movs	r2, #10
 800e12a:	4630      	mov	r0, r6
 800e12c:	f7ff ff76 	bl	800e01c <__multadd>
 800e130:	e7ee      	b.n	800e110 <__s2b+0x68>
 800e132:	bf00      	nop
 800e134:	08011801 	.word	0x08011801
 800e138:	08011812 	.word	0x08011812

0800e13c <__hi0bits>:
 800e13c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e140:	4603      	mov	r3, r0
 800e142:	bf36      	itet	cc
 800e144:	0403      	lslcc	r3, r0, #16
 800e146:	2000      	movcs	r0, #0
 800e148:	2010      	movcc	r0, #16
 800e14a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e14e:	bf3c      	itt	cc
 800e150:	021b      	lslcc	r3, r3, #8
 800e152:	3008      	addcc	r0, #8
 800e154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e158:	bf3c      	itt	cc
 800e15a:	011b      	lslcc	r3, r3, #4
 800e15c:	3004      	addcc	r0, #4
 800e15e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e162:	bf3c      	itt	cc
 800e164:	009b      	lslcc	r3, r3, #2
 800e166:	3002      	addcc	r0, #2
 800e168:	2b00      	cmp	r3, #0
 800e16a:	db05      	blt.n	800e178 <__hi0bits+0x3c>
 800e16c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e170:	f100 0001 	add.w	r0, r0, #1
 800e174:	bf08      	it	eq
 800e176:	2020      	moveq	r0, #32
 800e178:	4770      	bx	lr

0800e17a <__lo0bits>:
 800e17a:	6803      	ldr	r3, [r0, #0]
 800e17c:	4602      	mov	r2, r0
 800e17e:	f013 0007 	ands.w	r0, r3, #7
 800e182:	d00b      	beq.n	800e19c <__lo0bits+0x22>
 800e184:	07d9      	lsls	r1, r3, #31
 800e186:	d421      	bmi.n	800e1cc <__lo0bits+0x52>
 800e188:	0798      	lsls	r0, r3, #30
 800e18a:	bf49      	itett	mi
 800e18c:	085b      	lsrmi	r3, r3, #1
 800e18e:	089b      	lsrpl	r3, r3, #2
 800e190:	2001      	movmi	r0, #1
 800e192:	6013      	strmi	r3, [r2, #0]
 800e194:	bf5c      	itt	pl
 800e196:	6013      	strpl	r3, [r2, #0]
 800e198:	2002      	movpl	r0, #2
 800e19a:	4770      	bx	lr
 800e19c:	b299      	uxth	r1, r3
 800e19e:	b909      	cbnz	r1, 800e1a4 <__lo0bits+0x2a>
 800e1a0:	0c1b      	lsrs	r3, r3, #16
 800e1a2:	2010      	movs	r0, #16
 800e1a4:	b2d9      	uxtb	r1, r3
 800e1a6:	b909      	cbnz	r1, 800e1ac <__lo0bits+0x32>
 800e1a8:	3008      	adds	r0, #8
 800e1aa:	0a1b      	lsrs	r3, r3, #8
 800e1ac:	0719      	lsls	r1, r3, #28
 800e1ae:	bf04      	itt	eq
 800e1b0:	091b      	lsreq	r3, r3, #4
 800e1b2:	3004      	addeq	r0, #4
 800e1b4:	0799      	lsls	r1, r3, #30
 800e1b6:	bf04      	itt	eq
 800e1b8:	089b      	lsreq	r3, r3, #2
 800e1ba:	3002      	addeq	r0, #2
 800e1bc:	07d9      	lsls	r1, r3, #31
 800e1be:	d403      	bmi.n	800e1c8 <__lo0bits+0x4e>
 800e1c0:	085b      	lsrs	r3, r3, #1
 800e1c2:	f100 0001 	add.w	r0, r0, #1
 800e1c6:	d003      	beq.n	800e1d0 <__lo0bits+0x56>
 800e1c8:	6013      	str	r3, [r2, #0]
 800e1ca:	4770      	bx	lr
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	4770      	bx	lr
 800e1d0:	2020      	movs	r0, #32
 800e1d2:	4770      	bx	lr

0800e1d4 <__i2b>:
 800e1d4:	b510      	push	{r4, lr}
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	2101      	movs	r1, #1
 800e1da:	f7ff febd 	bl	800df58 <_Balloc>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	b928      	cbnz	r0, 800e1ee <__i2b+0x1a>
 800e1e2:	4b05      	ldr	r3, [pc, #20]	@ (800e1f8 <__i2b+0x24>)
 800e1e4:	4805      	ldr	r0, [pc, #20]	@ (800e1fc <__i2b+0x28>)
 800e1e6:	f240 1145 	movw	r1, #325	@ 0x145
 800e1ea:	f001 fc2d 	bl	800fa48 <__assert_func>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	6144      	str	r4, [r0, #20]
 800e1f2:	6103      	str	r3, [r0, #16]
 800e1f4:	bd10      	pop	{r4, pc}
 800e1f6:	bf00      	nop
 800e1f8:	08011801 	.word	0x08011801
 800e1fc:	08011812 	.word	0x08011812

0800e200 <__multiply>:
 800e200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	4617      	mov	r7, r2
 800e206:	690a      	ldr	r2, [r1, #16]
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	bfa8      	it	ge
 800e20e:	463b      	movge	r3, r7
 800e210:	4689      	mov	r9, r1
 800e212:	bfa4      	itt	ge
 800e214:	460f      	movge	r7, r1
 800e216:	4699      	movge	r9, r3
 800e218:	693d      	ldr	r5, [r7, #16]
 800e21a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	6879      	ldr	r1, [r7, #4]
 800e222:	eb05 060a 	add.w	r6, r5, sl
 800e226:	42b3      	cmp	r3, r6
 800e228:	b085      	sub	sp, #20
 800e22a:	bfb8      	it	lt
 800e22c:	3101      	addlt	r1, #1
 800e22e:	f7ff fe93 	bl	800df58 <_Balloc>
 800e232:	b930      	cbnz	r0, 800e242 <__multiply+0x42>
 800e234:	4602      	mov	r2, r0
 800e236:	4b41      	ldr	r3, [pc, #260]	@ (800e33c <__multiply+0x13c>)
 800e238:	4841      	ldr	r0, [pc, #260]	@ (800e340 <__multiply+0x140>)
 800e23a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e23e:	f001 fc03 	bl	800fa48 <__assert_func>
 800e242:	f100 0414 	add.w	r4, r0, #20
 800e246:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e24a:	4623      	mov	r3, r4
 800e24c:	2200      	movs	r2, #0
 800e24e:	4573      	cmp	r3, lr
 800e250:	d320      	bcc.n	800e294 <__multiply+0x94>
 800e252:	f107 0814 	add.w	r8, r7, #20
 800e256:	f109 0114 	add.w	r1, r9, #20
 800e25a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e25e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e262:	9302      	str	r3, [sp, #8]
 800e264:	1beb      	subs	r3, r5, r7
 800e266:	3b15      	subs	r3, #21
 800e268:	f023 0303 	bic.w	r3, r3, #3
 800e26c:	3304      	adds	r3, #4
 800e26e:	3715      	adds	r7, #21
 800e270:	42bd      	cmp	r5, r7
 800e272:	bf38      	it	cc
 800e274:	2304      	movcc	r3, #4
 800e276:	9301      	str	r3, [sp, #4]
 800e278:	9b02      	ldr	r3, [sp, #8]
 800e27a:	9103      	str	r1, [sp, #12]
 800e27c:	428b      	cmp	r3, r1
 800e27e:	d80c      	bhi.n	800e29a <__multiply+0x9a>
 800e280:	2e00      	cmp	r6, #0
 800e282:	dd03      	ble.n	800e28c <__multiply+0x8c>
 800e284:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d055      	beq.n	800e338 <__multiply+0x138>
 800e28c:	6106      	str	r6, [r0, #16]
 800e28e:	b005      	add	sp, #20
 800e290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e294:	f843 2b04 	str.w	r2, [r3], #4
 800e298:	e7d9      	b.n	800e24e <__multiply+0x4e>
 800e29a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e29e:	f1ba 0f00 	cmp.w	sl, #0
 800e2a2:	d01f      	beq.n	800e2e4 <__multiply+0xe4>
 800e2a4:	46c4      	mov	ip, r8
 800e2a6:	46a1      	mov	r9, r4
 800e2a8:	2700      	movs	r7, #0
 800e2aa:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e2ae:	f8d9 3000 	ldr.w	r3, [r9]
 800e2b2:	fa1f fb82 	uxth.w	fp, r2
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e2bc:	443b      	add	r3, r7
 800e2be:	f8d9 7000 	ldr.w	r7, [r9]
 800e2c2:	0c12      	lsrs	r2, r2, #16
 800e2c4:	0c3f      	lsrs	r7, r7, #16
 800e2c6:	fb0a 7202 	mla	r2, sl, r2, r7
 800e2ca:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2d4:	4565      	cmp	r5, ip
 800e2d6:	f849 3b04 	str.w	r3, [r9], #4
 800e2da:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e2de:	d8e4      	bhi.n	800e2aa <__multiply+0xaa>
 800e2e0:	9b01      	ldr	r3, [sp, #4]
 800e2e2:	50e7      	str	r7, [r4, r3]
 800e2e4:	9b03      	ldr	r3, [sp, #12]
 800e2e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e2ea:	3104      	adds	r1, #4
 800e2ec:	f1b9 0f00 	cmp.w	r9, #0
 800e2f0:	d020      	beq.n	800e334 <__multiply+0x134>
 800e2f2:	6823      	ldr	r3, [r4, #0]
 800e2f4:	4647      	mov	r7, r8
 800e2f6:	46a4      	mov	ip, r4
 800e2f8:	f04f 0a00 	mov.w	sl, #0
 800e2fc:	f8b7 b000 	ldrh.w	fp, [r7]
 800e300:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e304:	fb09 220b 	mla	r2, r9, fp, r2
 800e308:	4452      	add	r2, sl
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e310:	f84c 3b04 	str.w	r3, [ip], #4
 800e314:	f857 3b04 	ldr.w	r3, [r7], #4
 800e318:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e31c:	f8bc 3000 	ldrh.w	r3, [ip]
 800e320:	fb09 330a 	mla	r3, r9, sl, r3
 800e324:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e328:	42bd      	cmp	r5, r7
 800e32a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e32e:	d8e5      	bhi.n	800e2fc <__multiply+0xfc>
 800e330:	9a01      	ldr	r2, [sp, #4]
 800e332:	50a3      	str	r3, [r4, r2]
 800e334:	3404      	adds	r4, #4
 800e336:	e79f      	b.n	800e278 <__multiply+0x78>
 800e338:	3e01      	subs	r6, #1
 800e33a:	e7a1      	b.n	800e280 <__multiply+0x80>
 800e33c:	08011801 	.word	0x08011801
 800e340:	08011812 	.word	0x08011812

0800e344 <__pow5mult>:
 800e344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e348:	4615      	mov	r5, r2
 800e34a:	f012 0203 	ands.w	r2, r2, #3
 800e34e:	4607      	mov	r7, r0
 800e350:	460e      	mov	r6, r1
 800e352:	d007      	beq.n	800e364 <__pow5mult+0x20>
 800e354:	4c25      	ldr	r4, [pc, #148]	@ (800e3ec <__pow5mult+0xa8>)
 800e356:	3a01      	subs	r2, #1
 800e358:	2300      	movs	r3, #0
 800e35a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e35e:	f7ff fe5d 	bl	800e01c <__multadd>
 800e362:	4606      	mov	r6, r0
 800e364:	10ad      	asrs	r5, r5, #2
 800e366:	d03d      	beq.n	800e3e4 <__pow5mult+0xa0>
 800e368:	69fc      	ldr	r4, [r7, #28]
 800e36a:	b97c      	cbnz	r4, 800e38c <__pow5mult+0x48>
 800e36c:	2010      	movs	r0, #16
 800e36e:	f7ff fd3d 	bl	800ddec <malloc>
 800e372:	4602      	mov	r2, r0
 800e374:	61f8      	str	r0, [r7, #28]
 800e376:	b928      	cbnz	r0, 800e384 <__pow5mult+0x40>
 800e378:	4b1d      	ldr	r3, [pc, #116]	@ (800e3f0 <__pow5mult+0xac>)
 800e37a:	481e      	ldr	r0, [pc, #120]	@ (800e3f4 <__pow5mult+0xb0>)
 800e37c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e380:	f001 fb62 	bl	800fa48 <__assert_func>
 800e384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e388:	6004      	str	r4, [r0, #0]
 800e38a:	60c4      	str	r4, [r0, #12]
 800e38c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e394:	b94c      	cbnz	r4, 800e3aa <__pow5mult+0x66>
 800e396:	f240 2171 	movw	r1, #625	@ 0x271
 800e39a:	4638      	mov	r0, r7
 800e39c:	f7ff ff1a 	bl	800e1d4 <__i2b>
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	6003      	str	r3, [r0, #0]
 800e3aa:	f04f 0900 	mov.w	r9, #0
 800e3ae:	07eb      	lsls	r3, r5, #31
 800e3b0:	d50a      	bpl.n	800e3c8 <__pow5mult+0x84>
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	4622      	mov	r2, r4
 800e3b6:	4638      	mov	r0, r7
 800e3b8:	f7ff ff22 	bl	800e200 <__multiply>
 800e3bc:	4631      	mov	r1, r6
 800e3be:	4680      	mov	r8, r0
 800e3c0:	4638      	mov	r0, r7
 800e3c2:	f7ff fe09 	bl	800dfd8 <_Bfree>
 800e3c6:	4646      	mov	r6, r8
 800e3c8:	106d      	asrs	r5, r5, #1
 800e3ca:	d00b      	beq.n	800e3e4 <__pow5mult+0xa0>
 800e3cc:	6820      	ldr	r0, [r4, #0]
 800e3ce:	b938      	cbnz	r0, 800e3e0 <__pow5mult+0x9c>
 800e3d0:	4622      	mov	r2, r4
 800e3d2:	4621      	mov	r1, r4
 800e3d4:	4638      	mov	r0, r7
 800e3d6:	f7ff ff13 	bl	800e200 <__multiply>
 800e3da:	6020      	str	r0, [r4, #0]
 800e3dc:	f8c0 9000 	str.w	r9, [r0]
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	e7e4      	b.n	800e3ae <__pow5mult+0x6a>
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ea:	bf00      	nop
 800e3ec:	08011924 	.word	0x08011924
 800e3f0:	08011792 	.word	0x08011792
 800e3f4:	08011812 	.word	0x08011812

0800e3f8 <__lshift>:
 800e3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3fc:	460c      	mov	r4, r1
 800e3fe:	6849      	ldr	r1, [r1, #4]
 800e400:	6923      	ldr	r3, [r4, #16]
 800e402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e406:	68a3      	ldr	r3, [r4, #8]
 800e408:	4607      	mov	r7, r0
 800e40a:	4691      	mov	r9, r2
 800e40c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e410:	f108 0601 	add.w	r6, r8, #1
 800e414:	42b3      	cmp	r3, r6
 800e416:	db0b      	blt.n	800e430 <__lshift+0x38>
 800e418:	4638      	mov	r0, r7
 800e41a:	f7ff fd9d 	bl	800df58 <_Balloc>
 800e41e:	4605      	mov	r5, r0
 800e420:	b948      	cbnz	r0, 800e436 <__lshift+0x3e>
 800e422:	4602      	mov	r2, r0
 800e424:	4b28      	ldr	r3, [pc, #160]	@ (800e4c8 <__lshift+0xd0>)
 800e426:	4829      	ldr	r0, [pc, #164]	@ (800e4cc <__lshift+0xd4>)
 800e428:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e42c:	f001 fb0c 	bl	800fa48 <__assert_func>
 800e430:	3101      	adds	r1, #1
 800e432:	005b      	lsls	r3, r3, #1
 800e434:	e7ee      	b.n	800e414 <__lshift+0x1c>
 800e436:	2300      	movs	r3, #0
 800e438:	f100 0114 	add.w	r1, r0, #20
 800e43c:	f100 0210 	add.w	r2, r0, #16
 800e440:	4618      	mov	r0, r3
 800e442:	4553      	cmp	r3, sl
 800e444:	db33      	blt.n	800e4ae <__lshift+0xb6>
 800e446:	6920      	ldr	r0, [r4, #16]
 800e448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e44c:	f104 0314 	add.w	r3, r4, #20
 800e450:	f019 091f 	ands.w	r9, r9, #31
 800e454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e458:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e45c:	d02b      	beq.n	800e4b6 <__lshift+0xbe>
 800e45e:	f1c9 0e20 	rsb	lr, r9, #32
 800e462:	468a      	mov	sl, r1
 800e464:	2200      	movs	r2, #0
 800e466:	6818      	ldr	r0, [r3, #0]
 800e468:	fa00 f009 	lsl.w	r0, r0, r9
 800e46c:	4310      	orrs	r0, r2
 800e46e:	f84a 0b04 	str.w	r0, [sl], #4
 800e472:	f853 2b04 	ldr.w	r2, [r3], #4
 800e476:	459c      	cmp	ip, r3
 800e478:	fa22 f20e 	lsr.w	r2, r2, lr
 800e47c:	d8f3      	bhi.n	800e466 <__lshift+0x6e>
 800e47e:	ebac 0304 	sub.w	r3, ip, r4
 800e482:	3b15      	subs	r3, #21
 800e484:	f023 0303 	bic.w	r3, r3, #3
 800e488:	3304      	adds	r3, #4
 800e48a:	f104 0015 	add.w	r0, r4, #21
 800e48e:	4560      	cmp	r0, ip
 800e490:	bf88      	it	hi
 800e492:	2304      	movhi	r3, #4
 800e494:	50ca      	str	r2, [r1, r3]
 800e496:	b10a      	cbz	r2, 800e49c <__lshift+0xa4>
 800e498:	f108 0602 	add.w	r6, r8, #2
 800e49c:	3e01      	subs	r6, #1
 800e49e:	4638      	mov	r0, r7
 800e4a0:	612e      	str	r6, [r5, #16]
 800e4a2:	4621      	mov	r1, r4
 800e4a4:	f7ff fd98 	bl	800dfd8 <_Bfree>
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	e7c5      	b.n	800e442 <__lshift+0x4a>
 800e4b6:	3904      	subs	r1, #4
 800e4b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4c0:	459c      	cmp	ip, r3
 800e4c2:	d8f9      	bhi.n	800e4b8 <__lshift+0xc0>
 800e4c4:	e7ea      	b.n	800e49c <__lshift+0xa4>
 800e4c6:	bf00      	nop
 800e4c8:	08011801 	.word	0x08011801
 800e4cc:	08011812 	.word	0x08011812

0800e4d0 <__mcmp>:
 800e4d0:	690a      	ldr	r2, [r1, #16]
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	6900      	ldr	r0, [r0, #16]
 800e4d6:	1a80      	subs	r0, r0, r2
 800e4d8:	b530      	push	{r4, r5, lr}
 800e4da:	d10e      	bne.n	800e4fa <__mcmp+0x2a>
 800e4dc:	3314      	adds	r3, #20
 800e4de:	3114      	adds	r1, #20
 800e4e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e4e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e4e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e4ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e4f0:	4295      	cmp	r5, r2
 800e4f2:	d003      	beq.n	800e4fc <__mcmp+0x2c>
 800e4f4:	d205      	bcs.n	800e502 <__mcmp+0x32>
 800e4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fa:	bd30      	pop	{r4, r5, pc}
 800e4fc:	42a3      	cmp	r3, r4
 800e4fe:	d3f3      	bcc.n	800e4e8 <__mcmp+0x18>
 800e500:	e7fb      	b.n	800e4fa <__mcmp+0x2a>
 800e502:	2001      	movs	r0, #1
 800e504:	e7f9      	b.n	800e4fa <__mcmp+0x2a>
	...

0800e508 <__mdiff>:
 800e508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50c:	4689      	mov	r9, r1
 800e50e:	4606      	mov	r6, r0
 800e510:	4611      	mov	r1, r2
 800e512:	4648      	mov	r0, r9
 800e514:	4614      	mov	r4, r2
 800e516:	f7ff ffdb 	bl	800e4d0 <__mcmp>
 800e51a:	1e05      	subs	r5, r0, #0
 800e51c:	d112      	bne.n	800e544 <__mdiff+0x3c>
 800e51e:	4629      	mov	r1, r5
 800e520:	4630      	mov	r0, r6
 800e522:	f7ff fd19 	bl	800df58 <_Balloc>
 800e526:	4602      	mov	r2, r0
 800e528:	b928      	cbnz	r0, 800e536 <__mdiff+0x2e>
 800e52a:	4b3f      	ldr	r3, [pc, #252]	@ (800e628 <__mdiff+0x120>)
 800e52c:	f240 2137 	movw	r1, #567	@ 0x237
 800e530:	483e      	ldr	r0, [pc, #248]	@ (800e62c <__mdiff+0x124>)
 800e532:	f001 fa89 	bl	800fa48 <__assert_func>
 800e536:	2301      	movs	r3, #1
 800e538:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e53c:	4610      	mov	r0, r2
 800e53e:	b003      	add	sp, #12
 800e540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e544:	bfbc      	itt	lt
 800e546:	464b      	movlt	r3, r9
 800e548:	46a1      	movlt	r9, r4
 800e54a:	4630      	mov	r0, r6
 800e54c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e550:	bfba      	itte	lt
 800e552:	461c      	movlt	r4, r3
 800e554:	2501      	movlt	r5, #1
 800e556:	2500      	movge	r5, #0
 800e558:	f7ff fcfe 	bl	800df58 <_Balloc>
 800e55c:	4602      	mov	r2, r0
 800e55e:	b918      	cbnz	r0, 800e568 <__mdiff+0x60>
 800e560:	4b31      	ldr	r3, [pc, #196]	@ (800e628 <__mdiff+0x120>)
 800e562:	f240 2145 	movw	r1, #581	@ 0x245
 800e566:	e7e3      	b.n	800e530 <__mdiff+0x28>
 800e568:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e56c:	6926      	ldr	r6, [r4, #16]
 800e56e:	60c5      	str	r5, [r0, #12]
 800e570:	f109 0310 	add.w	r3, r9, #16
 800e574:	f109 0514 	add.w	r5, r9, #20
 800e578:	f104 0e14 	add.w	lr, r4, #20
 800e57c:	f100 0b14 	add.w	fp, r0, #20
 800e580:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e584:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e588:	9301      	str	r3, [sp, #4]
 800e58a:	46d9      	mov	r9, fp
 800e58c:	f04f 0c00 	mov.w	ip, #0
 800e590:	9b01      	ldr	r3, [sp, #4]
 800e592:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e596:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e59a:	9301      	str	r3, [sp, #4]
 800e59c:	fa1f f38a 	uxth.w	r3, sl
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	b283      	uxth	r3, r0
 800e5a4:	1acb      	subs	r3, r1, r3
 800e5a6:	0c00      	lsrs	r0, r0, #16
 800e5a8:	4463      	add	r3, ip
 800e5aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e5ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e5b8:	4576      	cmp	r6, lr
 800e5ba:	f849 3b04 	str.w	r3, [r9], #4
 800e5be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5c2:	d8e5      	bhi.n	800e590 <__mdiff+0x88>
 800e5c4:	1b33      	subs	r3, r6, r4
 800e5c6:	3b15      	subs	r3, #21
 800e5c8:	f023 0303 	bic.w	r3, r3, #3
 800e5cc:	3415      	adds	r4, #21
 800e5ce:	3304      	adds	r3, #4
 800e5d0:	42a6      	cmp	r6, r4
 800e5d2:	bf38      	it	cc
 800e5d4:	2304      	movcc	r3, #4
 800e5d6:	441d      	add	r5, r3
 800e5d8:	445b      	add	r3, fp
 800e5da:	461e      	mov	r6, r3
 800e5dc:	462c      	mov	r4, r5
 800e5de:	4544      	cmp	r4, r8
 800e5e0:	d30e      	bcc.n	800e600 <__mdiff+0xf8>
 800e5e2:	f108 0103 	add.w	r1, r8, #3
 800e5e6:	1b49      	subs	r1, r1, r5
 800e5e8:	f021 0103 	bic.w	r1, r1, #3
 800e5ec:	3d03      	subs	r5, #3
 800e5ee:	45a8      	cmp	r8, r5
 800e5f0:	bf38      	it	cc
 800e5f2:	2100      	movcc	r1, #0
 800e5f4:	440b      	add	r3, r1
 800e5f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e5fa:	b191      	cbz	r1, 800e622 <__mdiff+0x11a>
 800e5fc:	6117      	str	r7, [r2, #16]
 800e5fe:	e79d      	b.n	800e53c <__mdiff+0x34>
 800e600:	f854 1b04 	ldr.w	r1, [r4], #4
 800e604:	46e6      	mov	lr, ip
 800e606:	0c08      	lsrs	r0, r1, #16
 800e608:	fa1c fc81 	uxtah	ip, ip, r1
 800e60c:	4471      	add	r1, lr
 800e60e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e612:	b289      	uxth	r1, r1
 800e614:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e618:	f846 1b04 	str.w	r1, [r6], #4
 800e61c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e620:	e7dd      	b.n	800e5de <__mdiff+0xd6>
 800e622:	3f01      	subs	r7, #1
 800e624:	e7e7      	b.n	800e5f6 <__mdiff+0xee>
 800e626:	bf00      	nop
 800e628:	08011801 	.word	0x08011801
 800e62c:	08011812 	.word	0x08011812

0800e630 <__ulp>:
 800e630:	b082      	sub	sp, #8
 800e632:	ed8d 0b00 	vstr	d0, [sp]
 800e636:	9a01      	ldr	r2, [sp, #4]
 800e638:	4b0f      	ldr	r3, [pc, #60]	@ (800e678 <__ulp+0x48>)
 800e63a:	4013      	ands	r3, r2
 800e63c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e640:	2b00      	cmp	r3, #0
 800e642:	dc08      	bgt.n	800e656 <__ulp+0x26>
 800e644:	425b      	negs	r3, r3
 800e646:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e64a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e64e:	da04      	bge.n	800e65a <__ulp+0x2a>
 800e650:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e654:	4113      	asrs	r3, r2
 800e656:	2200      	movs	r2, #0
 800e658:	e008      	b.n	800e66c <__ulp+0x3c>
 800e65a:	f1a2 0314 	sub.w	r3, r2, #20
 800e65e:	2b1e      	cmp	r3, #30
 800e660:	bfda      	itte	le
 800e662:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e666:	40da      	lsrle	r2, r3
 800e668:	2201      	movgt	r2, #1
 800e66a:	2300      	movs	r3, #0
 800e66c:	4619      	mov	r1, r3
 800e66e:	4610      	mov	r0, r2
 800e670:	ec41 0b10 	vmov	d0, r0, r1
 800e674:	b002      	add	sp, #8
 800e676:	4770      	bx	lr
 800e678:	7ff00000 	.word	0x7ff00000

0800e67c <__b2d>:
 800e67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e680:	6906      	ldr	r6, [r0, #16]
 800e682:	f100 0814 	add.w	r8, r0, #20
 800e686:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e68a:	1f37      	subs	r7, r6, #4
 800e68c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e690:	4610      	mov	r0, r2
 800e692:	f7ff fd53 	bl	800e13c <__hi0bits>
 800e696:	f1c0 0320 	rsb	r3, r0, #32
 800e69a:	280a      	cmp	r0, #10
 800e69c:	600b      	str	r3, [r1, #0]
 800e69e:	491b      	ldr	r1, [pc, #108]	@ (800e70c <__b2d+0x90>)
 800e6a0:	dc15      	bgt.n	800e6ce <__b2d+0x52>
 800e6a2:	f1c0 0c0b 	rsb	ip, r0, #11
 800e6a6:	fa22 f30c 	lsr.w	r3, r2, ip
 800e6aa:	45b8      	cmp	r8, r7
 800e6ac:	ea43 0501 	orr.w	r5, r3, r1
 800e6b0:	bf34      	ite	cc
 800e6b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e6b6:	2300      	movcs	r3, #0
 800e6b8:	3015      	adds	r0, #21
 800e6ba:	fa02 f000 	lsl.w	r0, r2, r0
 800e6be:	fa23 f30c 	lsr.w	r3, r3, ip
 800e6c2:	4303      	orrs	r3, r0
 800e6c4:	461c      	mov	r4, r3
 800e6c6:	ec45 4b10 	vmov	d0, r4, r5
 800e6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ce:	45b8      	cmp	r8, r7
 800e6d0:	bf3a      	itte	cc
 800e6d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e6d6:	f1a6 0708 	subcc.w	r7, r6, #8
 800e6da:	2300      	movcs	r3, #0
 800e6dc:	380b      	subs	r0, #11
 800e6de:	d012      	beq.n	800e706 <__b2d+0x8a>
 800e6e0:	f1c0 0120 	rsb	r1, r0, #32
 800e6e4:	fa23 f401 	lsr.w	r4, r3, r1
 800e6e8:	4082      	lsls	r2, r0
 800e6ea:	4322      	orrs	r2, r4
 800e6ec:	4547      	cmp	r7, r8
 800e6ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e6f2:	bf8c      	ite	hi
 800e6f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e6f8:	2200      	movls	r2, #0
 800e6fa:	4083      	lsls	r3, r0
 800e6fc:	40ca      	lsrs	r2, r1
 800e6fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e702:	4313      	orrs	r3, r2
 800e704:	e7de      	b.n	800e6c4 <__b2d+0x48>
 800e706:	ea42 0501 	orr.w	r5, r2, r1
 800e70a:	e7db      	b.n	800e6c4 <__b2d+0x48>
 800e70c:	3ff00000 	.word	0x3ff00000

0800e710 <__d2b>:
 800e710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e714:	460f      	mov	r7, r1
 800e716:	2101      	movs	r1, #1
 800e718:	ec59 8b10 	vmov	r8, r9, d0
 800e71c:	4616      	mov	r6, r2
 800e71e:	f7ff fc1b 	bl	800df58 <_Balloc>
 800e722:	4604      	mov	r4, r0
 800e724:	b930      	cbnz	r0, 800e734 <__d2b+0x24>
 800e726:	4602      	mov	r2, r0
 800e728:	4b23      	ldr	r3, [pc, #140]	@ (800e7b8 <__d2b+0xa8>)
 800e72a:	4824      	ldr	r0, [pc, #144]	@ (800e7bc <__d2b+0xac>)
 800e72c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e730:	f001 f98a 	bl	800fa48 <__assert_func>
 800e734:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e73c:	b10d      	cbz	r5, 800e742 <__d2b+0x32>
 800e73e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e742:	9301      	str	r3, [sp, #4]
 800e744:	f1b8 0300 	subs.w	r3, r8, #0
 800e748:	d023      	beq.n	800e792 <__d2b+0x82>
 800e74a:	4668      	mov	r0, sp
 800e74c:	9300      	str	r3, [sp, #0]
 800e74e:	f7ff fd14 	bl	800e17a <__lo0bits>
 800e752:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e756:	b1d0      	cbz	r0, 800e78e <__d2b+0x7e>
 800e758:	f1c0 0320 	rsb	r3, r0, #32
 800e75c:	fa02 f303 	lsl.w	r3, r2, r3
 800e760:	430b      	orrs	r3, r1
 800e762:	40c2      	lsrs	r2, r0
 800e764:	6163      	str	r3, [r4, #20]
 800e766:	9201      	str	r2, [sp, #4]
 800e768:	9b01      	ldr	r3, [sp, #4]
 800e76a:	61a3      	str	r3, [r4, #24]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	bf0c      	ite	eq
 800e770:	2201      	moveq	r2, #1
 800e772:	2202      	movne	r2, #2
 800e774:	6122      	str	r2, [r4, #16]
 800e776:	b1a5      	cbz	r5, 800e7a2 <__d2b+0x92>
 800e778:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e77c:	4405      	add	r5, r0
 800e77e:	603d      	str	r5, [r7, #0]
 800e780:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e784:	6030      	str	r0, [r6, #0]
 800e786:	4620      	mov	r0, r4
 800e788:	b003      	add	sp, #12
 800e78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e78e:	6161      	str	r1, [r4, #20]
 800e790:	e7ea      	b.n	800e768 <__d2b+0x58>
 800e792:	a801      	add	r0, sp, #4
 800e794:	f7ff fcf1 	bl	800e17a <__lo0bits>
 800e798:	9b01      	ldr	r3, [sp, #4]
 800e79a:	6163      	str	r3, [r4, #20]
 800e79c:	3020      	adds	r0, #32
 800e79e:	2201      	movs	r2, #1
 800e7a0:	e7e8      	b.n	800e774 <__d2b+0x64>
 800e7a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e7aa:	6038      	str	r0, [r7, #0]
 800e7ac:	6918      	ldr	r0, [r3, #16]
 800e7ae:	f7ff fcc5 	bl	800e13c <__hi0bits>
 800e7b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7b6:	e7e5      	b.n	800e784 <__d2b+0x74>
 800e7b8:	08011801 	.word	0x08011801
 800e7bc:	08011812 	.word	0x08011812

0800e7c0 <__ratio>:
 800e7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c4:	b085      	sub	sp, #20
 800e7c6:	e9cd 1000 	strd	r1, r0, [sp]
 800e7ca:	a902      	add	r1, sp, #8
 800e7cc:	f7ff ff56 	bl	800e67c <__b2d>
 800e7d0:	9800      	ldr	r0, [sp, #0]
 800e7d2:	a903      	add	r1, sp, #12
 800e7d4:	ec55 4b10 	vmov	r4, r5, d0
 800e7d8:	f7ff ff50 	bl	800e67c <__b2d>
 800e7dc:	9b01      	ldr	r3, [sp, #4]
 800e7de:	6919      	ldr	r1, [r3, #16]
 800e7e0:	9b00      	ldr	r3, [sp, #0]
 800e7e2:	691b      	ldr	r3, [r3, #16]
 800e7e4:	1ac9      	subs	r1, r1, r3
 800e7e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e7ea:	1a9b      	subs	r3, r3, r2
 800e7ec:	ec5b ab10 	vmov	sl, fp, d0
 800e7f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	bfce      	itee	gt
 800e7f8:	462a      	movgt	r2, r5
 800e7fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e7fe:	465a      	movle	r2, fp
 800e800:	462f      	mov	r7, r5
 800e802:	46d9      	mov	r9, fp
 800e804:	bfcc      	ite	gt
 800e806:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e80a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e80e:	464b      	mov	r3, r9
 800e810:	4652      	mov	r2, sl
 800e812:	4620      	mov	r0, r4
 800e814:	4639      	mov	r1, r7
 800e816:	f7f2 f819 	bl	800084c <__aeabi_ddiv>
 800e81a:	ec41 0b10 	vmov	d0, r0, r1
 800e81e:	b005      	add	sp, #20
 800e820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e824 <__copybits>:
 800e824:	3901      	subs	r1, #1
 800e826:	b570      	push	{r4, r5, r6, lr}
 800e828:	1149      	asrs	r1, r1, #5
 800e82a:	6914      	ldr	r4, [r2, #16]
 800e82c:	3101      	adds	r1, #1
 800e82e:	f102 0314 	add.w	r3, r2, #20
 800e832:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e836:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e83a:	1f05      	subs	r5, r0, #4
 800e83c:	42a3      	cmp	r3, r4
 800e83e:	d30c      	bcc.n	800e85a <__copybits+0x36>
 800e840:	1aa3      	subs	r3, r4, r2
 800e842:	3b11      	subs	r3, #17
 800e844:	f023 0303 	bic.w	r3, r3, #3
 800e848:	3211      	adds	r2, #17
 800e84a:	42a2      	cmp	r2, r4
 800e84c:	bf88      	it	hi
 800e84e:	2300      	movhi	r3, #0
 800e850:	4418      	add	r0, r3
 800e852:	2300      	movs	r3, #0
 800e854:	4288      	cmp	r0, r1
 800e856:	d305      	bcc.n	800e864 <__copybits+0x40>
 800e858:	bd70      	pop	{r4, r5, r6, pc}
 800e85a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e85e:	f845 6f04 	str.w	r6, [r5, #4]!
 800e862:	e7eb      	b.n	800e83c <__copybits+0x18>
 800e864:	f840 3b04 	str.w	r3, [r0], #4
 800e868:	e7f4      	b.n	800e854 <__copybits+0x30>

0800e86a <__any_on>:
 800e86a:	f100 0214 	add.w	r2, r0, #20
 800e86e:	6900      	ldr	r0, [r0, #16]
 800e870:	114b      	asrs	r3, r1, #5
 800e872:	4298      	cmp	r0, r3
 800e874:	b510      	push	{r4, lr}
 800e876:	db11      	blt.n	800e89c <__any_on+0x32>
 800e878:	dd0a      	ble.n	800e890 <__any_on+0x26>
 800e87a:	f011 011f 	ands.w	r1, r1, #31
 800e87e:	d007      	beq.n	800e890 <__any_on+0x26>
 800e880:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e884:	fa24 f001 	lsr.w	r0, r4, r1
 800e888:	fa00 f101 	lsl.w	r1, r0, r1
 800e88c:	428c      	cmp	r4, r1
 800e88e:	d10b      	bne.n	800e8a8 <__any_on+0x3e>
 800e890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e894:	4293      	cmp	r3, r2
 800e896:	d803      	bhi.n	800e8a0 <__any_on+0x36>
 800e898:	2000      	movs	r0, #0
 800e89a:	bd10      	pop	{r4, pc}
 800e89c:	4603      	mov	r3, r0
 800e89e:	e7f7      	b.n	800e890 <__any_on+0x26>
 800e8a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8a4:	2900      	cmp	r1, #0
 800e8a6:	d0f5      	beq.n	800e894 <__any_on+0x2a>
 800e8a8:	2001      	movs	r0, #1
 800e8aa:	e7f6      	b.n	800e89a <__any_on+0x30>

0800e8ac <sulp>:
 800e8ac:	b570      	push	{r4, r5, r6, lr}
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	460d      	mov	r5, r1
 800e8b2:	ec45 4b10 	vmov	d0, r4, r5
 800e8b6:	4616      	mov	r6, r2
 800e8b8:	f7ff feba 	bl	800e630 <__ulp>
 800e8bc:	ec51 0b10 	vmov	r0, r1, d0
 800e8c0:	b17e      	cbz	r6, 800e8e2 <sulp+0x36>
 800e8c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e8c6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	dd09      	ble.n	800e8e2 <sulp+0x36>
 800e8ce:	051b      	lsls	r3, r3, #20
 800e8d0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e8d4:	2400      	movs	r4, #0
 800e8d6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e8da:	4622      	mov	r2, r4
 800e8dc:	462b      	mov	r3, r5
 800e8de:	f7f1 fe8b 	bl	80005f8 <__aeabi_dmul>
 800e8e2:	ec41 0b10 	vmov	d0, r0, r1
 800e8e6:	bd70      	pop	{r4, r5, r6, pc}

0800e8e8 <_strtod_l>:
 800e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	b09f      	sub	sp, #124	@ 0x7c
 800e8ee:	460c      	mov	r4, r1
 800e8f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	921a      	str	r2, [sp, #104]	@ 0x68
 800e8f6:	9005      	str	r0, [sp, #20]
 800e8f8:	f04f 0a00 	mov.w	sl, #0
 800e8fc:	f04f 0b00 	mov.w	fp, #0
 800e900:	460a      	mov	r2, r1
 800e902:	9219      	str	r2, [sp, #100]	@ 0x64
 800e904:	7811      	ldrb	r1, [r2, #0]
 800e906:	292b      	cmp	r1, #43	@ 0x2b
 800e908:	d04a      	beq.n	800e9a0 <_strtod_l+0xb8>
 800e90a:	d838      	bhi.n	800e97e <_strtod_l+0x96>
 800e90c:	290d      	cmp	r1, #13
 800e90e:	d832      	bhi.n	800e976 <_strtod_l+0x8e>
 800e910:	2908      	cmp	r1, #8
 800e912:	d832      	bhi.n	800e97a <_strtod_l+0x92>
 800e914:	2900      	cmp	r1, #0
 800e916:	d03b      	beq.n	800e990 <_strtod_l+0xa8>
 800e918:	2200      	movs	r2, #0
 800e91a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e91c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e91e:	782a      	ldrb	r2, [r5, #0]
 800e920:	2a30      	cmp	r2, #48	@ 0x30
 800e922:	f040 80b2 	bne.w	800ea8a <_strtod_l+0x1a2>
 800e926:	786a      	ldrb	r2, [r5, #1]
 800e928:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e92c:	2a58      	cmp	r2, #88	@ 0x58
 800e92e:	d16e      	bne.n	800ea0e <_strtod_l+0x126>
 800e930:	9302      	str	r3, [sp, #8]
 800e932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e934:	9301      	str	r3, [sp, #4]
 800e936:	ab1a      	add	r3, sp, #104	@ 0x68
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	4a8f      	ldr	r2, [pc, #572]	@ (800eb78 <_strtod_l+0x290>)
 800e93c:	9805      	ldr	r0, [sp, #20]
 800e93e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e940:	a919      	add	r1, sp, #100	@ 0x64
 800e942:	f001 f91b 	bl	800fb7c <__gethex>
 800e946:	f010 060f 	ands.w	r6, r0, #15
 800e94a:	4604      	mov	r4, r0
 800e94c:	d005      	beq.n	800e95a <_strtod_l+0x72>
 800e94e:	2e06      	cmp	r6, #6
 800e950:	d128      	bne.n	800e9a4 <_strtod_l+0xbc>
 800e952:	3501      	adds	r5, #1
 800e954:	2300      	movs	r3, #0
 800e956:	9519      	str	r5, [sp, #100]	@ 0x64
 800e958:	930e      	str	r3, [sp, #56]	@ 0x38
 800e95a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f040 858e 	bne.w	800f47e <_strtod_l+0xb96>
 800e962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e964:	b1cb      	cbz	r3, 800e99a <_strtod_l+0xb2>
 800e966:	4652      	mov	r2, sl
 800e968:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e96c:	ec43 2b10 	vmov	d0, r2, r3
 800e970:	b01f      	add	sp, #124	@ 0x7c
 800e972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e976:	2920      	cmp	r1, #32
 800e978:	d1ce      	bne.n	800e918 <_strtod_l+0x30>
 800e97a:	3201      	adds	r2, #1
 800e97c:	e7c1      	b.n	800e902 <_strtod_l+0x1a>
 800e97e:	292d      	cmp	r1, #45	@ 0x2d
 800e980:	d1ca      	bne.n	800e918 <_strtod_l+0x30>
 800e982:	2101      	movs	r1, #1
 800e984:	910e      	str	r1, [sp, #56]	@ 0x38
 800e986:	1c51      	adds	r1, r2, #1
 800e988:	9119      	str	r1, [sp, #100]	@ 0x64
 800e98a:	7852      	ldrb	r2, [r2, #1]
 800e98c:	2a00      	cmp	r2, #0
 800e98e:	d1c5      	bne.n	800e91c <_strtod_l+0x34>
 800e990:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e992:	9419      	str	r4, [sp, #100]	@ 0x64
 800e994:	2b00      	cmp	r3, #0
 800e996:	f040 8570 	bne.w	800f47a <_strtod_l+0xb92>
 800e99a:	4652      	mov	r2, sl
 800e99c:	465b      	mov	r3, fp
 800e99e:	e7e5      	b.n	800e96c <_strtod_l+0x84>
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	e7ef      	b.n	800e984 <_strtod_l+0x9c>
 800e9a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e9a6:	b13a      	cbz	r2, 800e9b8 <_strtod_l+0xd0>
 800e9a8:	2135      	movs	r1, #53	@ 0x35
 800e9aa:	a81c      	add	r0, sp, #112	@ 0x70
 800e9ac:	f7ff ff3a 	bl	800e824 <__copybits>
 800e9b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e9b2:	9805      	ldr	r0, [sp, #20]
 800e9b4:	f7ff fb10 	bl	800dfd8 <_Bfree>
 800e9b8:	3e01      	subs	r6, #1
 800e9ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e9bc:	2e04      	cmp	r6, #4
 800e9be:	d806      	bhi.n	800e9ce <_strtod_l+0xe6>
 800e9c0:	e8df f006 	tbb	[pc, r6]
 800e9c4:	201d0314 	.word	0x201d0314
 800e9c8:	14          	.byte	0x14
 800e9c9:	00          	.byte	0x00
 800e9ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e9ce:	05e1      	lsls	r1, r4, #23
 800e9d0:	bf48      	it	mi
 800e9d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e9d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9da:	0d1b      	lsrs	r3, r3, #20
 800e9dc:	051b      	lsls	r3, r3, #20
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1bb      	bne.n	800e95a <_strtod_l+0x72>
 800e9e2:	f7fe fb1d 	bl	800d020 <__errno>
 800e9e6:	2322      	movs	r3, #34	@ 0x22
 800e9e8:	6003      	str	r3, [r0, #0]
 800e9ea:	e7b6      	b.n	800e95a <_strtod_l+0x72>
 800e9ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e9f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e9f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e9f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e9fc:	e7e7      	b.n	800e9ce <_strtod_l+0xe6>
 800e9fe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800eb80 <_strtod_l+0x298>
 800ea02:	e7e4      	b.n	800e9ce <_strtod_l+0xe6>
 800ea04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ea08:	f04f 3aff 	mov.w	sl, #4294967295
 800ea0c:	e7df      	b.n	800e9ce <_strtod_l+0xe6>
 800ea0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea10:	1c5a      	adds	r2, r3, #1
 800ea12:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea14:	785b      	ldrb	r3, [r3, #1]
 800ea16:	2b30      	cmp	r3, #48	@ 0x30
 800ea18:	d0f9      	beq.n	800ea0e <_strtod_l+0x126>
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d09d      	beq.n	800e95a <_strtod_l+0x72>
 800ea1e:	2301      	movs	r3, #1
 800ea20:	2700      	movs	r7, #0
 800ea22:	9308      	str	r3, [sp, #32]
 800ea24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea26:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea28:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ea2a:	46b9      	mov	r9, r7
 800ea2c:	220a      	movs	r2, #10
 800ea2e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ea30:	7805      	ldrb	r5, [r0, #0]
 800ea32:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ea36:	b2d9      	uxtb	r1, r3
 800ea38:	2909      	cmp	r1, #9
 800ea3a:	d928      	bls.n	800ea8e <_strtod_l+0x1a6>
 800ea3c:	494f      	ldr	r1, [pc, #316]	@ (800eb7c <_strtod_l+0x294>)
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f000 ffd6 	bl	800f9f0 <strncmp>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d032      	beq.n	800eaae <_strtod_l+0x1c6>
 800ea48:	2000      	movs	r0, #0
 800ea4a:	462a      	mov	r2, r5
 800ea4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ea4e:	464d      	mov	r5, r9
 800ea50:	4603      	mov	r3, r0
 800ea52:	2a65      	cmp	r2, #101	@ 0x65
 800ea54:	d001      	beq.n	800ea5a <_strtod_l+0x172>
 800ea56:	2a45      	cmp	r2, #69	@ 0x45
 800ea58:	d114      	bne.n	800ea84 <_strtod_l+0x19c>
 800ea5a:	b91d      	cbnz	r5, 800ea64 <_strtod_l+0x17c>
 800ea5c:	9a08      	ldr	r2, [sp, #32]
 800ea5e:	4302      	orrs	r2, r0
 800ea60:	d096      	beq.n	800e990 <_strtod_l+0xa8>
 800ea62:	2500      	movs	r5, #0
 800ea64:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ea66:	1c62      	adds	r2, r4, #1
 800ea68:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea6a:	7862      	ldrb	r2, [r4, #1]
 800ea6c:	2a2b      	cmp	r2, #43	@ 0x2b
 800ea6e:	d07a      	beq.n	800eb66 <_strtod_l+0x27e>
 800ea70:	2a2d      	cmp	r2, #45	@ 0x2d
 800ea72:	d07e      	beq.n	800eb72 <_strtod_l+0x28a>
 800ea74:	f04f 0c00 	mov.w	ip, #0
 800ea78:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ea7c:	2909      	cmp	r1, #9
 800ea7e:	f240 8085 	bls.w	800eb8c <_strtod_l+0x2a4>
 800ea82:	9419      	str	r4, [sp, #100]	@ 0x64
 800ea84:	f04f 0800 	mov.w	r8, #0
 800ea88:	e0a5      	b.n	800ebd6 <_strtod_l+0x2ee>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	e7c8      	b.n	800ea20 <_strtod_l+0x138>
 800ea8e:	f1b9 0f08 	cmp.w	r9, #8
 800ea92:	bfd8      	it	le
 800ea94:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ea96:	f100 0001 	add.w	r0, r0, #1
 800ea9a:	bfda      	itte	le
 800ea9c:	fb02 3301 	mlale	r3, r2, r1, r3
 800eaa0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800eaa2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800eaa6:	f109 0901 	add.w	r9, r9, #1
 800eaaa:	9019      	str	r0, [sp, #100]	@ 0x64
 800eaac:	e7bf      	b.n	800ea2e <_strtod_l+0x146>
 800eaae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eab0:	1c5a      	adds	r2, r3, #1
 800eab2:	9219      	str	r2, [sp, #100]	@ 0x64
 800eab4:	785a      	ldrb	r2, [r3, #1]
 800eab6:	f1b9 0f00 	cmp.w	r9, #0
 800eaba:	d03b      	beq.n	800eb34 <_strtod_l+0x24c>
 800eabc:	900a      	str	r0, [sp, #40]	@ 0x28
 800eabe:	464d      	mov	r5, r9
 800eac0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800eac4:	2b09      	cmp	r3, #9
 800eac6:	d912      	bls.n	800eaee <_strtod_l+0x206>
 800eac8:	2301      	movs	r3, #1
 800eaca:	e7c2      	b.n	800ea52 <_strtod_l+0x16a>
 800eacc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eace:	1c5a      	adds	r2, r3, #1
 800ead0:	9219      	str	r2, [sp, #100]	@ 0x64
 800ead2:	785a      	ldrb	r2, [r3, #1]
 800ead4:	3001      	adds	r0, #1
 800ead6:	2a30      	cmp	r2, #48	@ 0x30
 800ead8:	d0f8      	beq.n	800eacc <_strtod_l+0x1e4>
 800eada:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800eade:	2b08      	cmp	r3, #8
 800eae0:	f200 84d2 	bhi.w	800f488 <_strtod_l+0xba0>
 800eae4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eae6:	900a      	str	r0, [sp, #40]	@ 0x28
 800eae8:	2000      	movs	r0, #0
 800eaea:	930c      	str	r3, [sp, #48]	@ 0x30
 800eaec:	4605      	mov	r5, r0
 800eaee:	3a30      	subs	r2, #48	@ 0x30
 800eaf0:	f100 0301 	add.w	r3, r0, #1
 800eaf4:	d018      	beq.n	800eb28 <_strtod_l+0x240>
 800eaf6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eaf8:	4419      	add	r1, r3
 800eafa:	910a      	str	r1, [sp, #40]	@ 0x28
 800eafc:	462e      	mov	r6, r5
 800eafe:	f04f 0e0a 	mov.w	lr, #10
 800eb02:	1c71      	adds	r1, r6, #1
 800eb04:	eba1 0c05 	sub.w	ip, r1, r5
 800eb08:	4563      	cmp	r3, ip
 800eb0a:	dc15      	bgt.n	800eb38 <_strtod_l+0x250>
 800eb0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800eb10:	182b      	adds	r3, r5, r0
 800eb12:	2b08      	cmp	r3, #8
 800eb14:	f105 0501 	add.w	r5, r5, #1
 800eb18:	4405      	add	r5, r0
 800eb1a:	dc1a      	bgt.n	800eb52 <_strtod_l+0x26a>
 800eb1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb1e:	230a      	movs	r3, #10
 800eb20:	fb03 2301 	mla	r3, r3, r1, r2
 800eb24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb26:	2300      	movs	r3, #0
 800eb28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eb2a:	1c51      	adds	r1, r2, #1
 800eb2c:	9119      	str	r1, [sp, #100]	@ 0x64
 800eb2e:	7852      	ldrb	r2, [r2, #1]
 800eb30:	4618      	mov	r0, r3
 800eb32:	e7c5      	b.n	800eac0 <_strtod_l+0x1d8>
 800eb34:	4648      	mov	r0, r9
 800eb36:	e7ce      	b.n	800ead6 <_strtod_l+0x1ee>
 800eb38:	2e08      	cmp	r6, #8
 800eb3a:	dc05      	bgt.n	800eb48 <_strtod_l+0x260>
 800eb3c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800eb3e:	fb0e f606 	mul.w	r6, lr, r6
 800eb42:	960b      	str	r6, [sp, #44]	@ 0x2c
 800eb44:	460e      	mov	r6, r1
 800eb46:	e7dc      	b.n	800eb02 <_strtod_l+0x21a>
 800eb48:	2910      	cmp	r1, #16
 800eb4a:	bfd8      	it	le
 800eb4c:	fb0e f707 	mulle.w	r7, lr, r7
 800eb50:	e7f8      	b.n	800eb44 <_strtod_l+0x25c>
 800eb52:	2b0f      	cmp	r3, #15
 800eb54:	bfdc      	itt	le
 800eb56:	230a      	movle	r3, #10
 800eb58:	fb03 2707 	mlale	r7, r3, r7, r2
 800eb5c:	e7e3      	b.n	800eb26 <_strtod_l+0x23e>
 800eb5e:	2300      	movs	r3, #0
 800eb60:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb62:	2301      	movs	r3, #1
 800eb64:	e77a      	b.n	800ea5c <_strtod_l+0x174>
 800eb66:	f04f 0c00 	mov.w	ip, #0
 800eb6a:	1ca2      	adds	r2, r4, #2
 800eb6c:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb6e:	78a2      	ldrb	r2, [r4, #2]
 800eb70:	e782      	b.n	800ea78 <_strtod_l+0x190>
 800eb72:	f04f 0c01 	mov.w	ip, #1
 800eb76:	e7f8      	b.n	800eb6a <_strtod_l+0x282>
 800eb78:	08011a34 	.word	0x08011a34
 800eb7c:	0801186b 	.word	0x0801186b
 800eb80:	7ff00000 	.word	0x7ff00000
 800eb84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eb86:	1c51      	adds	r1, r2, #1
 800eb88:	9119      	str	r1, [sp, #100]	@ 0x64
 800eb8a:	7852      	ldrb	r2, [r2, #1]
 800eb8c:	2a30      	cmp	r2, #48	@ 0x30
 800eb8e:	d0f9      	beq.n	800eb84 <_strtod_l+0x29c>
 800eb90:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800eb94:	2908      	cmp	r1, #8
 800eb96:	f63f af75 	bhi.w	800ea84 <_strtod_l+0x19c>
 800eb9a:	3a30      	subs	r2, #48	@ 0x30
 800eb9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb9e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eba0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800eba2:	f04f 080a 	mov.w	r8, #10
 800eba6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eba8:	1c56      	adds	r6, r2, #1
 800ebaa:	9619      	str	r6, [sp, #100]	@ 0x64
 800ebac:	7852      	ldrb	r2, [r2, #1]
 800ebae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ebb2:	f1be 0f09 	cmp.w	lr, #9
 800ebb6:	d939      	bls.n	800ec2c <_strtod_l+0x344>
 800ebb8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ebba:	1a76      	subs	r6, r6, r1
 800ebbc:	2e08      	cmp	r6, #8
 800ebbe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ebc2:	dc03      	bgt.n	800ebcc <_strtod_l+0x2e4>
 800ebc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebc6:	4588      	cmp	r8, r1
 800ebc8:	bfa8      	it	ge
 800ebca:	4688      	movge	r8, r1
 800ebcc:	f1bc 0f00 	cmp.w	ip, #0
 800ebd0:	d001      	beq.n	800ebd6 <_strtod_l+0x2ee>
 800ebd2:	f1c8 0800 	rsb	r8, r8, #0
 800ebd6:	2d00      	cmp	r5, #0
 800ebd8:	d14e      	bne.n	800ec78 <_strtod_l+0x390>
 800ebda:	9908      	ldr	r1, [sp, #32]
 800ebdc:	4308      	orrs	r0, r1
 800ebde:	f47f aebc 	bne.w	800e95a <_strtod_l+0x72>
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	f47f aed4 	bne.w	800e990 <_strtod_l+0xa8>
 800ebe8:	2a69      	cmp	r2, #105	@ 0x69
 800ebea:	d028      	beq.n	800ec3e <_strtod_l+0x356>
 800ebec:	dc25      	bgt.n	800ec3a <_strtod_l+0x352>
 800ebee:	2a49      	cmp	r2, #73	@ 0x49
 800ebf0:	d025      	beq.n	800ec3e <_strtod_l+0x356>
 800ebf2:	2a4e      	cmp	r2, #78	@ 0x4e
 800ebf4:	f47f aecc 	bne.w	800e990 <_strtod_l+0xa8>
 800ebf8:	499a      	ldr	r1, [pc, #616]	@ (800ee64 <_strtod_l+0x57c>)
 800ebfa:	a819      	add	r0, sp, #100	@ 0x64
 800ebfc:	f001 f9e0 	bl	800ffc0 <__match>
 800ec00:	2800      	cmp	r0, #0
 800ec02:	f43f aec5 	beq.w	800e990 <_strtod_l+0xa8>
 800ec06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	2b28      	cmp	r3, #40	@ 0x28
 800ec0c:	d12e      	bne.n	800ec6c <_strtod_l+0x384>
 800ec0e:	4996      	ldr	r1, [pc, #600]	@ (800ee68 <_strtod_l+0x580>)
 800ec10:	aa1c      	add	r2, sp, #112	@ 0x70
 800ec12:	a819      	add	r0, sp, #100	@ 0x64
 800ec14:	f001 f9e8 	bl	800ffe8 <__hexnan>
 800ec18:	2805      	cmp	r0, #5
 800ec1a:	d127      	bne.n	800ec6c <_strtod_l+0x384>
 800ec1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ec1e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ec22:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ec26:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ec2a:	e696      	b.n	800e95a <_strtod_l+0x72>
 800ec2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec2e:	fb08 2101 	mla	r1, r8, r1, r2
 800ec32:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ec36:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec38:	e7b5      	b.n	800eba6 <_strtod_l+0x2be>
 800ec3a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ec3c:	e7da      	b.n	800ebf4 <_strtod_l+0x30c>
 800ec3e:	498b      	ldr	r1, [pc, #556]	@ (800ee6c <_strtod_l+0x584>)
 800ec40:	a819      	add	r0, sp, #100	@ 0x64
 800ec42:	f001 f9bd 	bl	800ffc0 <__match>
 800ec46:	2800      	cmp	r0, #0
 800ec48:	f43f aea2 	beq.w	800e990 <_strtod_l+0xa8>
 800ec4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec4e:	4988      	ldr	r1, [pc, #544]	@ (800ee70 <_strtod_l+0x588>)
 800ec50:	3b01      	subs	r3, #1
 800ec52:	a819      	add	r0, sp, #100	@ 0x64
 800ec54:	9319      	str	r3, [sp, #100]	@ 0x64
 800ec56:	f001 f9b3 	bl	800ffc0 <__match>
 800ec5a:	b910      	cbnz	r0, 800ec62 <_strtod_l+0x37a>
 800ec5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec5e:	3301      	adds	r3, #1
 800ec60:	9319      	str	r3, [sp, #100]	@ 0x64
 800ec62:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ee80 <_strtod_l+0x598>
 800ec66:	f04f 0a00 	mov.w	sl, #0
 800ec6a:	e676      	b.n	800e95a <_strtod_l+0x72>
 800ec6c:	4881      	ldr	r0, [pc, #516]	@ (800ee74 <_strtod_l+0x58c>)
 800ec6e:	f000 fee3 	bl	800fa38 <nan>
 800ec72:	ec5b ab10 	vmov	sl, fp, d0
 800ec76:	e670      	b.n	800e95a <_strtod_l+0x72>
 800ec78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec7a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ec7c:	eba8 0303 	sub.w	r3, r8, r3
 800ec80:	f1b9 0f00 	cmp.w	r9, #0
 800ec84:	bf08      	it	eq
 800ec86:	46a9      	moveq	r9, r5
 800ec88:	2d10      	cmp	r5, #16
 800ec8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec8c:	462c      	mov	r4, r5
 800ec8e:	bfa8      	it	ge
 800ec90:	2410      	movge	r4, #16
 800ec92:	f7f1 fc37 	bl	8000504 <__aeabi_ui2d>
 800ec96:	2d09      	cmp	r5, #9
 800ec98:	4682      	mov	sl, r0
 800ec9a:	468b      	mov	fp, r1
 800ec9c:	dc13      	bgt.n	800ecc6 <_strtod_l+0x3de>
 800ec9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f43f ae5a 	beq.w	800e95a <_strtod_l+0x72>
 800eca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eca8:	dd78      	ble.n	800ed9c <_strtod_l+0x4b4>
 800ecaa:	2b16      	cmp	r3, #22
 800ecac:	dc5f      	bgt.n	800ed6e <_strtod_l+0x486>
 800ecae:	4972      	ldr	r1, [pc, #456]	@ (800ee78 <_strtod_l+0x590>)
 800ecb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ecb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecb8:	4652      	mov	r2, sl
 800ecba:	465b      	mov	r3, fp
 800ecbc:	f7f1 fc9c 	bl	80005f8 <__aeabi_dmul>
 800ecc0:	4682      	mov	sl, r0
 800ecc2:	468b      	mov	fp, r1
 800ecc4:	e649      	b.n	800e95a <_strtod_l+0x72>
 800ecc6:	4b6c      	ldr	r3, [pc, #432]	@ (800ee78 <_strtod_l+0x590>)
 800ecc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eccc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ecd0:	f7f1 fc92 	bl	80005f8 <__aeabi_dmul>
 800ecd4:	4682      	mov	sl, r0
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	468b      	mov	fp, r1
 800ecda:	f7f1 fc13 	bl	8000504 <__aeabi_ui2d>
 800ecde:	4602      	mov	r2, r0
 800ece0:	460b      	mov	r3, r1
 800ece2:	4650      	mov	r0, sl
 800ece4:	4659      	mov	r1, fp
 800ece6:	f7f1 fad1 	bl	800028c <__adddf3>
 800ecea:	2d0f      	cmp	r5, #15
 800ecec:	4682      	mov	sl, r0
 800ecee:	468b      	mov	fp, r1
 800ecf0:	ddd5      	ble.n	800ec9e <_strtod_l+0x3b6>
 800ecf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecf4:	1b2c      	subs	r4, r5, r4
 800ecf6:	441c      	add	r4, r3
 800ecf8:	2c00      	cmp	r4, #0
 800ecfa:	f340 8093 	ble.w	800ee24 <_strtod_l+0x53c>
 800ecfe:	f014 030f 	ands.w	r3, r4, #15
 800ed02:	d00a      	beq.n	800ed1a <_strtod_l+0x432>
 800ed04:	495c      	ldr	r1, [pc, #368]	@ (800ee78 <_strtod_l+0x590>)
 800ed06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed0a:	4652      	mov	r2, sl
 800ed0c:	465b      	mov	r3, fp
 800ed0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed12:	f7f1 fc71 	bl	80005f8 <__aeabi_dmul>
 800ed16:	4682      	mov	sl, r0
 800ed18:	468b      	mov	fp, r1
 800ed1a:	f034 040f 	bics.w	r4, r4, #15
 800ed1e:	d073      	beq.n	800ee08 <_strtod_l+0x520>
 800ed20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ed24:	dd49      	ble.n	800edba <_strtod_l+0x4d2>
 800ed26:	2400      	movs	r4, #0
 800ed28:	46a0      	mov	r8, r4
 800ed2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ed2c:	46a1      	mov	r9, r4
 800ed2e:	9a05      	ldr	r2, [sp, #20]
 800ed30:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ee80 <_strtod_l+0x598>
 800ed34:	2322      	movs	r3, #34	@ 0x22
 800ed36:	6013      	str	r3, [r2, #0]
 800ed38:	f04f 0a00 	mov.w	sl, #0
 800ed3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f43f ae0b 	beq.w	800e95a <_strtod_l+0x72>
 800ed44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed46:	9805      	ldr	r0, [sp, #20]
 800ed48:	f7ff f946 	bl	800dfd8 <_Bfree>
 800ed4c:	9805      	ldr	r0, [sp, #20]
 800ed4e:	4649      	mov	r1, r9
 800ed50:	f7ff f942 	bl	800dfd8 <_Bfree>
 800ed54:	9805      	ldr	r0, [sp, #20]
 800ed56:	4641      	mov	r1, r8
 800ed58:	f7ff f93e 	bl	800dfd8 <_Bfree>
 800ed5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed5e:	9805      	ldr	r0, [sp, #20]
 800ed60:	f7ff f93a 	bl	800dfd8 <_Bfree>
 800ed64:	9805      	ldr	r0, [sp, #20]
 800ed66:	4621      	mov	r1, r4
 800ed68:	f7ff f936 	bl	800dfd8 <_Bfree>
 800ed6c:	e5f5      	b.n	800e95a <_strtod_l+0x72>
 800ed6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ed74:	4293      	cmp	r3, r2
 800ed76:	dbbc      	blt.n	800ecf2 <_strtod_l+0x40a>
 800ed78:	4c3f      	ldr	r4, [pc, #252]	@ (800ee78 <_strtod_l+0x590>)
 800ed7a:	f1c5 050f 	rsb	r5, r5, #15
 800ed7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ed82:	4652      	mov	r2, sl
 800ed84:	465b      	mov	r3, fp
 800ed86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed8a:	f7f1 fc35 	bl	80005f8 <__aeabi_dmul>
 800ed8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed90:	1b5d      	subs	r5, r3, r5
 800ed92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ed96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ed9a:	e78f      	b.n	800ecbc <_strtod_l+0x3d4>
 800ed9c:	3316      	adds	r3, #22
 800ed9e:	dba8      	blt.n	800ecf2 <_strtod_l+0x40a>
 800eda0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eda2:	eba3 0808 	sub.w	r8, r3, r8
 800eda6:	4b34      	ldr	r3, [pc, #208]	@ (800ee78 <_strtod_l+0x590>)
 800eda8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800edac:	e9d8 2300 	ldrd	r2, r3, [r8]
 800edb0:	4650      	mov	r0, sl
 800edb2:	4659      	mov	r1, fp
 800edb4:	f7f1 fd4a 	bl	800084c <__aeabi_ddiv>
 800edb8:	e782      	b.n	800ecc0 <_strtod_l+0x3d8>
 800edba:	2300      	movs	r3, #0
 800edbc:	4f2f      	ldr	r7, [pc, #188]	@ (800ee7c <_strtod_l+0x594>)
 800edbe:	1124      	asrs	r4, r4, #4
 800edc0:	4650      	mov	r0, sl
 800edc2:	4659      	mov	r1, fp
 800edc4:	461e      	mov	r6, r3
 800edc6:	2c01      	cmp	r4, #1
 800edc8:	dc21      	bgt.n	800ee0e <_strtod_l+0x526>
 800edca:	b10b      	cbz	r3, 800edd0 <_strtod_l+0x4e8>
 800edcc:	4682      	mov	sl, r0
 800edce:	468b      	mov	fp, r1
 800edd0:	492a      	ldr	r1, [pc, #168]	@ (800ee7c <_strtod_l+0x594>)
 800edd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800edd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800edda:	4652      	mov	r2, sl
 800eddc:	465b      	mov	r3, fp
 800edde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ede2:	f7f1 fc09 	bl	80005f8 <__aeabi_dmul>
 800ede6:	4b26      	ldr	r3, [pc, #152]	@ (800ee80 <_strtod_l+0x598>)
 800ede8:	460a      	mov	r2, r1
 800edea:	400b      	ands	r3, r1
 800edec:	4925      	ldr	r1, [pc, #148]	@ (800ee84 <_strtod_l+0x59c>)
 800edee:	428b      	cmp	r3, r1
 800edf0:	4682      	mov	sl, r0
 800edf2:	d898      	bhi.n	800ed26 <_strtod_l+0x43e>
 800edf4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800edf8:	428b      	cmp	r3, r1
 800edfa:	bf86      	itte	hi
 800edfc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ee88 <_strtod_l+0x5a0>
 800ee00:	f04f 3aff 	movhi.w	sl, #4294967295
 800ee04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ee08:	2300      	movs	r3, #0
 800ee0a:	9308      	str	r3, [sp, #32]
 800ee0c:	e076      	b.n	800eefc <_strtod_l+0x614>
 800ee0e:	07e2      	lsls	r2, r4, #31
 800ee10:	d504      	bpl.n	800ee1c <_strtod_l+0x534>
 800ee12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee16:	f7f1 fbef 	bl	80005f8 <__aeabi_dmul>
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	3601      	adds	r6, #1
 800ee1e:	1064      	asrs	r4, r4, #1
 800ee20:	3708      	adds	r7, #8
 800ee22:	e7d0      	b.n	800edc6 <_strtod_l+0x4de>
 800ee24:	d0f0      	beq.n	800ee08 <_strtod_l+0x520>
 800ee26:	4264      	negs	r4, r4
 800ee28:	f014 020f 	ands.w	r2, r4, #15
 800ee2c:	d00a      	beq.n	800ee44 <_strtod_l+0x55c>
 800ee2e:	4b12      	ldr	r3, [pc, #72]	@ (800ee78 <_strtod_l+0x590>)
 800ee30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee34:	4650      	mov	r0, sl
 800ee36:	4659      	mov	r1, fp
 800ee38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3c:	f7f1 fd06 	bl	800084c <__aeabi_ddiv>
 800ee40:	4682      	mov	sl, r0
 800ee42:	468b      	mov	fp, r1
 800ee44:	1124      	asrs	r4, r4, #4
 800ee46:	d0df      	beq.n	800ee08 <_strtod_l+0x520>
 800ee48:	2c1f      	cmp	r4, #31
 800ee4a:	dd1f      	ble.n	800ee8c <_strtod_l+0x5a4>
 800ee4c:	2400      	movs	r4, #0
 800ee4e:	46a0      	mov	r8, r4
 800ee50:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ee52:	46a1      	mov	r9, r4
 800ee54:	9a05      	ldr	r2, [sp, #20]
 800ee56:	2322      	movs	r3, #34	@ 0x22
 800ee58:	f04f 0a00 	mov.w	sl, #0
 800ee5c:	f04f 0b00 	mov.w	fp, #0
 800ee60:	6013      	str	r3, [r2, #0]
 800ee62:	e76b      	b.n	800ed3c <_strtod_l+0x454>
 800ee64:	08011759 	.word	0x08011759
 800ee68:	08011a20 	.word	0x08011a20
 800ee6c:	08011751 	.word	0x08011751
 800ee70:	08011788 	.word	0x08011788
 800ee74:	080118c1 	.word	0x080118c1
 800ee78:	08011958 	.word	0x08011958
 800ee7c:	08011930 	.word	0x08011930
 800ee80:	7ff00000 	.word	0x7ff00000
 800ee84:	7ca00000 	.word	0x7ca00000
 800ee88:	7fefffff 	.word	0x7fefffff
 800ee8c:	f014 0310 	ands.w	r3, r4, #16
 800ee90:	bf18      	it	ne
 800ee92:	236a      	movne	r3, #106	@ 0x6a
 800ee94:	4ea9      	ldr	r6, [pc, #676]	@ (800f13c <_strtod_l+0x854>)
 800ee96:	9308      	str	r3, [sp, #32]
 800ee98:	4650      	mov	r0, sl
 800ee9a:	4659      	mov	r1, fp
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	07e7      	lsls	r7, r4, #31
 800eea0:	d504      	bpl.n	800eeac <_strtod_l+0x5c4>
 800eea2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eea6:	f7f1 fba7 	bl	80005f8 <__aeabi_dmul>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	1064      	asrs	r4, r4, #1
 800eeae:	f106 0608 	add.w	r6, r6, #8
 800eeb2:	d1f4      	bne.n	800ee9e <_strtod_l+0x5b6>
 800eeb4:	b10b      	cbz	r3, 800eeba <_strtod_l+0x5d2>
 800eeb6:	4682      	mov	sl, r0
 800eeb8:	468b      	mov	fp, r1
 800eeba:	9b08      	ldr	r3, [sp, #32]
 800eebc:	b1b3      	cbz	r3, 800eeec <_strtod_l+0x604>
 800eebe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800eec2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	4659      	mov	r1, fp
 800eeca:	dd0f      	ble.n	800eeec <_strtod_l+0x604>
 800eecc:	2b1f      	cmp	r3, #31
 800eece:	dd56      	ble.n	800ef7e <_strtod_l+0x696>
 800eed0:	2b34      	cmp	r3, #52	@ 0x34
 800eed2:	bfde      	ittt	le
 800eed4:	f04f 33ff 	movle.w	r3, #4294967295
 800eed8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800eedc:	4093      	lslle	r3, r2
 800eede:	f04f 0a00 	mov.w	sl, #0
 800eee2:	bfcc      	ite	gt
 800eee4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800eee8:	ea03 0b01 	andle.w	fp, r3, r1
 800eeec:	2200      	movs	r2, #0
 800eeee:	2300      	movs	r3, #0
 800eef0:	4650      	mov	r0, sl
 800eef2:	4659      	mov	r1, fp
 800eef4:	f7f1 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d1a7      	bne.n	800ee4c <_strtod_l+0x564>
 800eefc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eefe:	9300      	str	r3, [sp, #0]
 800ef00:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ef02:	9805      	ldr	r0, [sp, #20]
 800ef04:	462b      	mov	r3, r5
 800ef06:	464a      	mov	r2, r9
 800ef08:	f7ff f8ce 	bl	800e0a8 <__s2b>
 800ef0c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	f43f af09 	beq.w	800ed26 <_strtod_l+0x43e>
 800ef14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef18:	2a00      	cmp	r2, #0
 800ef1a:	eba3 0308 	sub.w	r3, r3, r8
 800ef1e:	bfa8      	it	ge
 800ef20:	2300      	movge	r3, #0
 800ef22:	9312      	str	r3, [sp, #72]	@ 0x48
 800ef24:	2400      	movs	r4, #0
 800ef26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ef2a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ef2c:	46a0      	mov	r8, r4
 800ef2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef30:	9805      	ldr	r0, [sp, #20]
 800ef32:	6859      	ldr	r1, [r3, #4]
 800ef34:	f7ff f810 	bl	800df58 <_Balloc>
 800ef38:	4681      	mov	r9, r0
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	f43f aef7 	beq.w	800ed2e <_strtod_l+0x446>
 800ef40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef42:	691a      	ldr	r2, [r3, #16]
 800ef44:	3202      	adds	r2, #2
 800ef46:	f103 010c 	add.w	r1, r3, #12
 800ef4a:	0092      	lsls	r2, r2, #2
 800ef4c:	300c      	adds	r0, #12
 800ef4e:	f7fe f894 	bl	800d07a <memcpy>
 800ef52:	ec4b ab10 	vmov	d0, sl, fp
 800ef56:	9805      	ldr	r0, [sp, #20]
 800ef58:	aa1c      	add	r2, sp, #112	@ 0x70
 800ef5a:	a91b      	add	r1, sp, #108	@ 0x6c
 800ef5c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ef60:	f7ff fbd6 	bl	800e710 <__d2b>
 800ef64:	901a      	str	r0, [sp, #104]	@ 0x68
 800ef66:	2800      	cmp	r0, #0
 800ef68:	f43f aee1 	beq.w	800ed2e <_strtod_l+0x446>
 800ef6c:	9805      	ldr	r0, [sp, #20]
 800ef6e:	2101      	movs	r1, #1
 800ef70:	f7ff f930 	bl	800e1d4 <__i2b>
 800ef74:	4680      	mov	r8, r0
 800ef76:	b948      	cbnz	r0, 800ef8c <_strtod_l+0x6a4>
 800ef78:	f04f 0800 	mov.w	r8, #0
 800ef7c:	e6d7      	b.n	800ed2e <_strtod_l+0x446>
 800ef7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef82:	fa02 f303 	lsl.w	r3, r2, r3
 800ef86:	ea03 0a0a 	and.w	sl, r3, sl
 800ef8a:	e7af      	b.n	800eeec <_strtod_l+0x604>
 800ef8c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ef8e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ef90:	2d00      	cmp	r5, #0
 800ef92:	bfab      	itete	ge
 800ef94:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ef96:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ef98:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ef9a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ef9c:	bfac      	ite	ge
 800ef9e:	18ef      	addge	r7, r5, r3
 800efa0:	1b5e      	sublt	r6, r3, r5
 800efa2:	9b08      	ldr	r3, [sp, #32]
 800efa4:	1aed      	subs	r5, r5, r3
 800efa6:	4415      	add	r5, r2
 800efa8:	4b65      	ldr	r3, [pc, #404]	@ (800f140 <_strtod_l+0x858>)
 800efaa:	3d01      	subs	r5, #1
 800efac:	429d      	cmp	r5, r3
 800efae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800efb2:	da50      	bge.n	800f056 <_strtod_l+0x76e>
 800efb4:	1b5b      	subs	r3, r3, r5
 800efb6:	2b1f      	cmp	r3, #31
 800efb8:	eba2 0203 	sub.w	r2, r2, r3
 800efbc:	f04f 0101 	mov.w	r1, #1
 800efc0:	dc3d      	bgt.n	800f03e <_strtod_l+0x756>
 800efc2:	fa01 f303 	lsl.w	r3, r1, r3
 800efc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800efc8:	2300      	movs	r3, #0
 800efca:	9310      	str	r3, [sp, #64]	@ 0x40
 800efcc:	18bd      	adds	r5, r7, r2
 800efce:	9b08      	ldr	r3, [sp, #32]
 800efd0:	42af      	cmp	r7, r5
 800efd2:	4416      	add	r6, r2
 800efd4:	441e      	add	r6, r3
 800efd6:	463b      	mov	r3, r7
 800efd8:	bfa8      	it	ge
 800efda:	462b      	movge	r3, r5
 800efdc:	42b3      	cmp	r3, r6
 800efde:	bfa8      	it	ge
 800efe0:	4633      	movge	r3, r6
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	bfc2      	ittt	gt
 800efe6:	1aed      	subgt	r5, r5, r3
 800efe8:	1af6      	subgt	r6, r6, r3
 800efea:	1aff      	subgt	r7, r7, r3
 800efec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800efee:	2b00      	cmp	r3, #0
 800eff0:	dd16      	ble.n	800f020 <_strtod_l+0x738>
 800eff2:	4641      	mov	r1, r8
 800eff4:	9805      	ldr	r0, [sp, #20]
 800eff6:	461a      	mov	r2, r3
 800eff8:	f7ff f9a4 	bl	800e344 <__pow5mult>
 800effc:	4680      	mov	r8, r0
 800effe:	2800      	cmp	r0, #0
 800f000:	d0ba      	beq.n	800ef78 <_strtod_l+0x690>
 800f002:	4601      	mov	r1, r0
 800f004:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f006:	9805      	ldr	r0, [sp, #20]
 800f008:	f7ff f8fa 	bl	800e200 <__multiply>
 800f00c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f00e:	2800      	cmp	r0, #0
 800f010:	f43f ae8d 	beq.w	800ed2e <_strtod_l+0x446>
 800f014:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f016:	9805      	ldr	r0, [sp, #20]
 800f018:	f7fe ffde 	bl	800dfd8 <_Bfree>
 800f01c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f01e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f020:	2d00      	cmp	r5, #0
 800f022:	dc1d      	bgt.n	800f060 <_strtod_l+0x778>
 800f024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f026:	2b00      	cmp	r3, #0
 800f028:	dd23      	ble.n	800f072 <_strtod_l+0x78a>
 800f02a:	4649      	mov	r1, r9
 800f02c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f02e:	9805      	ldr	r0, [sp, #20]
 800f030:	f7ff f988 	bl	800e344 <__pow5mult>
 800f034:	4681      	mov	r9, r0
 800f036:	b9e0      	cbnz	r0, 800f072 <_strtod_l+0x78a>
 800f038:	f04f 0900 	mov.w	r9, #0
 800f03c:	e677      	b.n	800ed2e <_strtod_l+0x446>
 800f03e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f042:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f046:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f04a:	35e2      	adds	r5, #226	@ 0xe2
 800f04c:	fa01 f305 	lsl.w	r3, r1, r5
 800f050:	9310      	str	r3, [sp, #64]	@ 0x40
 800f052:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f054:	e7ba      	b.n	800efcc <_strtod_l+0x6e4>
 800f056:	2300      	movs	r3, #0
 800f058:	9310      	str	r3, [sp, #64]	@ 0x40
 800f05a:	2301      	movs	r3, #1
 800f05c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f05e:	e7b5      	b.n	800efcc <_strtod_l+0x6e4>
 800f060:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f062:	9805      	ldr	r0, [sp, #20]
 800f064:	462a      	mov	r2, r5
 800f066:	f7ff f9c7 	bl	800e3f8 <__lshift>
 800f06a:	901a      	str	r0, [sp, #104]	@ 0x68
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d1d9      	bne.n	800f024 <_strtod_l+0x73c>
 800f070:	e65d      	b.n	800ed2e <_strtod_l+0x446>
 800f072:	2e00      	cmp	r6, #0
 800f074:	dd07      	ble.n	800f086 <_strtod_l+0x79e>
 800f076:	4649      	mov	r1, r9
 800f078:	9805      	ldr	r0, [sp, #20]
 800f07a:	4632      	mov	r2, r6
 800f07c:	f7ff f9bc 	bl	800e3f8 <__lshift>
 800f080:	4681      	mov	r9, r0
 800f082:	2800      	cmp	r0, #0
 800f084:	d0d8      	beq.n	800f038 <_strtod_l+0x750>
 800f086:	2f00      	cmp	r7, #0
 800f088:	dd08      	ble.n	800f09c <_strtod_l+0x7b4>
 800f08a:	4641      	mov	r1, r8
 800f08c:	9805      	ldr	r0, [sp, #20]
 800f08e:	463a      	mov	r2, r7
 800f090:	f7ff f9b2 	bl	800e3f8 <__lshift>
 800f094:	4680      	mov	r8, r0
 800f096:	2800      	cmp	r0, #0
 800f098:	f43f ae49 	beq.w	800ed2e <_strtod_l+0x446>
 800f09c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f09e:	9805      	ldr	r0, [sp, #20]
 800f0a0:	464a      	mov	r2, r9
 800f0a2:	f7ff fa31 	bl	800e508 <__mdiff>
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	f43f ae40 	beq.w	800ed2e <_strtod_l+0x446>
 800f0ae:	68c3      	ldr	r3, [r0, #12]
 800f0b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	60c3      	str	r3, [r0, #12]
 800f0b6:	4641      	mov	r1, r8
 800f0b8:	f7ff fa0a 	bl	800e4d0 <__mcmp>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	da45      	bge.n	800f14c <_strtod_l+0x864>
 800f0c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0c2:	ea53 030a 	orrs.w	r3, r3, sl
 800f0c6:	d16b      	bne.n	800f1a0 <_strtod_l+0x8b8>
 800f0c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d167      	bne.n	800f1a0 <_strtod_l+0x8b8>
 800f0d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f0d4:	0d1b      	lsrs	r3, r3, #20
 800f0d6:	051b      	lsls	r3, r3, #20
 800f0d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f0dc:	d960      	bls.n	800f1a0 <_strtod_l+0x8b8>
 800f0de:	6963      	ldr	r3, [r4, #20]
 800f0e0:	b913      	cbnz	r3, 800f0e8 <_strtod_l+0x800>
 800f0e2:	6923      	ldr	r3, [r4, #16]
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	dd5b      	ble.n	800f1a0 <_strtod_l+0x8b8>
 800f0e8:	4621      	mov	r1, r4
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	9805      	ldr	r0, [sp, #20]
 800f0ee:	f7ff f983 	bl	800e3f8 <__lshift>
 800f0f2:	4641      	mov	r1, r8
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	f7ff f9eb 	bl	800e4d0 <__mcmp>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	dd50      	ble.n	800f1a0 <_strtod_l+0x8b8>
 800f0fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f102:	9a08      	ldr	r2, [sp, #32]
 800f104:	0d1b      	lsrs	r3, r3, #20
 800f106:	051b      	lsls	r3, r3, #20
 800f108:	2a00      	cmp	r2, #0
 800f10a:	d06a      	beq.n	800f1e2 <_strtod_l+0x8fa>
 800f10c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f110:	d867      	bhi.n	800f1e2 <_strtod_l+0x8fa>
 800f112:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f116:	f67f ae9d 	bls.w	800ee54 <_strtod_l+0x56c>
 800f11a:	4b0a      	ldr	r3, [pc, #40]	@ (800f144 <_strtod_l+0x85c>)
 800f11c:	4650      	mov	r0, sl
 800f11e:	4659      	mov	r1, fp
 800f120:	2200      	movs	r2, #0
 800f122:	f7f1 fa69 	bl	80005f8 <__aeabi_dmul>
 800f126:	4b08      	ldr	r3, [pc, #32]	@ (800f148 <_strtod_l+0x860>)
 800f128:	400b      	ands	r3, r1
 800f12a:	4682      	mov	sl, r0
 800f12c:	468b      	mov	fp, r1
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f47f ae08 	bne.w	800ed44 <_strtod_l+0x45c>
 800f134:	9a05      	ldr	r2, [sp, #20]
 800f136:	2322      	movs	r3, #34	@ 0x22
 800f138:	6013      	str	r3, [r2, #0]
 800f13a:	e603      	b.n	800ed44 <_strtod_l+0x45c>
 800f13c:	08011a48 	.word	0x08011a48
 800f140:	fffffc02 	.word	0xfffffc02
 800f144:	39500000 	.word	0x39500000
 800f148:	7ff00000 	.word	0x7ff00000
 800f14c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f150:	d165      	bne.n	800f21e <_strtod_l+0x936>
 800f152:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f154:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f158:	b35a      	cbz	r2, 800f1b2 <_strtod_l+0x8ca>
 800f15a:	4a9f      	ldr	r2, [pc, #636]	@ (800f3d8 <_strtod_l+0xaf0>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d12b      	bne.n	800f1b8 <_strtod_l+0x8d0>
 800f160:	9b08      	ldr	r3, [sp, #32]
 800f162:	4651      	mov	r1, sl
 800f164:	b303      	cbz	r3, 800f1a8 <_strtod_l+0x8c0>
 800f166:	4b9d      	ldr	r3, [pc, #628]	@ (800f3dc <_strtod_l+0xaf4>)
 800f168:	465a      	mov	r2, fp
 800f16a:	4013      	ands	r3, r2
 800f16c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f170:	f04f 32ff 	mov.w	r2, #4294967295
 800f174:	d81b      	bhi.n	800f1ae <_strtod_l+0x8c6>
 800f176:	0d1b      	lsrs	r3, r3, #20
 800f178:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f17c:	fa02 f303 	lsl.w	r3, r2, r3
 800f180:	4299      	cmp	r1, r3
 800f182:	d119      	bne.n	800f1b8 <_strtod_l+0x8d0>
 800f184:	4b96      	ldr	r3, [pc, #600]	@ (800f3e0 <_strtod_l+0xaf8>)
 800f186:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f188:	429a      	cmp	r2, r3
 800f18a:	d102      	bne.n	800f192 <_strtod_l+0x8aa>
 800f18c:	3101      	adds	r1, #1
 800f18e:	f43f adce 	beq.w	800ed2e <_strtod_l+0x446>
 800f192:	4b92      	ldr	r3, [pc, #584]	@ (800f3dc <_strtod_l+0xaf4>)
 800f194:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f196:	401a      	ands	r2, r3
 800f198:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f19c:	f04f 0a00 	mov.w	sl, #0
 800f1a0:	9b08      	ldr	r3, [sp, #32]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1b9      	bne.n	800f11a <_strtod_l+0x832>
 800f1a6:	e5cd      	b.n	800ed44 <_strtod_l+0x45c>
 800f1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ac:	e7e8      	b.n	800f180 <_strtod_l+0x898>
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	e7e6      	b.n	800f180 <_strtod_l+0x898>
 800f1b2:	ea53 030a 	orrs.w	r3, r3, sl
 800f1b6:	d0a2      	beq.n	800f0fe <_strtod_l+0x816>
 800f1b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f1ba:	b1db      	cbz	r3, 800f1f4 <_strtod_l+0x90c>
 800f1bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f1be:	4213      	tst	r3, r2
 800f1c0:	d0ee      	beq.n	800f1a0 <_strtod_l+0x8b8>
 800f1c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1c4:	9a08      	ldr	r2, [sp, #32]
 800f1c6:	4650      	mov	r0, sl
 800f1c8:	4659      	mov	r1, fp
 800f1ca:	b1bb      	cbz	r3, 800f1fc <_strtod_l+0x914>
 800f1cc:	f7ff fb6e 	bl	800e8ac <sulp>
 800f1d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1d4:	ec53 2b10 	vmov	r2, r3, d0
 800f1d8:	f7f1 f858 	bl	800028c <__adddf3>
 800f1dc:	4682      	mov	sl, r0
 800f1de:	468b      	mov	fp, r1
 800f1e0:	e7de      	b.n	800f1a0 <_strtod_l+0x8b8>
 800f1e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f1e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f1ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f1ee:	f04f 3aff 	mov.w	sl, #4294967295
 800f1f2:	e7d5      	b.n	800f1a0 <_strtod_l+0x8b8>
 800f1f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f1f6:	ea13 0f0a 	tst.w	r3, sl
 800f1fa:	e7e1      	b.n	800f1c0 <_strtod_l+0x8d8>
 800f1fc:	f7ff fb56 	bl	800e8ac <sulp>
 800f200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f204:	ec53 2b10 	vmov	r2, r3, d0
 800f208:	f7f1 f83e 	bl	8000288 <__aeabi_dsub>
 800f20c:	2200      	movs	r2, #0
 800f20e:	2300      	movs	r3, #0
 800f210:	4682      	mov	sl, r0
 800f212:	468b      	mov	fp, r1
 800f214:	f7f1 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 800f218:	2800      	cmp	r0, #0
 800f21a:	d0c1      	beq.n	800f1a0 <_strtod_l+0x8b8>
 800f21c:	e61a      	b.n	800ee54 <_strtod_l+0x56c>
 800f21e:	4641      	mov	r1, r8
 800f220:	4620      	mov	r0, r4
 800f222:	f7ff facd 	bl	800e7c0 <__ratio>
 800f226:	ec57 6b10 	vmov	r6, r7, d0
 800f22a:	2200      	movs	r2, #0
 800f22c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f230:	4630      	mov	r0, r6
 800f232:	4639      	mov	r1, r7
 800f234:	f7f1 fc5c 	bl	8000af0 <__aeabi_dcmple>
 800f238:	2800      	cmp	r0, #0
 800f23a:	d06f      	beq.n	800f31c <_strtod_l+0xa34>
 800f23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d17a      	bne.n	800f338 <_strtod_l+0xa50>
 800f242:	f1ba 0f00 	cmp.w	sl, #0
 800f246:	d158      	bne.n	800f2fa <_strtod_l+0xa12>
 800f248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f24a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d15a      	bne.n	800f308 <_strtod_l+0xa20>
 800f252:	4b64      	ldr	r3, [pc, #400]	@ (800f3e4 <_strtod_l+0xafc>)
 800f254:	2200      	movs	r2, #0
 800f256:	4630      	mov	r0, r6
 800f258:	4639      	mov	r1, r7
 800f25a:	f7f1 fc3f 	bl	8000adc <__aeabi_dcmplt>
 800f25e:	2800      	cmp	r0, #0
 800f260:	d159      	bne.n	800f316 <_strtod_l+0xa2e>
 800f262:	4630      	mov	r0, r6
 800f264:	4639      	mov	r1, r7
 800f266:	4b60      	ldr	r3, [pc, #384]	@ (800f3e8 <_strtod_l+0xb00>)
 800f268:	2200      	movs	r2, #0
 800f26a:	f7f1 f9c5 	bl	80005f8 <__aeabi_dmul>
 800f26e:	4606      	mov	r6, r0
 800f270:	460f      	mov	r7, r1
 800f272:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f276:	9606      	str	r6, [sp, #24]
 800f278:	9307      	str	r3, [sp, #28]
 800f27a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f27e:	4d57      	ldr	r5, [pc, #348]	@ (800f3dc <_strtod_l+0xaf4>)
 800f280:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f286:	401d      	ands	r5, r3
 800f288:	4b58      	ldr	r3, [pc, #352]	@ (800f3ec <_strtod_l+0xb04>)
 800f28a:	429d      	cmp	r5, r3
 800f28c:	f040 80b2 	bne.w	800f3f4 <_strtod_l+0xb0c>
 800f290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f292:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f296:	ec4b ab10 	vmov	d0, sl, fp
 800f29a:	f7ff f9c9 	bl	800e630 <__ulp>
 800f29e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f2a2:	ec51 0b10 	vmov	r0, r1, d0
 800f2a6:	f7f1 f9a7 	bl	80005f8 <__aeabi_dmul>
 800f2aa:	4652      	mov	r2, sl
 800f2ac:	465b      	mov	r3, fp
 800f2ae:	f7f0 ffed 	bl	800028c <__adddf3>
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	4949      	ldr	r1, [pc, #292]	@ (800f3dc <_strtod_l+0xaf4>)
 800f2b6:	4a4e      	ldr	r2, [pc, #312]	@ (800f3f0 <_strtod_l+0xb08>)
 800f2b8:	4019      	ands	r1, r3
 800f2ba:	4291      	cmp	r1, r2
 800f2bc:	4682      	mov	sl, r0
 800f2be:	d942      	bls.n	800f346 <_strtod_l+0xa5e>
 800f2c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f2c2:	4b47      	ldr	r3, [pc, #284]	@ (800f3e0 <_strtod_l+0xaf8>)
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d103      	bne.n	800f2d0 <_strtod_l+0x9e8>
 800f2c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	f43f ad2f 	beq.w	800ed2e <_strtod_l+0x446>
 800f2d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f3e0 <_strtod_l+0xaf8>
 800f2d4:	f04f 3aff 	mov.w	sl, #4294967295
 800f2d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f2da:	9805      	ldr	r0, [sp, #20]
 800f2dc:	f7fe fe7c 	bl	800dfd8 <_Bfree>
 800f2e0:	9805      	ldr	r0, [sp, #20]
 800f2e2:	4649      	mov	r1, r9
 800f2e4:	f7fe fe78 	bl	800dfd8 <_Bfree>
 800f2e8:	9805      	ldr	r0, [sp, #20]
 800f2ea:	4641      	mov	r1, r8
 800f2ec:	f7fe fe74 	bl	800dfd8 <_Bfree>
 800f2f0:	9805      	ldr	r0, [sp, #20]
 800f2f2:	4621      	mov	r1, r4
 800f2f4:	f7fe fe70 	bl	800dfd8 <_Bfree>
 800f2f8:	e619      	b.n	800ef2e <_strtod_l+0x646>
 800f2fa:	f1ba 0f01 	cmp.w	sl, #1
 800f2fe:	d103      	bne.n	800f308 <_strtod_l+0xa20>
 800f300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f302:	2b00      	cmp	r3, #0
 800f304:	f43f ada6 	beq.w	800ee54 <_strtod_l+0x56c>
 800f308:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f3b8 <_strtod_l+0xad0>
 800f30c:	4f35      	ldr	r7, [pc, #212]	@ (800f3e4 <_strtod_l+0xafc>)
 800f30e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f312:	2600      	movs	r6, #0
 800f314:	e7b1      	b.n	800f27a <_strtod_l+0x992>
 800f316:	4f34      	ldr	r7, [pc, #208]	@ (800f3e8 <_strtod_l+0xb00>)
 800f318:	2600      	movs	r6, #0
 800f31a:	e7aa      	b.n	800f272 <_strtod_l+0x98a>
 800f31c:	4b32      	ldr	r3, [pc, #200]	@ (800f3e8 <_strtod_l+0xb00>)
 800f31e:	4630      	mov	r0, r6
 800f320:	4639      	mov	r1, r7
 800f322:	2200      	movs	r2, #0
 800f324:	f7f1 f968 	bl	80005f8 <__aeabi_dmul>
 800f328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f32a:	4606      	mov	r6, r0
 800f32c:	460f      	mov	r7, r1
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d09f      	beq.n	800f272 <_strtod_l+0x98a>
 800f332:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f336:	e7a0      	b.n	800f27a <_strtod_l+0x992>
 800f338:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f3c0 <_strtod_l+0xad8>
 800f33c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f340:	ec57 6b17 	vmov	r6, r7, d7
 800f344:	e799      	b.n	800f27a <_strtod_l+0x992>
 800f346:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f34a:	9b08      	ldr	r3, [sp, #32]
 800f34c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f350:	2b00      	cmp	r3, #0
 800f352:	d1c1      	bne.n	800f2d8 <_strtod_l+0x9f0>
 800f354:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f358:	0d1b      	lsrs	r3, r3, #20
 800f35a:	051b      	lsls	r3, r3, #20
 800f35c:	429d      	cmp	r5, r3
 800f35e:	d1bb      	bne.n	800f2d8 <_strtod_l+0x9f0>
 800f360:	4630      	mov	r0, r6
 800f362:	4639      	mov	r1, r7
 800f364:	f7f1 fca8 	bl	8000cb8 <__aeabi_d2lz>
 800f368:	f7f1 f918 	bl	800059c <__aeabi_l2d>
 800f36c:	4602      	mov	r2, r0
 800f36e:	460b      	mov	r3, r1
 800f370:	4630      	mov	r0, r6
 800f372:	4639      	mov	r1, r7
 800f374:	f7f0 ff88 	bl	8000288 <__aeabi_dsub>
 800f378:	460b      	mov	r3, r1
 800f37a:	4602      	mov	r2, r0
 800f37c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f380:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f386:	ea46 060a 	orr.w	r6, r6, sl
 800f38a:	431e      	orrs	r6, r3
 800f38c:	d06f      	beq.n	800f46e <_strtod_l+0xb86>
 800f38e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f3c8 <_strtod_l+0xae0>)
 800f390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f394:	f7f1 fba2 	bl	8000adc <__aeabi_dcmplt>
 800f398:	2800      	cmp	r0, #0
 800f39a:	f47f acd3 	bne.w	800ed44 <_strtod_l+0x45c>
 800f39e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f3d0 <_strtod_l+0xae8>)
 800f3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3a8:	f7f1 fbb6 	bl	8000b18 <__aeabi_dcmpgt>
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d093      	beq.n	800f2d8 <_strtod_l+0x9f0>
 800f3b0:	e4c8      	b.n	800ed44 <_strtod_l+0x45c>
 800f3b2:	bf00      	nop
 800f3b4:	f3af 8000 	nop.w
 800f3b8:	00000000 	.word	0x00000000
 800f3bc:	bff00000 	.word	0xbff00000
 800f3c0:	00000000 	.word	0x00000000
 800f3c4:	3ff00000 	.word	0x3ff00000
 800f3c8:	94a03595 	.word	0x94a03595
 800f3cc:	3fdfffff 	.word	0x3fdfffff
 800f3d0:	35afe535 	.word	0x35afe535
 800f3d4:	3fe00000 	.word	0x3fe00000
 800f3d8:	000fffff 	.word	0x000fffff
 800f3dc:	7ff00000 	.word	0x7ff00000
 800f3e0:	7fefffff 	.word	0x7fefffff
 800f3e4:	3ff00000 	.word	0x3ff00000
 800f3e8:	3fe00000 	.word	0x3fe00000
 800f3ec:	7fe00000 	.word	0x7fe00000
 800f3f0:	7c9fffff 	.word	0x7c9fffff
 800f3f4:	9b08      	ldr	r3, [sp, #32]
 800f3f6:	b323      	cbz	r3, 800f442 <_strtod_l+0xb5a>
 800f3f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f3fc:	d821      	bhi.n	800f442 <_strtod_l+0xb5a>
 800f3fe:	a328      	add	r3, pc, #160	@ (adr r3, 800f4a0 <_strtod_l+0xbb8>)
 800f400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f404:	4630      	mov	r0, r6
 800f406:	4639      	mov	r1, r7
 800f408:	f7f1 fb72 	bl	8000af0 <__aeabi_dcmple>
 800f40c:	b1a0      	cbz	r0, 800f438 <_strtod_l+0xb50>
 800f40e:	4639      	mov	r1, r7
 800f410:	4630      	mov	r0, r6
 800f412:	f7f1 fbc9 	bl	8000ba8 <__aeabi_d2uiz>
 800f416:	2801      	cmp	r0, #1
 800f418:	bf38      	it	cc
 800f41a:	2001      	movcc	r0, #1
 800f41c:	f7f1 f872 	bl	8000504 <__aeabi_ui2d>
 800f420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f422:	4606      	mov	r6, r0
 800f424:	460f      	mov	r7, r1
 800f426:	b9fb      	cbnz	r3, 800f468 <_strtod_l+0xb80>
 800f428:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f42c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f42e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f430:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f434:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f438:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f43a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f43e:	1b5b      	subs	r3, r3, r5
 800f440:	9311      	str	r3, [sp, #68]	@ 0x44
 800f442:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f446:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f44a:	f7ff f8f1 	bl	800e630 <__ulp>
 800f44e:	4650      	mov	r0, sl
 800f450:	ec53 2b10 	vmov	r2, r3, d0
 800f454:	4659      	mov	r1, fp
 800f456:	f7f1 f8cf 	bl	80005f8 <__aeabi_dmul>
 800f45a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f45e:	f7f0 ff15 	bl	800028c <__adddf3>
 800f462:	4682      	mov	sl, r0
 800f464:	468b      	mov	fp, r1
 800f466:	e770      	b.n	800f34a <_strtod_l+0xa62>
 800f468:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f46c:	e7e0      	b.n	800f430 <_strtod_l+0xb48>
 800f46e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f4a8 <_strtod_l+0xbc0>)
 800f470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f474:	f7f1 fb32 	bl	8000adc <__aeabi_dcmplt>
 800f478:	e798      	b.n	800f3ac <_strtod_l+0xac4>
 800f47a:	2300      	movs	r3, #0
 800f47c:	930e      	str	r3, [sp, #56]	@ 0x38
 800f47e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f480:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f482:	6013      	str	r3, [r2, #0]
 800f484:	f7ff ba6d 	b.w	800e962 <_strtod_l+0x7a>
 800f488:	2a65      	cmp	r2, #101	@ 0x65
 800f48a:	f43f ab68 	beq.w	800eb5e <_strtod_l+0x276>
 800f48e:	2a45      	cmp	r2, #69	@ 0x45
 800f490:	f43f ab65 	beq.w	800eb5e <_strtod_l+0x276>
 800f494:	2301      	movs	r3, #1
 800f496:	f7ff bba0 	b.w	800ebda <_strtod_l+0x2f2>
 800f49a:	bf00      	nop
 800f49c:	f3af 8000 	nop.w
 800f4a0:	ffc00000 	.word	0xffc00000
 800f4a4:	41dfffff 	.word	0x41dfffff
 800f4a8:	94a03595 	.word	0x94a03595
 800f4ac:	3fcfffff 	.word	0x3fcfffff

0800f4b0 <_strtod_r>:
 800f4b0:	4b01      	ldr	r3, [pc, #4]	@ (800f4b8 <_strtod_r+0x8>)
 800f4b2:	f7ff ba19 	b.w	800e8e8 <_strtod_l>
 800f4b6:	bf00      	nop
 800f4b8:	200000b0 	.word	0x200000b0

0800f4bc <_strtol_l.isra.0>:
 800f4bc:	2b24      	cmp	r3, #36	@ 0x24
 800f4be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4c2:	4686      	mov	lr, r0
 800f4c4:	4690      	mov	r8, r2
 800f4c6:	d801      	bhi.n	800f4cc <_strtol_l.isra.0+0x10>
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d106      	bne.n	800f4da <_strtol_l.isra.0+0x1e>
 800f4cc:	f7fd fda8 	bl	800d020 <__errno>
 800f4d0:	2316      	movs	r3, #22
 800f4d2:	6003      	str	r3, [r0, #0]
 800f4d4:	2000      	movs	r0, #0
 800f4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4da:	4834      	ldr	r0, [pc, #208]	@ (800f5ac <_strtol_l.isra.0+0xf0>)
 800f4dc:	460d      	mov	r5, r1
 800f4de:	462a      	mov	r2, r5
 800f4e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f4e4:	5d06      	ldrb	r6, [r0, r4]
 800f4e6:	f016 0608 	ands.w	r6, r6, #8
 800f4ea:	d1f8      	bne.n	800f4de <_strtol_l.isra.0+0x22>
 800f4ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800f4ee:	d110      	bne.n	800f512 <_strtol_l.isra.0+0x56>
 800f4f0:	782c      	ldrb	r4, [r5, #0]
 800f4f2:	2601      	movs	r6, #1
 800f4f4:	1c95      	adds	r5, r2, #2
 800f4f6:	f033 0210 	bics.w	r2, r3, #16
 800f4fa:	d115      	bne.n	800f528 <_strtol_l.isra.0+0x6c>
 800f4fc:	2c30      	cmp	r4, #48	@ 0x30
 800f4fe:	d10d      	bne.n	800f51c <_strtol_l.isra.0+0x60>
 800f500:	782a      	ldrb	r2, [r5, #0]
 800f502:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f506:	2a58      	cmp	r2, #88	@ 0x58
 800f508:	d108      	bne.n	800f51c <_strtol_l.isra.0+0x60>
 800f50a:	786c      	ldrb	r4, [r5, #1]
 800f50c:	3502      	adds	r5, #2
 800f50e:	2310      	movs	r3, #16
 800f510:	e00a      	b.n	800f528 <_strtol_l.isra.0+0x6c>
 800f512:	2c2b      	cmp	r4, #43	@ 0x2b
 800f514:	bf04      	itt	eq
 800f516:	782c      	ldrbeq	r4, [r5, #0]
 800f518:	1c95      	addeq	r5, r2, #2
 800f51a:	e7ec      	b.n	800f4f6 <_strtol_l.isra.0+0x3a>
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d1f6      	bne.n	800f50e <_strtol_l.isra.0+0x52>
 800f520:	2c30      	cmp	r4, #48	@ 0x30
 800f522:	bf14      	ite	ne
 800f524:	230a      	movne	r3, #10
 800f526:	2308      	moveq	r3, #8
 800f528:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f52c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f530:	2200      	movs	r2, #0
 800f532:	fbbc f9f3 	udiv	r9, ip, r3
 800f536:	4610      	mov	r0, r2
 800f538:	fb03 ca19 	mls	sl, r3, r9, ip
 800f53c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f540:	2f09      	cmp	r7, #9
 800f542:	d80f      	bhi.n	800f564 <_strtol_l.isra.0+0xa8>
 800f544:	463c      	mov	r4, r7
 800f546:	42a3      	cmp	r3, r4
 800f548:	dd1b      	ble.n	800f582 <_strtol_l.isra.0+0xc6>
 800f54a:	1c57      	adds	r7, r2, #1
 800f54c:	d007      	beq.n	800f55e <_strtol_l.isra.0+0xa2>
 800f54e:	4581      	cmp	r9, r0
 800f550:	d314      	bcc.n	800f57c <_strtol_l.isra.0+0xc0>
 800f552:	d101      	bne.n	800f558 <_strtol_l.isra.0+0x9c>
 800f554:	45a2      	cmp	sl, r4
 800f556:	db11      	blt.n	800f57c <_strtol_l.isra.0+0xc0>
 800f558:	fb00 4003 	mla	r0, r0, r3, r4
 800f55c:	2201      	movs	r2, #1
 800f55e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f562:	e7eb      	b.n	800f53c <_strtol_l.isra.0+0x80>
 800f564:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f568:	2f19      	cmp	r7, #25
 800f56a:	d801      	bhi.n	800f570 <_strtol_l.isra.0+0xb4>
 800f56c:	3c37      	subs	r4, #55	@ 0x37
 800f56e:	e7ea      	b.n	800f546 <_strtol_l.isra.0+0x8a>
 800f570:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f574:	2f19      	cmp	r7, #25
 800f576:	d804      	bhi.n	800f582 <_strtol_l.isra.0+0xc6>
 800f578:	3c57      	subs	r4, #87	@ 0x57
 800f57a:	e7e4      	b.n	800f546 <_strtol_l.isra.0+0x8a>
 800f57c:	f04f 32ff 	mov.w	r2, #4294967295
 800f580:	e7ed      	b.n	800f55e <_strtol_l.isra.0+0xa2>
 800f582:	1c53      	adds	r3, r2, #1
 800f584:	d108      	bne.n	800f598 <_strtol_l.isra.0+0xdc>
 800f586:	2322      	movs	r3, #34	@ 0x22
 800f588:	f8ce 3000 	str.w	r3, [lr]
 800f58c:	4660      	mov	r0, ip
 800f58e:	f1b8 0f00 	cmp.w	r8, #0
 800f592:	d0a0      	beq.n	800f4d6 <_strtol_l.isra.0+0x1a>
 800f594:	1e69      	subs	r1, r5, #1
 800f596:	e006      	b.n	800f5a6 <_strtol_l.isra.0+0xea>
 800f598:	b106      	cbz	r6, 800f59c <_strtol_l.isra.0+0xe0>
 800f59a:	4240      	negs	r0, r0
 800f59c:	f1b8 0f00 	cmp.w	r8, #0
 800f5a0:	d099      	beq.n	800f4d6 <_strtol_l.isra.0+0x1a>
 800f5a2:	2a00      	cmp	r2, #0
 800f5a4:	d1f6      	bne.n	800f594 <_strtol_l.isra.0+0xd8>
 800f5a6:	f8c8 1000 	str.w	r1, [r8]
 800f5aa:	e794      	b.n	800f4d6 <_strtol_l.isra.0+0x1a>
 800f5ac:	08011a71 	.word	0x08011a71

0800f5b0 <_strtol_r>:
 800f5b0:	f7ff bf84 	b.w	800f4bc <_strtol_l.isra.0>

0800f5b4 <__ssputs_r>:
 800f5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b8:	688e      	ldr	r6, [r1, #8]
 800f5ba:	461f      	mov	r7, r3
 800f5bc:	42be      	cmp	r6, r7
 800f5be:	680b      	ldr	r3, [r1, #0]
 800f5c0:	4682      	mov	sl, r0
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	4690      	mov	r8, r2
 800f5c6:	d82d      	bhi.n	800f624 <__ssputs_r+0x70>
 800f5c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f5d0:	d026      	beq.n	800f620 <__ssputs_r+0x6c>
 800f5d2:	6965      	ldr	r5, [r4, #20]
 800f5d4:	6909      	ldr	r1, [r1, #16]
 800f5d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5da:	eba3 0901 	sub.w	r9, r3, r1
 800f5de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5e2:	1c7b      	adds	r3, r7, #1
 800f5e4:	444b      	add	r3, r9
 800f5e6:	106d      	asrs	r5, r5, #1
 800f5e8:	429d      	cmp	r5, r3
 800f5ea:	bf38      	it	cc
 800f5ec:	461d      	movcc	r5, r3
 800f5ee:	0553      	lsls	r3, r2, #21
 800f5f0:	d527      	bpl.n	800f642 <__ssputs_r+0x8e>
 800f5f2:	4629      	mov	r1, r5
 800f5f4:	f7fe fc24 	bl	800de40 <_malloc_r>
 800f5f8:	4606      	mov	r6, r0
 800f5fa:	b360      	cbz	r0, 800f656 <__ssputs_r+0xa2>
 800f5fc:	6921      	ldr	r1, [r4, #16]
 800f5fe:	464a      	mov	r2, r9
 800f600:	f7fd fd3b 	bl	800d07a <memcpy>
 800f604:	89a3      	ldrh	r3, [r4, #12]
 800f606:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f60a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f60e:	81a3      	strh	r3, [r4, #12]
 800f610:	6126      	str	r6, [r4, #16]
 800f612:	6165      	str	r5, [r4, #20]
 800f614:	444e      	add	r6, r9
 800f616:	eba5 0509 	sub.w	r5, r5, r9
 800f61a:	6026      	str	r6, [r4, #0]
 800f61c:	60a5      	str	r5, [r4, #8]
 800f61e:	463e      	mov	r6, r7
 800f620:	42be      	cmp	r6, r7
 800f622:	d900      	bls.n	800f626 <__ssputs_r+0x72>
 800f624:	463e      	mov	r6, r7
 800f626:	6820      	ldr	r0, [r4, #0]
 800f628:	4632      	mov	r2, r6
 800f62a:	4641      	mov	r1, r8
 800f62c:	f000 f9c6 	bl	800f9bc <memmove>
 800f630:	68a3      	ldr	r3, [r4, #8]
 800f632:	1b9b      	subs	r3, r3, r6
 800f634:	60a3      	str	r3, [r4, #8]
 800f636:	6823      	ldr	r3, [r4, #0]
 800f638:	4433      	add	r3, r6
 800f63a:	6023      	str	r3, [r4, #0]
 800f63c:	2000      	movs	r0, #0
 800f63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f642:	462a      	mov	r2, r5
 800f644:	f000 fd7d 	bl	8010142 <_realloc_r>
 800f648:	4606      	mov	r6, r0
 800f64a:	2800      	cmp	r0, #0
 800f64c:	d1e0      	bne.n	800f610 <__ssputs_r+0x5c>
 800f64e:	6921      	ldr	r1, [r4, #16]
 800f650:	4650      	mov	r0, sl
 800f652:	f7fe fb81 	bl	800dd58 <_free_r>
 800f656:	230c      	movs	r3, #12
 800f658:	f8ca 3000 	str.w	r3, [sl]
 800f65c:	89a3      	ldrh	r3, [r4, #12]
 800f65e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f662:	81a3      	strh	r3, [r4, #12]
 800f664:	f04f 30ff 	mov.w	r0, #4294967295
 800f668:	e7e9      	b.n	800f63e <__ssputs_r+0x8a>
	...

0800f66c <_svfiprintf_r>:
 800f66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f670:	4698      	mov	r8, r3
 800f672:	898b      	ldrh	r3, [r1, #12]
 800f674:	061b      	lsls	r3, r3, #24
 800f676:	b09d      	sub	sp, #116	@ 0x74
 800f678:	4607      	mov	r7, r0
 800f67a:	460d      	mov	r5, r1
 800f67c:	4614      	mov	r4, r2
 800f67e:	d510      	bpl.n	800f6a2 <_svfiprintf_r+0x36>
 800f680:	690b      	ldr	r3, [r1, #16]
 800f682:	b973      	cbnz	r3, 800f6a2 <_svfiprintf_r+0x36>
 800f684:	2140      	movs	r1, #64	@ 0x40
 800f686:	f7fe fbdb 	bl	800de40 <_malloc_r>
 800f68a:	6028      	str	r0, [r5, #0]
 800f68c:	6128      	str	r0, [r5, #16]
 800f68e:	b930      	cbnz	r0, 800f69e <_svfiprintf_r+0x32>
 800f690:	230c      	movs	r3, #12
 800f692:	603b      	str	r3, [r7, #0]
 800f694:	f04f 30ff 	mov.w	r0, #4294967295
 800f698:	b01d      	add	sp, #116	@ 0x74
 800f69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f69e:	2340      	movs	r3, #64	@ 0x40
 800f6a0:	616b      	str	r3, [r5, #20]
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6a6:	2320      	movs	r3, #32
 800f6a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6b0:	2330      	movs	r3, #48	@ 0x30
 800f6b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f850 <_svfiprintf_r+0x1e4>
 800f6b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f6ba:	f04f 0901 	mov.w	r9, #1
 800f6be:	4623      	mov	r3, r4
 800f6c0:	469a      	mov	sl, r3
 800f6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6c6:	b10a      	cbz	r2, 800f6cc <_svfiprintf_r+0x60>
 800f6c8:	2a25      	cmp	r2, #37	@ 0x25
 800f6ca:	d1f9      	bne.n	800f6c0 <_svfiprintf_r+0x54>
 800f6cc:	ebba 0b04 	subs.w	fp, sl, r4
 800f6d0:	d00b      	beq.n	800f6ea <_svfiprintf_r+0x7e>
 800f6d2:	465b      	mov	r3, fp
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	4638      	mov	r0, r7
 800f6da:	f7ff ff6b 	bl	800f5b4 <__ssputs_r>
 800f6de:	3001      	adds	r0, #1
 800f6e0:	f000 80a7 	beq.w	800f832 <_svfiprintf_r+0x1c6>
 800f6e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6e6:	445a      	add	r2, fp
 800f6e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f000 809f 	beq.w	800f832 <_svfiprintf_r+0x1c6>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6fe:	f10a 0a01 	add.w	sl, sl, #1
 800f702:	9304      	str	r3, [sp, #16]
 800f704:	9307      	str	r3, [sp, #28]
 800f706:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f70a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f70c:	4654      	mov	r4, sl
 800f70e:	2205      	movs	r2, #5
 800f710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f714:	484e      	ldr	r0, [pc, #312]	@ (800f850 <_svfiprintf_r+0x1e4>)
 800f716:	f7f0 fd5b 	bl	80001d0 <memchr>
 800f71a:	9a04      	ldr	r2, [sp, #16]
 800f71c:	b9d8      	cbnz	r0, 800f756 <_svfiprintf_r+0xea>
 800f71e:	06d0      	lsls	r0, r2, #27
 800f720:	bf44      	itt	mi
 800f722:	2320      	movmi	r3, #32
 800f724:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f728:	0711      	lsls	r1, r2, #28
 800f72a:	bf44      	itt	mi
 800f72c:	232b      	movmi	r3, #43	@ 0x2b
 800f72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f732:	f89a 3000 	ldrb.w	r3, [sl]
 800f736:	2b2a      	cmp	r3, #42	@ 0x2a
 800f738:	d015      	beq.n	800f766 <_svfiprintf_r+0xfa>
 800f73a:	9a07      	ldr	r2, [sp, #28]
 800f73c:	4654      	mov	r4, sl
 800f73e:	2000      	movs	r0, #0
 800f740:	f04f 0c0a 	mov.w	ip, #10
 800f744:	4621      	mov	r1, r4
 800f746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f74a:	3b30      	subs	r3, #48	@ 0x30
 800f74c:	2b09      	cmp	r3, #9
 800f74e:	d94b      	bls.n	800f7e8 <_svfiprintf_r+0x17c>
 800f750:	b1b0      	cbz	r0, 800f780 <_svfiprintf_r+0x114>
 800f752:	9207      	str	r2, [sp, #28]
 800f754:	e014      	b.n	800f780 <_svfiprintf_r+0x114>
 800f756:	eba0 0308 	sub.w	r3, r0, r8
 800f75a:	fa09 f303 	lsl.w	r3, r9, r3
 800f75e:	4313      	orrs	r3, r2
 800f760:	9304      	str	r3, [sp, #16]
 800f762:	46a2      	mov	sl, r4
 800f764:	e7d2      	b.n	800f70c <_svfiprintf_r+0xa0>
 800f766:	9b03      	ldr	r3, [sp, #12]
 800f768:	1d19      	adds	r1, r3, #4
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	9103      	str	r1, [sp, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	bfbb      	ittet	lt
 800f772:	425b      	neglt	r3, r3
 800f774:	f042 0202 	orrlt.w	r2, r2, #2
 800f778:	9307      	strge	r3, [sp, #28]
 800f77a:	9307      	strlt	r3, [sp, #28]
 800f77c:	bfb8      	it	lt
 800f77e:	9204      	strlt	r2, [sp, #16]
 800f780:	7823      	ldrb	r3, [r4, #0]
 800f782:	2b2e      	cmp	r3, #46	@ 0x2e
 800f784:	d10a      	bne.n	800f79c <_svfiprintf_r+0x130>
 800f786:	7863      	ldrb	r3, [r4, #1]
 800f788:	2b2a      	cmp	r3, #42	@ 0x2a
 800f78a:	d132      	bne.n	800f7f2 <_svfiprintf_r+0x186>
 800f78c:	9b03      	ldr	r3, [sp, #12]
 800f78e:	1d1a      	adds	r2, r3, #4
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	9203      	str	r2, [sp, #12]
 800f794:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f798:	3402      	adds	r4, #2
 800f79a:	9305      	str	r3, [sp, #20]
 800f79c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f860 <_svfiprintf_r+0x1f4>
 800f7a0:	7821      	ldrb	r1, [r4, #0]
 800f7a2:	2203      	movs	r2, #3
 800f7a4:	4650      	mov	r0, sl
 800f7a6:	f7f0 fd13 	bl	80001d0 <memchr>
 800f7aa:	b138      	cbz	r0, 800f7bc <_svfiprintf_r+0x150>
 800f7ac:	9b04      	ldr	r3, [sp, #16]
 800f7ae:	eba0 000a 	sub.w	r0, r0, sl
 800f7b2:	2240      	movs	r2, #64	@ 0x40
 800f7b4:	4082      	lsls	r2, r0
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	3401      	adds	r4, #1
 800f7ba:	9304      	str	r3, [sp, #16]
 800f7bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7c0:	4824      	ldr	r0, [pc, #144]	@ (800f854 <_svfiprintf_r+0x1e8>)
 800f7c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f7c6:	2206      	movs	r2, #6
 800f7c8:	f7f0 fd02 	bl	80001d0 <memchr>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d036      	beq.n	800f83e <_svfiprintf_r+0x1d2>
 800f7d0:	4b21      	ldr	r3, [pc, #132]	@ (800f858 <_svfiprintf_r+0x1ec>)
 800f7d2:	bb1b      	cbnz	r3, 800f81c <_svfiprintf_r+0x1b0>
 800f7d4:	9b03      	ldr	r3, [sp, #12]
 800f7d6:	3307      	adds	r3, #7
 800f7d8:	f023 0307 	bic.w	r3, r3, #7
 800f7dc:	3308      	adds	r3, #8
 800f7de:	9303      	str	r3, [sp, #12]
 800f7e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7e2:	4433      	add	r3, r6
 800f7e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7e6:	e76a      	b.n	800f6be <_svfiprintf_r+0x52>
 800f7e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7ec:	460c      	mov	r4, r1
 800f7ee:	2001      	movs	r0, #1
 800f7f0:	e7a8      	b.n	800f744 <_svfiprintf_r+0xd8>
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	3401      	adds	r4, #1
 800f7f6:	9305      	str	r3, [sp, #20]
 800f7f8:	4619      	mov	r1, r3
 800f7fa:	f04f 0c0a 	mov.w	ip, #10
 800f7fe:	4620      	mov	r0, r4
 800f800:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f804:	3a30      	subs	r2, #48	@ 0x30
 800f806:	2a09      	cmp	r2, #9
 800f808:	d903      	bls.n	800f812 <_svfiprintf_r+0x1a6>
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d0c6      	beq.n	800f79c <_svfiprintf_r+0x130>
 800f80e:	9105      	str	r1, [sp, #20]
 800f810:	e7c4      	b.n	800f79c <_svfiprintf_r+0x130>
 800f812:	fb0c 2101 	mla	r1, ip, r1, r2
 800f816:	4604      	mov	r4, r0
 800f818:	2301      	movs	r3, #1
 800f81a:	e7f0      	b.n	800f7fe <_svfiprintf_r+0x192>
 800f81c:	ab03      	add	r3, sp, #12
 800f81e:	9300      	str	r3, [sp, #0]
 800f820:	462a      	mov	r2, r5
 800f822:	4b0e      	ldr	r3, [pc, #56]	@ (800f85c <_svfiprintf_r+0x1f0>)
 800f824:	a904      	add	r1, sp, #16
 800f826:	4638      	mov	r0, r7
 800f828:	f7fc fc24 	bl	800c074 <_printf_float>
 800f82c:	1c42      	adds	r2, r0, #1
 800f82e:	4606      	mov	r6, r0
 800f830:	d1d6      	bne.n	800f7e0 <_svfiprintf_r+0x174>
 800f832:	89ab      	ldrh	r3, [r5, #12]
 800f834:	065b      	lsls	r3, r3, #25
 800f836:	f53f af2d 	bmi.w	800f694 <_svfiprintf_r+0x28>
 800f83a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f83c:	e72c      	b.n	800f698 <_svfiprintf_r+0x2c>
 800f83e:	ab03      	add	r3, sp, #12
 800f840:	9300      	str	r3, [sp, #0]
 800f842:	462a      	mov	r2, r5
 800f844:	4b05      	ldr	r3, [pc, #20]	@ (800f85c <_svfiprintf_r+0x1f0>)
 800f846:	a904      	add	r1, sp, #16
 800f848:	4638      	mov	r0, r7
 800f84a:	f7fc feab 	bl	800c5a4 <_printf_i>
 800f84e:	e7ed      	b.n	800f82c <_svfiprintf_r+0x1c0>
 800f850:	0801186d 	.word	0x0801186d
 800f854:	08011877 	.word	0x08011877
 800f858:	0800c075 	.word	0x0800c075
 800f85c:	0800f5b5 	.word	0x0800f5b5
 800f860:	08011873 	.word	0x08011873

0800f864 <__sflush_r>:
 800f864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f86c:	0716      	lsls	r6, r2, #28
 800f86e:	4605      	mov	r5, r0
 800f870:	460c      	mov	r4, r1
 800f872:	d454      	bmi.n	800f91e <__sflush_r+0xba>
 800f874:	684b      	ldr	r3, [r1, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	dc02      	bgt.n	800f880 <__sflush_r+0x1c>
 800f87a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	dd48      	ble.n	800f912 <__sflush_r+0xae>
 800f880:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f882:	2e00      	cmp	r6, #0
 800f884:	d045      	beq.n	800f912 <__sflush_r+0xae>
 800f886:	2300      	movs	r3, #0
 800f888:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f88c:	682f      	ldr	r7, [r5, #0]
 800f88e:	6a21      	ldr	r1, [r4, #32]
 800f890:	602b      	str	r3, [r5, #0]
 800f892:	d030      	beq.n	800f8f6 <__sflush_r+0x92>
 800f894:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f896:	89a3      	ldrh	r3, [r4, #12]
 800f898:	0759      	lsls	r1, r3, #29
 800f89a:	d505      	bpl.n	800f8a8 <__sflush_r+0x44>
 800f89c:	6863      	ldr	r3, [r4, #4]
 800f89e:	1ad2      	subs	r2, r2, r3
 800f8a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f8a2:	b10b      	cbz	r3, 800f8a8 <__sflush_r+0x44>
 800f8a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f8a6:	1ad2      	subs	r2, r2, r3
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f8ac:	6a21      	ldr	r1, [r4, #32]
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	47b0      	blx	r6
 800f8b2:	1c43      	adds	r3, r0, #1
 800f8b4:	89a3      	ldrh	r3, [r4, #12]
 800f8b6:	d106      	bne.n	800f8c6 <__sflush_r+0x62>
 800f8b8:	6829      	ldr	r1, [r5, #0]
 800f8ba:	291d      	cmp	r1, #29
 800f8bc:	d82b      	bhi.n	800f916 <__sflush_r+0xb2>
 800f8be:	4a2a      	ldr	r2, [pc, #168]	@ (800f968 <__sflush_r+0x104>)
 800f8c0:	40ca      	lsrs	r2, r1
 800f8c2:	07d6      	lsls	r6, r2, #31
 800f8c4:	d527      	bpl.n	800f916 <__sflush_r+0xb2>
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	6062      	str	r2, [r4, #4]
 800f8ca:	04d9      	lsls	r1, r3, #19
 800f8cc:	6922      	ldr	r2, [r4, #16]
 800f8ce:	6022      	str	r2, [r4, #0]
 800f8d0:	d504      	bpl.n	800f8dc <__sflush_r+0x78>
 800f8d2:	1c42      	adds	r2, r0, #1
 800f8d4:	d101      	bne.n	800f8da <__sflush_r+0x76>
 800f8d6:	682b      	ldr	r3, [r5, #0]
 800f8d8:	b903      	cbnz	r3, 800f8dc <__sflush_r+0x78>
 800f8da:	6560      	str	r0, [r4, #84]	@ 0x54
 800f8dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8de:	602f      	str	r7, [r5, #0]
 800f8e0:	b1b9      	cbz	r1, 800f912 <__sflush_r+0xae>
 800f8e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8e6:	4299      	cmp	r1, r3
 800f8e8:	d002      	beq.n	800f8f0 <__sflush_r+0x8c>
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f7fe fa34 	bl	800dd58 <_free_r>
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8f4:	e00d      	b.n	800f912 <__sflush_r+0xae>
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	47b0      	blx	r6
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	1c50      	adds	r0, r2, #1
 800f900:	d1c9      	bne.n	800f896 <__sflush_r+0x32>
 800f902:	682b      	ldr	r3, [r5, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d0c6      	beq.n	800f896 <__sflush_r+0x32>
 800f908:	2b1d      	cmp	r3, #29
 800f90a:	d001      	beq.n	800f910 <__sflush_r+0xac>
 800f90c:	2b16      	cmp	r3, #22
 800f90e:	d11e      	bne.n	800f94e <__sflush_r+0xea>
 800f910:	602f      	str	r7, [r5, #0]
 800f912:	2000      	movs	r0, #0
 800f914:	e022      	b.n	800f95c <__sflush_r+0xf8>
 800f916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f91a:	b21b      	sxth	r3, r3
 800f91c:	e01b      	b.n	800f956 <__sflush_r+0xf2>
 800f91e:	690f      	ldr	r7, [r1, #16]
 800f920:	2f00      	cmp	r7, #0
 800f922:	d0f6      	beq.n	800f912 <__sflush_r+0xae>
 800f924:	0793      	lsls	r3, r2, #30
 800f926:	680e      	ldr	r6, [r1, #0]
 800f928:	bf08      	it	eq
 800f92a:	694b      	ldreq	r3, [r1, #20]
 800f92c:	600f      	str	r7, [r1, #0]
 800f92e:	bf18      	it	ne
 800f930:	2300      	movne	r3, #0
 800f932:	eba6 0807 	sub.w	r8, r6, r7
 800f936:	608b      	str	r3, [r1, #8]
 800f938:	f1b8 0f00 	cmp.w	r8, #0
 800f93c:	dde9      	ble.n	800f912 <__sflush_r+0xae>
 800f93e:	6a21      	ldr	r1, [r4, #32]
 800f940:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f942:	4643      	mov	r3, r8
 800f944:	463a      	mov	r2, r7
 800f946:	4628      	mov	r0, r5
 800f948:	47b0      	blx	r6
 800f94a:	2800      	cmp	r0, #0
 800f94c:	dc08      	bgt.n	800f960 <__sflush_r+0xfc>
 800f94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f956:	81a3      	strh	r3, [r4, #12]
 800f958:	f04f 30ff 	mov.w	r0, #4294967295
 800f95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f960:	4407      	add	r7, r0
 800f962:	eba8 0800 	sub.w	r8, r8, r0
 800f966:	e7e7      	b.n	800f938 <__sflush_r+0xd4>
 800f968:	20400001 	.word	0x20400001

0800f96c <_fflush_r>:
 800f96c:	b538      	push	{r3, r4, r5, lr}
 800f96e:	690b      	ldr	r3, [r1, #16]
 800f970:	4605      	mov	r5, r0
 800f972:	460c      	mov	r4, r1
 800f974:	b913      	cbnz	r3, 800f97c <_fflush_r+0x10>
 800f976:	2500      	movs	r5, #0
 800f978:	4628      	mov	r0, r5
 800f97a:	bd38      	pop	{r3, r4, r5, pc}
 800f97c:	b118      	cbz	r0, 800f986 <_fflush_r+0x1a>
 800f97e:	6a03      	ldr	r3, [r0, #32]
 800f980:	b90b      	cbnz	r3, 800f986 <_fflush_r+0x1a>
 800f982:	f7fd f9c7 	bl	800cd14 <__sinit>
 800f986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d0f3      	beq.n	800f976 <_fflush_r+0xa>
 800f98e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f990:	07d0      	lsls	r0, r2, #31
 800f992:	d404      	bmi.n	800f99e <_fflush_r+0x32>
 800f994:	0599      	lsls	r1, r3, #22
 800f996:	d402      	bmi.n	800f99e <_fflush_r+0x32>
 800f998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f99a:	f7fd fb6c 	bl	800d076 <__retarget_lock_acquire_recursive>
 800f99e:	4628      	mov	r0, r5
 800f9a0:	4621      	mov	r1, r4
 800f9a2:	f7ff ff5f 	bl	800f864 <__sflush_r>
 800f9a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f9a8:	07da      	lsls	r2, r3, #31
 800f9aa:	4605      	mov	r5, r0
 800f9ac:	d4e4      	bmi.n	800f978 <_fflush_r+0xc>
 800f9ae:	89a3      	ldrh	r3, [r4, #12]
 800f9b0:	059b      	lsls	r3, r3, #22
 800f9b2:	d4e1      	bmi.n	800f978 <_fflush_r+0xc>
 800f9b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9b6:	f7fd fb5f 	bl	800d078 <__retarget_lock_release_recursive>
 800f9ba:	e7dd      	b.n	800f978 <_fflush_r+0xc>

0800f9bc <memmove>:
 800f9bc:	4288      	cmp	r0, r1
 800f9be:	b510      	push	{r4, lr}
 800f9c0:	eb01 0402 	add.w	r4, r1, r2
 800f9c4:	d902      	bls.n	800f9cc <memmove+0x10>
 800f9c6:	4284      	cmp	r4, r0
 800f9c8:	4623      	mov	r3, r4
 800f9ca:	d807      	bhi.n	800f9dc <memmove+0x20>
 800f9cc:	1e43      	subs	r3, r0, #1
 800f9ce:	42a1      	cmp	r1, r4
 800f9d0:	d008      	beq.n	800f9e4 <memmove+0x28>
 800f9d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f9da:	e7f8      	b.n	800f9ce <memmove+0x12>
 800f9dc:	4402      	add	r2, r0
 800f9de:	4601      	mov	r1, r0
 800f9e0:	428a      	cmp	r2, r1
 800f9e2:	d100      	bne.n	800f9e6 <memmove+0x2a>
 800f9e4:	bd10      	pop	{r4, pc}
 800f9e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f9ee:	e7f7      	b.n	800f9e0 <memmove+0x24>

0800f9f0 <strncmp>:
 800f9f0:	b510      	push	{r4, lr}
 800f9f2:	b16a      	cbz	r2, 800fa10 <strncmp+0x20>
 800f9f4:	3901      	subs	r1, #1
 800f9f6:	1884      	adds	r4, r0, r2
 800f9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d103      	bne.n	800fa0c <strncmp+0x1c>
 800fa04:	42a0      	cmp	r0, r4
 800fa06:	d001      	beq.n	800fa0c <strncmp+0x1c>
 800fa08:	2a00      	cmp	r2, #0
 800fa0a:	d1f5      	bne.n	800f9f8 <strncmp+0x8>
 800fa0c:	1ad0      	subs	r0, r2, r3
 800fa0e:	bd10      	pop	{r4, pc}
 800fa10:	4610      	mov	r0, r2
 800fa12:	e7fc      	b.n	800fa0e <strncmp+0x1e>

0800fa14 <_sbrk_r>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	4d06      	ldr	r5, [pc, #24]	@ (800fa30 <_sbrk_r+0x1c>)
 800fa18:	2300      	movs	r3, #0
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	4608      	mov	r0, r1
 800fa1e:	602b      	str	r3, [r5, #0]
 800fa20:	f7f4 fe2e 	bl	8004680 <_sbrk>
 800fa24:	1c43      	adds	r3, r0, #1
 800fa26:	d102      	bne.n	800fa2e <_sbrk_r+0x1a>
 800fa28:	682b      	ldr	r3, [r5, #0]
 800fa2a:	b103      	cbz	r3, 800fa2e <_sbrk_r+0x1a>
 800fa2c:	6023      	str	r3, [r4, #0]
 800fa2e:	bd38      	pop	{r3, r4, r5, pc}
 800fa30:	20000824 	.word	0x20000824
 800fa34:	00000000 	.word	0x00000000

0800fa38 <nan>:
 800fa38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fa40 <nan+0x8>
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	00000000 	.word	0x00000000
 800fa44:	7ff80000 	.word	0x7ff80000

0800fa48 <__assert_func>:
 800fa48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa4a:	4614      	mov	r4, r2
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4b09      	ldr	r3, [pc, #36]	@ (800fa74 <__assert_func+0x2c>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	4605      	mov	r5, r0
 800fa54:	68d8      	ldr	r0, [r3, #12]
 800fa56:	b14c      	cbz	r4, 800fa6c <__assert_func+0x24>
 800fa58:	4b07      	ldr	r3, [pc, #28]	@ (800fa78 <__assert_func+0x30>)
 800fa5a:	9100      	str	r1, [sp, #0]
 800fa5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa60:	4906      	ldr	r1, [pc, #24]	@ (800fa7c <__assert_func+0x34>)
 800fa62:	462b      	mov	r3, r5
 800fa64:	f000 fba8 	bl	80101b8 <fiprintf>
 800fa68:	f000 fbb8 	bl	80101dc <abort>
 800fa6c:	4b04      	ldr	r3, [pc, #16]	@ (800fa80 <__assert_func+0x38>)
 800fa6e:	461c      	mov	r4, r3
 800fa70:	e7f3      	b.n	800fa5a <__assert_func+0x12>
 800fa72:	bf00      	nop
 800fa74:	20000060 	.word	0x20000060
 800fa78:	08011886 	.word	0x08011886
 800fa7c:	08011893 	.word	0x08011893
 800fa80:	080118c1 	.word	0x080118c1

0800fa84 <_calloc_r>:
 800fa84:	b570      	push	{r4, r5, r6, lr}
 800fa86:	fba1 5402 	umull	r5, r4, r1, r2
 800fa8a:	b934      	cbnz	r4, 800fa9a <_calloc_r+0x16>
 800fa8c:	4629      	mov	r1, r5
 800fa8e:	f7fe f9d7 	bl	800de40 <_malloc_r>
 800fa92:	4606      	mov	r6, r0
 800fa94:	b928      	cbnz	r0, 800faa2 <_calloc_r+0x1e>
 800fa96:	4630      	mov	r0, r6
 800fa98:	bd70      	pop	{r4, r5, r6, pc}
 800fa9a:	220c      	movs	r2, #12
 800fa9c:	6002      	str	r2, [r0, #0]
 800fa9e:	2600      	movs	r6, #0
 800faa0:	e7f9      	b.n	800fa96 <_calloc_r+0x12>
 800faa2:	462a      	mov	r2, r5
 800faa4:	4621      	mov	r1, r4
 800faa6:	f7fd fa43 	bl	800cf30 <memset>
 800faaa:	e7f4      	b.n	800fa96 <_calloc_r+0x12>

0800faac <rshift>:
 800faac:	6903      	ldr	r3, [r0, #16]
 800faae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fab2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fab6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800faba:	f100 0414 	add.w	r4, r0, #20
 800fabe:	dd45      	ble.n	800fb4c <rshift+0xa0>
 800fac0:	f011 011f 	ands.w	r1, r1, #31
 800fac4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fac8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800facc:	d10c      	bne.n	800fae8 <rshift+0x3c>
 800face:	f100 0710 	add.w	r7, r0, #16
 800fad2:	4629      	mov	r1, r5
 800fad4:	42b1      	cmp	r1, r6
 800fad6:	d334      	bcc.n	800fb42 <rshift+0x96>
 800fad8:	1a9b      	subs	r3, r3, r2
 800fada:	009b      	lsls	r3, r3, #2
 800fadc:	1eea      	subs	r2, r5, #3
 800fade:	4296      	cmp	r6, r2
 800fae0:	bf38      	it	cc
 800fae2:	2300      	movcc	r3, #0
 800fae4:	4423      	add	r3, r4
 800fae6:	e015      	b.n	800fb14 <rshift+0x68>
 800fae8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800faec:	f1c1 0820 	rsb	r8, r1, #32
 800faf0:	40cf      	lsrs	r7, r1
 800faf2:	f105 0e04 	add.w	lr, r5, #4
 800faf6:	46a1      	mov	r9, r4
 800faf8:	4576      	cmp	r6, lr
 800fafa:	46f4      	mov	ip, lr
 800fafc:	d815      	bhi.n	800fb2a <rshift+0x7e>
 800fafe:	1a9a      	subs	r2, r3, r2
 800fb00:	0092      	lsls	r2, r2, #2
 800fb02:	3a04      	subs	r2, #4
 800fb04:	3501      	adds	r5, #1
 800fb06:	42ae      	cmp	r6, r5
 800fb08:	bf38      	it	cc
 800fb0a:	2200      	movcc	r2, #0
 800fb0c:	18a3      	adds	r3, r4, r2
 800fb0e:	50a7      	str	r7, [r4, r2]
 800fb10:	b107      	cbz	r7, 800fb14 <rshift+0x68>
 800fb12:	3304      	adds	r3, #4
 800fb14:	1b1a      	subs	r2, r3, r4
 800fb16:	42a3      	cmp	r3, r4
 800fb18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb1c:	bf08      	it	eq
 800fb1e:	2300      	moveq	r3, #0
 800fb20:	6102      	str	r2, [r0, #16]
 800fb22:	bf08      	it	eq
 800fb24:	6143      	streq	r3, [r0, #20]
 800fb26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb2a:	f8dc c000 	ldr.w	ip, [ip]
 800fb2e:	fa0c fc08 	lsl.w	ip, ip, r8
 800fb32:	ea4c 0707 	orr.w	r7, ip, r7
 800fb36:	f849 7b04 	str.w	r7, [r9], #4
 800fb3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb3e:	40cf      	lsrs	r7, r1
 800fb40:	e7da      	b.n	800faf8 <rshift+0x4c>
 800fb42:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb46:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb4a:	e7c3      	b.n	800fad4 <rshift+0x28>
 800fb4c:	4623      	mov	r3, r4
 800fb4e:	e7e1      	b.n	800fb14 <rshift+0x68>

0800fb50 <__hexdig_fun>:
 800fb50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fb54:	2b09      	cmp	r3, #9
 800fb56:	d802      	bhi.n	800fb5e <__hexdig_fun+0xe>
 800fb58:	3820      	subs	r0, #32
 800fb5a:	b2c0      	uxtb	r0, r0
 800fb5c:	4770      	bx	lr
 800fb5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fb62:	2b05      	cmp	r3, #5
 800fb64:	d801      	bhi.n	800fb6a <__hexdig_fun+0x1a>
 800fb66:	3847      	subs	r0, #71	@ 0x47
 800fb68:	e7f7      	b.n	800fb5a <__hexdig_fun+0xa>
 800fb6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fb6e:	2b05      	cmp	r3, #5
 800fb70:	d801      	bhi.n	800fb76 <__hexdig_fun+0x26>
 800fb72:	3827      	subs	r0, #39	@ 0x27
 800fb74:	e7f1      	b.n	800fb5a <__hexdig_fun+0xa>
 800fb76:	2000      	movs	r0, #0
 800fb78:	4770      	bx	lr
	...

0800fb7c <__gethex>:
 800fb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb80:	b085      	sub	sp, #20
 800fb82:	468a      	mov	sl, r1
 800fb84:	9302      	str	r3, [sp, #8]
 800fb86:	680b      	ldr	r3, [r1, #0]
 800fb88:	9001      	str	r0, [sp, #4]
 800fb8a:	4690      	mov	r8, r2
 800fb8c:	1c9c      	adds	r4, r3, #2
 800fb8e:	46a1      	mov	r9, r4
 800fb90:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fb94:	2830      	cmp	r0, #48	@ 0x30
 800fb96:	d0fa      	beq.n	800fb8e <__gethex+0x12>
 800fb98:	eba9 0303 	sub.w	r3, r9, r3
 800fb9c:	f1a3 0b02 	sub.w	fp, r3, #2
 800fba0:	f7ff ffd6 	bl	800fb50 <__hexdig_fun>
 800fba4:	4605      	mov	r5, r0
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d168      	bne.n	800fc7c <__gethex+0x100>
 800fbaa:	49a0      	ldr	r1, [pc, #640]	@ (800fe2c <__gethex+0x2b0>)
 800fbac:	2201      	movs	r2, #1
 800fbae:	4648      	mov	r0, r9
 800fbb0:	f7ff ff1e 	bl	800f9f0 <strncmp>
 800fbb4:	4607      	mov	r7, r0
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d167      	bne.n	800fc8a <__gethex+0x10e>
 800fbba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fbbe:	4626      	mov	r6, r4
 800fbc0:	f7ff ffc6 	bl	800fb50 <__hexdig_fun>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d062      	beq.n	800fc8e <__gethex+0x112>
 800fbc8:	4623      	mov	r3, r4
 800fbca:	7818      	ldrb	r0, [r3, #0]
 800fbcc:	2830      	cmp	r0, #48	@ 0x30
 800fbce:	4699      	mov	r9, r3
 800fbd0:	f103 0301 	add.w	r3, r3, #1
 800fbd4:	d0f9      	beq.n	800fbca <__gethex+0x4e>
 800fbd6:	f7ff ffbb 	bl	800fb50 <__hexdig_fun>
 800fbda:	fab0 f580 	clz	r5, r0
 800fbde:	096d      	lsrs	r5, r5, #5
 800fbe0:	f04f 0b01 	mov.w	fp, #1
 800fbe4:	464a      	mov	r2, r9
 800fbe6:	4616      	mov	r6, r2
 800fbe8:	3201      	adds	r2, #1
 800fbea:	7830      	ldrb	r0, [r6, #0]
 800fbec:	f7ff ffb0 	bl	800fb50 <__hexdig_fun>
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	d1f8      	bne.n	800fbe6 <__gethex+0x6a>
 800fbf4:	498d      	ldr	r1, [pc, #564]	@ (800fe2c <__gethex+0x2b0>)
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	f7ff fef9 	bl	800f9f0 <strncmp>
 800fbfe:	2800      	cmp	r0, #0
 800fc00:	d13f      	bne.n	800fc82 <__gethex+0x106>
 800fc02:	b944      	cbnz	r4, 800fc16 <__gethex+0x9a>
 800fc04:	1c74      	adds	r4, r6, #1
 800fc06:	4622      	mov	r2, r4
 800fc08:	4616      	mov	r6, r2
 800fc0a:	3201      	adds	r2, #1
 800fc0c:	7830      	ldrb	r0, [r6, #0]
 800fc0e:	f7ff ff9f 	bl	800fb50 <__hexdig_fun>
 800fc12:	2800      	cmp	r0, #0
 800fc14:	d1f8      	bne.n	800fc08 <__gethex+0x8c>
 800fc16:	1ba4      	subs	r4, r4, r6
 800fc18:	00a7      	lsls	r7, r4, #2
 800fc1a:	7833      	ldrb	r3, [r6, #0]
 800fc1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fc20:	2b50      	cmp	r3, #80	@ 0x50
 800fc22:	d13e      	bne.n	800fca2 <__gethex+0x126>
 800fc24:	7873      	ldrb	r3, [r6, #1]
 800fc26:	2b2b      	cmp	r3, #43	@ 0x2b
 800fc28:	d033      	beq.n	800fc92 <__gethex+0x116>
 800fc2a:	2b2d      	cmp	r3, #45	@ 0x2d
 800fc2c:	d034      	beq.n	800fc98 <__gethex+0x11c>
 800fc2e:	1c71      	adds	r1, r6, #1
 800fc30:	2400      	movs	r4, #0
 800fc32:	7808      	ldrb	r0, [r1, #0]
 800fc34:	f7ff ff8c 	bl	800fb50 <__hexdig_fun>
 800fc38:	1e43      	subs	r3, r0, #1
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	2b18      	cmp	r3, #24
 800fc3e:	d830      	bhi.n	800fca2 <__gethex+0x126>
 800fc40:	f1a0 0210 	sub.w	r2, r0, #16
 800fc44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fc48:	f7ff ff82 	bl	800fb50 <__hexdig_fun>
 800fc4c:	f100 3cff 	add.w	ip, r0, #4294967295
 800fc50:	fa5f fc8c 	uxtb.w	ip, ip
 800fc54:	f1bc 0f18 	cmp.w	ip, #24
 800fc58:	f04f 030a 	mov.w	r3, #10
 800fc5c:	d91e      	bls.n	800fc9c <__gethex+0x120>
 800fc5e:	b104      	cbz	r4, 800fc62 <__gethex+0xe6>
 800fc60:	4252      	negs	r2, r2
 800fc62:	4417      	add	r7, r2
 800fc64:	f8ca 1000 	str.w	r1, [sl]
 800fc68:	b1ed      	cbz	r5, 800fca6 <__gethex+0x12a>
 800fc6a:	f1bb 0f00 	cmp.w	fp, #0
 800fc6e:	bf0c      	ite	eq
 800fc70:	2506      	moveq	r5, #6
 800fc72:	2500      	movne	r5, #0
 800fc74:	4628      	mov	r0, r5
 800fc76:	b005      	add	sp, #20
 800fc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc7c:	2500      	movs	r5, #0
 800fc7e:	462c      	mov	r4, r5
 800fc80:	e7b0      	b.n	800fbe4 <__gethex+0x68>
 800fc82:	2c00      	cmp	r4, #0
 800fc84:	d1c7      	bne.n	800fc16 <__gethex+0x9a>
 800fc86:	4627      	mov	r7, r4
 800fc88:	e7c7      	b.n	800fc1a <__gethex+0x9e>
 800fc8a:	464e      	mov	r6, r9
 800fc8c:	462f      	mov	r7, r5
 800fc8e:	2501      	movs	r5, #1
 800fc90:	e7c3      	b.n	800fc1a <__gethex+0x9e>
 800fc92:	2400      	movs	r4, #0
 800fc94:	1cb1      	adds	r1, r6, #2
 800fc96:	e7cc      	b.n	800fc32 <__gethex+0xb6>
 800fc98:	2401      	movs	r4, #1
 800fc9a:	e7fb      	b.n	800fc94 <__gethex+0x118>
 800fc9c:	fb03 0002 	mla	r0, r3, r2, r0
 800fca0:	e7ce      	b.n	800fc40 <__gethex+0xc4>
 800fca2:	4631      	mov	r1, r6
 800fca4:	e7de      	b.n	800fc64 <__gethex+0xe8>
 800fca6:	eba6 0309 	sub.w	r3, r6, r9
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	4629      	mov	r1, r5
 800fcae:	2b07      	cmp	r3, #7
 800fcb0:	dc0a      	bgt.n	800fcc8 <__gethex+0x14c>
 800fcb2:	9801      	ldr	r0, [sp, #4]
 800fcb4:	f7fe f950 	bl	800df58 <_Balloc>
 800fcb8:	4604      	mov	r4, r0
 800fcba:	b940      	cbnz	r0, 800fcce <__gethex+0x152>
 800fcbc:	4b5c      	ldr	r3, [pc, #368]	@ (800fe30 <__gethex+0x2b4>)
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	21e4      	movs	r1, #228	@ 0xe4
 800fcc2:	485c      	ldr	r0, [pc, #368]	@ (800fe34 <__gethex+0x2b8>)
 800fcc4:	f7ff fec0 	bl	800fa48 <__assert_func>
 800fcc8:	3101      	adds	r1, #1
 800fcca:	105b      	asrs	r3, r3, #1
 800fccc:	e7ef      	b.n	800fcae <__gethex+0x132>
 800fcce:	f100 0a14 	add.w	sl, r0, #20
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	4655      	mov	r5, sl
 800fcd6:	469b      	mov	fp, r3
 800fcd8:	45b1      	cmp	r9, r6
 800fcda:	d337      	bcc.n	800fd4c <__gethex+0x1d0>
 800fcdc:	f845 bb04 	str.w	fp, [r5], #4
 800fce0:	eba5 050a 	sub.w	r5, r5, sl
 800fce4:	10ad      	asrs	r5, r5, #2
 800fce6:	6125      	str	r5, [r4, #16]
 800fce8:	4658      	mov	r0, fp
 800fcea:	f7fe fa27 	bl	800e13c <__hi0bits>
 800fcee:	016d      	lsls	r5, r5, #5
 800fcf0:	f8d8 6000 	ldr.w	r6, [r8]
 800fcf4:	1a2d      	subs	r5, r5, r0
 800fcf6:	42b5      	cmp	r5, r6
 800fcf8:	dd54      	ble.n	800fda4 <__gethex+0x228>
 800fcfa:	1bad      	subs	r5, r5, r6
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f7fe fdb3 	bl	800e86a <__any_on>
 800fd04:	4681      	mov	r9, r0
 800fd06:	b178      	cbz	r0, 800fd28 <__gethex+0x1ac>
 800fd08:	1e6b      	subs	r3, r5, #1
 800fd0a:	1159      	asrs	r1, r3, #5
 800fd0c:	f003 021f 	and.w	r2, r3, #31
 800fd10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fd14:	f04f 0901 	mov.w	r9, #1
 800fd18:	fa09 f202 	lsl.w	r2, r9, r2
 800fd1c:	420a      	tst	r2, r1
 800fd1e:	d003      	beq.n	800fd28 <__gethex+0x1ac>
 800fd20:	454b      	cmp	r3, r9
 800fd22:	dc36      	bgt.n	800fd92 <__gethex+0x216>
 800fd24:	f04f 0902 	mov.w	r9, #2
 800fd28:	4629      	mov	r1, r5
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f7ff febe 	bl	800faac <rshift>
 800fd30:	442f      	add	r7, r5
 800fd32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd36:	42bb      	cmp	r3, r7
 800fd38:	da42      	bge.n	800fdc0 <__gethex+0x244>
 800fd3a:	9801      	ldr	r0, [sp, #4]
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	f7fe f94b 	bl	800dfd8 <_Bfree>
 800fd42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd44:	2300      	movs	r3, #0
 800fd46:	6013      	str	r3, [r2, #0]
 800fd48:	25a3      	movs	r5, #163	@ 0xa3
 800fd4a:	e793      	b.n	800fc74 <__gethex+0xf8>
 800fd4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fd50:	2a2e      	cmp	r2, #46	@ 0x2e
 800fd52:	d012      	beq.n	800fd7a <__gethex+0x1fe>
 800fd54:	2b20      	cmp	r3, #32
 800fd56:	d104      	bne.n	800fd62 <__gethex+0x1e6>
 800fd58:	f845 bb04 	str.w	fp, [r5], #4
 800fd5c:	f04f 0b00 	mov.w	fp, #0
 800fd60:	465b      	mov	r3, fp
 800fd62:	7830      	ldrb	r0, [r6, #0]
 800fd64:	9303      	str	r3, [sp, #12]
 800fd66:	f7ff fef3 	bl	800fb50 <__hexdig_fun>
 800fd6a:	9b03      	ldr	r3, [sp, #12]
 800fd6c:	f000 000f 	and.w	r0, r0, #15
 800fd70:	4098      	lsls	r0, r3
 800fd72:	ea4b 0b00 	orr.w	fp, fp, r0
 800fd76:	3304      	adds	r3, #4
 800fd78:	e7ae      	b.n	800fcd8 <__gethex+0x15c>
 800fd7a:	45b1      	cmp	r9, r6
 800fd7c:	d8ea      	bhi.n	800fd54 <__gethex+0x1d8>
 800fd7e:	492b      	ldr	r1, [pc, #172]	@ (800fe2c <__gethex+0x2b0>)
 800fd80:	9303      	str	r3, [sp, #12]
 800fd82:	2201      	movs	r2, #1
 800fd84:	4630      	mov	r0, r6
 800fd86:	f7ff fe33 	bl	800f9f0 <strncmp>
 800fd8a:	9b03      	ldr	r3, [sp, #12]
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	d1e1      	bne.n	800fd54 <__gethex+0x1d8>
 800fd90:	e7a2      	b.n	800fcd8 <__gethex+0x15c>
 800fd92:	1ea9      	subs	r1, r5, #2
 800fd94:	4620      	mov	r0, r4
 800fd96:	f7fe fd68 	bl	800e86a <__any_on>
 800fd9a:	2800      	cmp	r0, #0
 800fd9c:	d0c2      	beq.n	800fd24 <__gethex+0x1a8>
 800fd9e:	f04f 0903 	mov.w	r9, #3
 800fda2:	e7c1      	b.n	800fd28 <__gethex+0x1ac>
 800fda4:	da09      	bge.n	800fdba <__gethex+0x23e>
 800fda6:	1b75      	subs	r5, r6, r5
 800fda8:	4621      	mov	r1, r4
 800fdaa:	9801      	ldr	r0, [sp, #4]
 800fdac:	462a      	mov	r2, r5
 800fdae:	f7fe fb23 	bl	800e3f8 <__lshift>
 800fdb2:	1b7f      	subs	r7, r7, r5
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	f100 0a14 	add.w	sl, r0, #20
 800fdba:	f04f 0900 	mov.w	r9, #0
 800fdbe:	e7b8      	b.n	800fd32 <__gethex+0x1b6>
 800fdc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fdc4:	42bd      	cmp	r5, r7
 800fdc6:	dd6f      	ble.n	800fea8 <__gethex+0x32c>
 800fdc8:	1bed      	subs	r5, r5, r7
 800fdca:	42ae      	cmp	r6, r5
 800fdcc:	dc34      	bgt.n	800fe38 <__gethex+0x2bc>
 800fdce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	d022      	beq.n	800fe1c <__gethex+0x2a0>
 800fdd6:	2b03      	cmp	r3, #3
 800fdd8:	d024      	beq.n	800fe24 <__gethex+0x2a8>
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d115      	bne.n	800fe0a <__gethex+0x28e>
 800fdde:	42ae      	cmp	r6, r5
 800fde0:	d113      	bne.n	800fe0a <__gethex+0x28e>
 800fde2:	2e01      	cmp	r6, #1
 800fde4:	d10b      	bne.n	800fdfe <__gethex+0x282>
 800fde6:	9a02      	ldr	r2, [sp, #8]
 800fde8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fdec:	6013      	str	r3, [r2, #0]
 800fdee:	2301      	movs	r3, #1
 800fdf0:	6123      	str	r3, [r4, #16]
 800fdf2:	f8ca 3000 	str.w	r3, [sl]
 800fdf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdf8:	2562      	movs	r5, #98	@ 0x62
 800fdfa:	601c      	str	r4, [r3, #0]
 800fdfc:	e73a      	b.n	800fc74 <__gethex+0xf8>
 800fdfe:	1e71      	subs	r1, r6, #1
 800fe00:	4620      	mov	r0, r4
 800fe02:	f7fe fd32 	bl	800e86a <__any_on>
 800fe06:	2800      	cmp	r0, #0
 800fe08:	d1ed      	bne.n	800fde6 <__gethex+0x26a>
 800fe0a:	9801      	ldr	r0, [sp, #4]
 800fe0c:	4621      	mov	r1, r4
 800fe0e:	f7fe f8e3 	bl	800dfd8 <_Bfree>
 800fe12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe14:	2300      	movs	r3, #0
 800fe16:	6013      	str	r3, [r2, #0]
 800fe18:	2550      	movs	r5, #80	@ 0x50
 800fe1a:	e72b      	b.n	800fc74 <__gethex+0xf8>
 800fe1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1f3      	bne.n	800fe0a <__gethex+0x28e>
 800fe22:	e7e0      	b.n	800fde6 <__gethex+0x26a>
 800fe24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1dd      	bne.n	800fde6 <__gethex+0x26a>
 800fe2a:	e7ee      	b.n	800fe0a <__gethex+0x28e>
 800fe2c:	0801186b 	.word	0x0801186b
 800fe30:	08011801 	.word	0x08011801
 800fe34:	080118c2 	.word	0x080118c2
 800fe38:	1e6f      	subs	r7, r5, #1
 800fe3a:	f1b9 0f00 	cmp.w	r9, #0
 800fe3e:	d130      	bne.n	800fea2 <__gethex+0x326>
 800fe40:	b127      	cbz	r7, 800fe4c <__gethex+0x2d0>
 800fe42:	4639      	mov	r1, r7
 800fe44:	4620      	mov	r0, r4
 800fe46:	f7fe fd10 	bl	800e86a <__any_on>
 800fe4a:	4681      	mov	r9, r0
 800fe4c:	117a      	asrs	r2, r7, #5
 800fe4e:	2301      	movs	r3, #1
 800fe50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fe54:	f007 071f 	and.w	r7, r7, #31
 800fe58:	40bb      	lsls	r3, r7
 800fe5a:	4213      	tst	r3, r2
 800fe5c:	4629      	mov	r1, r5
 800fe5e:	4620      	mov	r0, r4
 800fe60:	bf18      	it	ne
 800fe62:	f049 0902 	orrne.w	r9, r9, #2
 800fe66:	f7ff fe21 	bl	800faac <rshift>
 800fe6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fe6e:	1b76      	subs	r6, r6, r5
 800fe70:	2502      	movs	r5, #2
 800fe72:	f1b9 0f00 	cmp.w	r9, #0
 800fe76:	d047      	beq.n	800ff08 <__gethex+0x38c>
 800fe78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d015      	beq.n	800feac <__gethex+0x330>
 800fe80:	2b03      	cmp	r3, #3
 800fe82:	d017      	beq.n	800feb4 <__gethex+0x338>
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d109      	bne.n	800fe9c <__gethex+0x320>
 800fe88:	f019 0f02 	tst.w	r9, #2
 800fe8c:	d006      	beq.n	800fe9c <__gethex+0x320>
 800fe8e:	f8da 3000 	ldr.w	r3, [sl]
 800fe92:	ea49 0903 	orr.w	r9, r9, r3
 800fe96:	f019 0f01 	tst.w	r9, #1
 800fe9a:	d10e      	bne.n	800feba <__gethex+0x33e>
 800fe9c:	f045 0510 	orr.w	r5, r5, #16
 800fea0:	e032      	b.n	800ff08 <__gethex+0x38c>
 800fea2:	f04f 0901 	mov.w	r9, #1
 800fea6:	e7d1      	b.n	800fe4c <__gethex+0x2d0>
 800fea8:	2501      	movs	r5, #1
 800feaa:	e7e2      	b.n	800fe72 <__gethex+0x2f6>
 800feac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feae:	f1c3 0301 	rsb	r3, r3, #1
 800feb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800feb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d0f0      	beq.n	800fe9c <__gethex+0x320>
 800feba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800febe:	f104 0314 	add.w	r3, r4, #20
 800fec2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fec6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800feca:	f04f 0c00 	mov.w	ip, #0
 800fece:	4618      	mov	r0, r3
 800fed0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fed4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fed8:	d01b      	beq.n	800ff12 <__gethex+0x396>
 800feda:	3201      	adds	r2, #1
 800fedc:	6002      	str	r2, [r0, #0]
 800fede:	2d02      	cmp	r5, #2
 800fee0:	f104 0314 	add.w	r3, r4, #20
 800fee4:	d13c      	bne.n	800ff60 <__gethex+0x3e4>
 800fee6:	f8d8 2000 	ldr.w	r2, [r8]
 800feea:	3a01      	subs	r2, #1
 800feec:	42b2      	cmp	r2, r6
 800feee:	d109      	bne.n	800ff04 <__gethex+0x388>
 800fef0:	1171      	asrs	r1, r6, #5
 800fef2:	2201      	movs	r2, #1
 800fef4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fef8:	f006 061f 	and.w	r6, r6, #31
 800fefc:	fa02 f606 	lsl.w	r6, r2, r6
 800ff00:	421e      	tst	r6, r3
 800ff02:	d13a      	bne.n	800ff7a <__gethex+0x3fe>
 800ff04:	f045 0520 	orr.w	r5, r5, #32
 800ff08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff0a:	601c      	str	r4, [r3, #0]
 800ff0c:	9b02      	ldr	r3, [sp, #8]
 800ff0e:	601f      	str	r7, [r3, #0]
 800ff10:	e6b0      	b.n	800fc74 <__gethex+0xf8>
 800ff12:	4299      	cmp	r1, r3
 800ff14:	f843 cc04 	str.w	ip, [r3, #-4]
 800ff18:	d8d9      	bhi.n	800fece <__gethex+0x352>
 800ff1a:	68a3      	ldr	r3, [r4, #8]
 800ff1c:	459b      	cmp	fp, r3
 800ff1e:	db17      	blt.n	800ff50 <__gethex+0x3d4>
 800ff20:	6861      	ldr	r1, [r4, #4]
 800ff22:	9801      	ldr	r0, [sp, #4]
 800ff24:	3101      	adds	r1, #1
 800ff26:	f7fe f817 	bl	800df58 <_Balloc>
 800ff2a:	4681      	mov	r9, r0
 800ff2c:	b918      	cbnz	r0, 800ff36 <__gethex+0x3ba>
 800ff2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ff98 <__gethex+0x41c>)
 800ff30:	4602      	mov	r2, r0
 800ff32:	2184      	movs	r1, #132	@ 0x84
 800ff34:	e6c5      	b.n	800fcc2 <__gethex+0x146>
 800ff36:	6922      	ldr	r2, [r4, #16]
 800ff38:	3202      	adds	r2, #2
 800ff3a:	f104 010c 	add.w	r1, r4, #12
 800ff3e:	0092      	lsls	r2, r2, #2
 800ff40:	300c      	adds	r0, #12
 800ff42:	f7fd f89a 	bl	800d07a <memcpy>
 800ff46:	4621      	mov	r1, r4
 800ff48:	9801      	ldr	r0, [sp, #4]
 800ff4a:	f7fe f845 	bl	800dfd8 <_Bfree>
 800ff4e:	464c      	mov	r4, r9
 800ff50:	6923      	ldr	r3, [r4, #16]
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff58:	6122      	str	r2, [r4, #16]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	615a      	str	r2, [r3, #20]
 800ff5e:	e7be      	b.n	800fede <__gethex+0x362>
 800ff60:	6922      	ldr	r2, [r4, #16]
 800ff62:	455a      	cmp	r2, fp
 800ff64:	dd0b      	ble.n	800ff7e <__gethex+0x402>
 800ff66:	2101      	movs	r1, #1
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f7ff fd9f 	bl	800faac <rshift>
 800ff6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff72:	3701      	adds	r7, #1
 800ff74:	42bb      	cmp	r3, r7
 800ff76:	f6ff aee0 	blt.w	800fd3a <__gethex+0x1be>
 800ff7a:	2501      	movs	r5, #1
 800ff7c:	e7c2      	b.n	800ff04 <__gethex+0x388>
 800ff7e:	f016 061f 	ands.w	r6, r6, #31
 800ff82:	d0fa      	beq.n	800ff7a <__gethex+0x3fe>
 800ff84:	4453      	add	r3, sl
 800ff86:	f1c6 0620 	rsb	r6, r6, #32
 800ff8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ff8e:	f7fe f8d5 	bl	800e13c <__hi0bits>
 800ff92:	42b0      	cmp	r0, r6
 800ff94:	dbe7      	blt.n	800ff66 <__gethex+0x3ea>
 800ff96:	e7f0      	b.n	800ff7a <__gethex+0x3fe>
 800ff98:	08011801 	.word	0x08011801

0800ff9c <L_shift>:
 800ff9c:	f1c2 0208 	rsb	r2, r2, #8
 800ffa0:	0092      	lsls	r2, r2, #2
 800ffa2:	b570      	push	{r4, r5, r6, lr}
 800ffa4:	f1c2 0620 	rsb	r6, r2, #32
 800ffa8:	6843      	ldr	r3, [r0, #4]
 800ffaa:	6804      	ldr	r4, [r0, #0]
 800ffac:	fa03 f506 	lsl.w	r5, r3, r6
 800ffb0:	432c      	orrs	r4, r5
 800ffb2:	40d3      	lsrs	r3, r2
 800ffb4:	6004      	str	r4, [r0, #0]
 800ffb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ffba:	4288      	cmp	r0, r1
 800ffbc:	d3f4      	bcc.n	800ffa8 <L_shift+0xc>
 800ffbe:	bd70      	pop	{r4, r5, r6, pc}

0800ffc0 <__match>:
 800ffc0:	b530      	push	{r4, r5, lr}
 800ffc2:	6803      	ldr	r3, [r0, #0]
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffca:	b914      	cbnz	r4, 800ffd2 <__match+0x12>
 800ffcc:	6003      	str	r3, [r0, #0]
 800ffce:	2001      	movs	r0, #1
 800ffd0:	bd30      	pop	{r4, r5, pc}
 800ffd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ffda:	2d19      	cmp	r5, #25
 800ffdc:	bf98      	it	ls
 800ffde:	3220      	addls	r2, #32
 800ffe0:	42a2      	cmp	r2, r4
 800ffe2:	d0f0      	beq.n	800ffc6 <__match+0x6>
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	e7f3      	b.n	800ffd0 <__match+0x10>

0800ffe8 <__hexnan>:
 800ffe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffec:	680b      	ldr	r3, [r1, #0]
 800ffee:	6801      	ldr	r1, [r0, #0]
 800fff0:	115e      	asrs	r6, r3, #5
 800fff2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fff6:	f013 031f 	ands.w	r3, r3, #31
 800fffa:	b087      	sub	sp, #28
 800fffc:	bf18      	it	ne
 800fffe:	3604      	addne	r6, #4
 8010000:	2500      	movs	r5, #0
 8010002:	1f37      	subs	r7, r6, #4
 8010004:	4682      	mov	sl, r0
 8010006:	4690      	mov	r8, r2
 8010008:	9301      	str	r3, [sp, #4]
 801000a:	f846 5c04 	str.w	r5, [r6, #-4]
 801000e:	46b9      	mov	r9, r7
 8010010:	463c      	mov	r4, r7
 8010012:	9502      	str	r5, [sp, #8]
 8010014:	46ab      	mov	fp, r5
 8010016:	784a      	ldrb	r2, [r1, #1]
 8010018:	1c4b      	adds	r3, r1, #1
 801001a:	9303      	str	r3, [sp, #12]
 801001c:	b342      	cbz	r2, 8010070 <__hexnan+0x88>
 801001e:	4610      	mov	r0, r2
 8010020:	9105      	str	r1, [sp, #20]
 8010022:	9204      	str	r2, [sp, #16]
 8010024:	f7ff fd94 	bl	800fb50 <__hexdig_fun>
 8010028:	2800      	cmp	r0, #0
 801002a:	d151      	bne.n	80100d0 <__hexnan+0xe8>
 801002c:	9a04      	ldr	r2, [sp, #16]
 801002e:	9905      	ldr	r1, [sp, #20]
 8010030:	2a20      	cmp	r2, #32
 8010032:	d818      	bhi.n	8010066 <__hexnan+0x7e>
 8010034:	9b02      	ldr	r3, [sp, #8]
 8010036:	459b      	cmp	fp, r3
 8010038:	dd13      	ble.n	8010062 <__hexnan+0x7a>
 801003a:	454c      	cmp	r4, r9
 801003c:	d206      	bcs.n	801004c <__hexnan+0x64>
 801003e:	2d07      	cmp	r5, #7
 8010040:	dc04      	bgt.n	801004c <__hexnan+0x64>
 8010042:	462a      	mov	r2, r5
 8010044:	4649      	mov	r1, r9
 8010046:	4620      	mov	r0, r4
 8010048:	f7ff ffa8 	bl	800ff9c <L_shift>
 801004c:	4544      	cmp	r4, r8
 801004e:	d952      	bls.n	80100f6 <__hexnan+0x10e>
 8010050:	2300      	movs	r3, #0
 8010052:	f1a4 0904 	sub.w	r9, r4, #4
 8010056:	f844 3c04 	str.w	r3, [r4, #-4]
 801005a:	f8cd b008 	str.w	fp, [sp, #8]
 801005e:	464c      	mov	r4, r9
 8010060:	461d      	mov	r5, r3
 8010062:	9903      	ldr	r1, [sp, #12]
 8010064:	e7d7      	b.n	8010016 <__hexnan+0x2e>
 8010066:	2a29      	cmp	r2, #41	@ 0x29
 8010068:	d157      	bne.n	801011a <__hexnan+0x132>
 801006a:	3102      	adds	r1, #2
 801006c:	f8ca 1000 	str.w	r1, [sl]
 8010070:	f1bb 0f00 	cmp.w	fp, #0
 8010074:	d051      	beq.n	801011a <__hexnan+0x132>
 8010076:	454c      	cmp	r4, r9
 8010078:	d206      	bcs.n	8010088 <__hexnan+0xa0>
 801007a:	2d07      	cmp	r5, #7
 801007c:	dc04      	bgt.n	8010088 <__hexnan+0xa0>
 801007e:	462a      	mov	r2, r5
 8010080:	4649      	mov	r1, r9
 8010082:	4620      	mov	r0, r4
 8010084:	f7ff ff8a 	bl	800ff9c <L_shift>
 8010088:	4544      	cmp	r4, r8
 801008a:	d936      	bls.n	80100fa <__hexnan+0x112>
 801008c:	f1a8 0204 	sub.w	r2, r8, #4
 8010090:	4623      	mov	r3, r4
 8010092:	f853 1b04 	ldr.w	r1, [r3], #4
 8010096:	f842 1f04 	str.w	r1, [r2, #4]!
 801009a:	429f      	cmp	r7, r3
 801009c:	d2f9      	bcs.n	8010092 <__hexnan+0xaa>
 801009e:	1b3b      	subs	r3, r7, r4
 80100a0:	f023 0303 	bic.w	r3, r3, #3
 80100a4:	3304      	adds	r3, #4
 80100a6:	3401      	adds	r4, #1
 80100a8:	3e03      	subs	r6, #3
 80100aa:	42b4      	cmp	r4, r6
 80100ac:	bf88      	it	hi
 80100ae:	2304      	movhi	r3, #4
 80100b0:	4443      	add	r3, r8
 80100b2:	2200      	movs	r2, #0
 80100b4:	f843 2b04 	str.w	r2, [r3], #4
 80100b8:	429f      	cmp	r7, r3
 80100ba:	d2fb      	bcs.n	80100b4 <__hexnan+0xcc>
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	b91b      	cbnz	r3, 80100c8 <__hexnan+0xe0>
 80100c0:	4547      	cmp	r7, r8
 80100c2:	d128      	bne.n	8010116 <__hexnan+0x12e>
 80100c4:	2301      	movs	r3, #1
 80100c6:	603b      	str	r3, [r7, #0]
 80100c8:	2005      	movs	r0, #5
 80100ca:	b007      	add	sp, #28
 80100cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d0:	3501      	adds	r5, #1
 80100d2:	2d08      	cmp	r5, #8
 80100d4:	f10b 0b01 	add.w	fp, fp, #1
 80100d8:	dd06      	ble.n	80100e8 <__hexnan+0x100>
 80100da:	4544      	cmp	r4, r8
 80100dc:	d9c1      	bls.n	8010062 <__hexnan+0x7a>
 80100de:	2300      	movs	r3, #0
 80100e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80100e4:	2501      	movs	r5, #1
 80100e6:	3c04      	subs	r4, #4
 80100e8:	6822      	ldr	r2, [r4, #0]
 80100ea:	f000 000f 	and.w	r0, r0, #15
 80100ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80100f2:	6020      	str	r0, [r4, #0]
 80100f4:	e7b5      	b.n	8010062 <__hexnan+0x7a>
 80100f6:	2508      	movs	r5, #8
 80100f8:	e7b3      	b.n	8010062 <__hexnan+0x7a>
 80100fa:	9b01      	ldr	r3, [sp, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d0dd      	beq.n	80100bc <__hexnan+0xd4>
 8010100:	f1c3 0320 	rsb	r3, r3, #32
 8010104:	f04f 32ff 	mov.w	r2, #4294967295
 8010108:	40da      	lsrs	r2, r3
 801010a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801010e:	4013      	ands	r3, r2
 8010110:	f846 3c04 	str.w	r3, [r6, #-4]
 8010114:	e7d2      	b.n	80100bc <__hexnan+0xd4>
 8010116:	3f04      	subs	r7, #4
 8010118:	e7d0      	b.n	80100bc <__hexnan+0xd4>
 801011a:	2004      	movs	r0, #4
 801011c:	e7d5      	b.n	80100ca <__hexnan+0xe2>

0801011e <__ascii_mbtowc>:
 801011e:	b082      	sub	sp, #8
 8010120:	b901      	cbnz	r1, 8010124 <__ascii_mbtowc+0x6>
 8010122:	a901      	add	r1, sp, #4
 8010124:	b142      	cbz	r2, 8010138 <__ascii_mbtowc+0x1a>
 8010126:	b14b      	cbz	r3, 801013c <__ascii_mbtowc+0x1e>
 8010128:	7813      	ldrb	r3, [r2, #0]
 801012a:	600b      	str	r3, [r1, #0]
 801012c:	7812      	ldrb	r2, [r2, #0]
 801012e:	1e10      	subs	r0, r2, #0
 8010130:	bf18      	it	ne
 8010132:	2001      	movne	r0, #1
 8010134:	b002      	add	sp, #8
 8010136:	4770      	bx	lr
 8010138:	4610      	mov	r0, r2
 801013a:	e7fb      	b.n	8010134 <__ascii_mbtowc+0x16>
 801013c:	f06f 0001 	mvn.w	r0, #1
 8010140:	e7f8      	b.n	8010134 <__ascii_mbtowc+0x16>

08010142 <_realloc_r>:
 8010142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010146:	4607      	mov	r7, r0
 8010148:	4614      	mov	r4, r2
 801014a:	460d      	mov	r5, r1
 801014c:	b921      	cbnz	r1, 8010158 <_realloc_r+0x16>
 801014e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010152:	4611      	mov	r1, r2
 8010154:	f7fd be74 	b.w	800de40 <_malloc_r>
 8010158:	b92a      	cbnz	r2, 8010166 <_realloc_r+0x24>
 801015a:	f7fd fdfd 	bl	800dd58 <_free_r>
 801015e:	4625      	mov	r5, r4
 8010160:	4628      	mov	r0, r5
 8010162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010166:	f000 f840 	bl	80101ea <_malloc_usable_size_r>
 801016a:	4284      	cmp	r4, r0
 801016c:	4606      	mov	r6, r0
 801016e:	d802      	bhi.n	8010176 <_realloc_r+0x34>
 8010170:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010174:	d8f4      	bhi.n	8010160 <_realloc_r+0x1e>
 8010176:	4621      	mov	r1, r4
 8010178:	4638      	mov	r0, r7
 801017a:	f7fd fe61 	bl	800de40 <_malloc_r>
 801017e:	4680      	mov	r8, r0
 8010180:	b908      	cbnz	r0, 8010186 <_realloc_r+0x44>
 8010182:	4645      	mov	r5, r8
 8010184:	e7ec      	b.n	8010160 <_realloc_r+0x1e>
 8010186:	42b4      	cmp	r4, r6
 8010188:	4622      	mov	r2, r4
 801018a:	4629      	mov	r1, r5
 801018c:	bf28      	it	cs
 801018e:	4632      	movcs	r2, r6
 8010190:	f7fc ff73 	bl	800d07a <memcpy>
 8010194:	4629      	mov	r1, r5
 8010196:	4638      	mov	r0, r7
 8010198:	f7fd fdde 	bl	800dd58 <_free_r>
 801019c:	e7f1      	b.n	8010182 <_realloc_r+0x40>

0801019e <__ascii_wctomb>:
 801019e:	4603      	mov	r3, r0
 80101a0:	4608      	mov	r0, r1
 80101a2:	b141      	cbz	r1, 80101b6 <__ascii_wctomb+0x18>
 80101a4:	2aff      	cmp	r2, #255	@ 0xff
 80101a6:	d904      	bls.n	80101b2 <__ascii_wctomb+0x14>
 80101a8:	228a      	movs	r2, #138	@ 0x8a
 80101aa:	601a      	str	r2, [r3, #0]
 80101ac:	f04f 30ff 	mov.w	r0, #4294967295
 80101b0:	4770      	bx	lr
 80101b2:	700a      	strb	r2, [r1, #0]
 80101b4:	2001      	movs	r0, #1
 80101b6:	4770      	bx	lr

080101b8 <fiprintf>:
 80101b8:	b40e      	push	{r1, r2, r3}
 80101ba:	b503      	push	{r0, r1, lr}
 80101bc:	4601      	mov	r1, r0
 80101be:	ab03      	add	r3, sp, #12
 80101c0:	4805      	ldr	r0, [pc, #20]	@ (80101d8 <fiprintf+0x20>)
 80101c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80101c6:	6800      	ldr	r0, [r0, #0]
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	f000 f83f 	bl	801024c <_vfiprintf_r>
 80101ce:	b002      	add	sp, #8
 80101d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80101d4:	b003      	add	sp, #12
 80101d6:	4770      	bx	lr
 80101d8:	20000060 	.word	0x20000060

080101dc <abort>:
 80101dc:	b508      	push	{r3, lr}
 80101de:	2006      	movs	r0, #6
 80101e0:	f000 fa08 	bl	80105f4 <raise>
 80101e4:	2001      	movs	r0, #1
 80101e6:	f7f4 f9d2 	bl	800458e <_exit>

080101ea <_malloc_usable_size_r>:
 80101ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101ee:	1f18      	subs	r0, r3, #4
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	bfbc      	itt	lt
 80101f4:	580b      	ldrlt	r3, [r1, r0]
 80101f6:	18c0      	addlt	r0, r0, r3
 80101f8:	4770      	bx	lr

080101fa <__sfputc_r>:
 80101fa:	6893      	ldr	r3, [r2, #8]
 80101fc:	3b01      	subs	r3, #1
 80101fe:	2b00      	cmp	r3, #0
 8010200:	b410      	push	{r4}
 8010202:	6093      	str	r3, [r2, #8]
 8010204:	da08      	bge.n	8010218 <__sfputc_r+0x1e>
 8010206:	6994      	ldr	r4, [r2, #24]
 8010208:	42a3      	cmp	r3, r4
 801020a:	db01      	blt.n	8010210 <__sfputc_r+0x16>
 801020c:	290a      	cmp	r1, #10
 801020e:	d103      	bne.n	8010218 <__sfputc_r+0x1e>
 8010210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010214:	f000 b932 	b.w	801047c <__swbuf_r>
 8010218:	6813      	ldr	r3, [r2, #0]
 801021a:	1c58      	adds	r0, r3, #1
 801021c:	6010      	str	r0, [r2, #0]
 801021e:	7019      	strb	r1, [r3, #0]
 8010220:	4608      	mov	r0, r1
 8010222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010226:	4770      	bx	lr

08010228 <__sfputs_r>:
 8010228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801022a:	4606      	mov	r6, r0
 801022c:	460f      	mov	r7, r1
 801022e:	4614      	mov	r4, r2
 8010230:	18d5      	adds	r5, r2, r3
 8010232:	42ac      	cmp	r4, r5
 8010234:	d101      	bne.n	801023a <__sfputs_r+0x12>
 8010236:	2000      	movs	r0, #0
 8010238:	e007      	b.n	801024a <__sfputs_r+0x22>
 801023a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801023e:	463a      	mov	r2, r7
 8010240:	4630      	mov	r0, r6
 8010242:	f7ff ffda 	bl	80101fa <__sfputc_r>
 8010246:	1c43      	adds	r3, r0, #1
 8010248:	d1f3      	bne.n	8010232 <__sfputs_r+0xa>
 801024a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801024c <_vfiprintf_r>:
 801024c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010250:	460d      	mov	r5, r1
 8010252:	b09d      	sub	sp, #116	@ 0x74
 8010254:	4614      	mov	r4, r2
 8010256:	4698      	mov	r8, r3
 8010258:	4606      	mov	r6, r0
 801025a:	b118      	cbz	r0, 8010264 <_vfiprintf_r+0x18>
 801025c:	6a03      	ldr	r3, [r0, #32]
 801025e:	b90b      	cbnz	r3, 8010264 <_vfiprintf_r+0x18>
 8010260:	f7fc fd58 	bl	800cd14 <__sinit>
 8010264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010266:	07d9      	lsls	r1, r3, #31
 8010268:	d405      	bmi.n	8010276 <_vfiprintf_r+0x2a>
 801026a:	89ab      	ldrh	r3, [r5, #12]
 801026c:	059a      	lsls	r2, r3, #22
 801026e:	d402      	bmi.n	8010276 <_vfiprintf_r+0x2a>
 8010270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010272:	f7fc ff00 	bl	800d076 <__retarget_lock_acquire_recursive>
 8010276:	89ab      	ldrh	r3, [r5, #12]
 8010278:	071b      	lsls	r3, r3, #28
 801027a:	d501      	bpl.n	8010280 <_vfiprintf_r+0x34>
 801027c:	692b      	ldr	r3, [r5, #16]
 801027e:	b99b      	cbnz	r3, 80102a8 <_vfiprintf_r+0x5c>
 8010280:	4629      	mov	r1, r5
 8010282:	4630      	mov	r0, r6
 8010284:	f000 f938 	bl	80104f8 <__swsetup_r>
 8010288:	b170      	cbz	r0, 80102a8 <_vfiprintf_r+0x5c>
 801028a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801028c:	07dc      	lsls	r4, r3, #31
 801028e:	d504      	bpl.n	801029a <_vfiprintf_r+0x4e>
 8010290:	f04f 30ff 	mov.w	r0, #4294967295
 8010294:	b01d      	add	sp, #116	@ 0x74
 8010296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801029a:	89ab      	ldrh	r3, [r5, #12]
 801029c:	0598      	lsls	r0, r3, #22
 801029e:	d4f7      	bmi.n	8010290 <_vfiprintf_r+0x44>
 80102a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80102a2:	f7fc fee9 	bl	800d078 <__retarget_lock_release_recursive>
 80102a6:	e7f3      	b.n	8010290 <_vfiprintf_r+0x44>
 80102a8:	2300      	movs	r3, #0
 80102aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80102ac:	2320      	movs	r3, #32
 80102ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80102b6:	2330      	movs	r3, #48	@ 0x30
 80102b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010468 <_vfiprintf_r+0x21c>
 80102bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80102c0:	f04f 0901 	mov.w	r9, #1
 80102c4:	4623      	mov	r3, r4
 80102c6:	469a      	mov	sl, r3
 80102c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102cc:	b10a      	cbz	r2, 80102d2 <_vfiprintf_r+0x86>
 80102ce:	2a25      	cmp	r2, #37	@ 0x25
 80102d0:	d1f9      	bne.n	80102c6 <_vfiprintf_r+0x7a>
 80102d2:	ebba 0b04 	subs.w	fp, sl, r4
 80102d6:	d00b      	beq.n	80102f0 <_vfiprintf_r+0xa4>
 80102d8:	465b      	mov	r3, fp
 80102da:	4622      	mov	r2, r4
 80102dc:	4629      	mov	r1, r5
 80102de:	4630      	mov	r0, r6
 80102e0:	f7ff ffa2 	bl	8010228 <__sfputs_r>
 80102e4:	3001      	adds	r0, #1
 80102e6:	f000 80a7 	beq.w	8010438 <_vfiprintf_r+0x1ec>
 80102ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102ec:	445a      	add	r2, fp
 80102ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80102f0:	f89a 3000 	ldrb.w	r3, [sl]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f000 809f 	beq.w	8010438 <_vfiprintf_r+0x1ec>
 80102fa:	2300      	movs	r3, #0
 80102fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010304:	f10a 0a01 	add.w	sl, sl, #1
 8010308:	9304      	str	r3, [sp, #16]
 801030a:	9307      	str	r3, [sp, #28]
 801030c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010310:	931a      	str	r3, [sp, #104]	@ 0x68
 8010312:	4654      	mov	r4, sl
 8010314:	2205      	movs	r2, #5
 8010316:	f814 1b01 	ldrb.w	r1, [r4], #1
 801031a:	4853      	ldr	r0, [pc, #332]	@ (8010468 <_vfiprintf_r+0x21c>)
 801031c:	f7ef ff58 	bl	80001d0 <memchr>
 8010320:	9a04      	ldr	r2, [sp, #16]
 8010322:	b9d8      	cbnz	r0, 801035c <_vfiprintf_r+0x110>
 8010324:	06d1      	lsls	r1, r2, #27
 8010326:	bf44      	itt	mi
 8010328:	2320      	movmi	r3, #32
 801032a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801032e:	0713      	lsls	r3, r2, #28
 8010330:	bf44      	itt	mi
 8010332:	232b      	movmi	r3, #43	@ 0x2b
 8010334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010338:	f89a 3000 	ldrb.w	r3, [sl]
 801033c:	2b2a      	cmp	r3, #42	@ 0x2a
 801033e:	d015      	beq.n	801036c <_vfiprintf_r+0x120>
 8010340:	9a07      	ldr	r2, [sp, #28]
 8010342:	4654      	mov	r4, sl
 8010344:	2000      	movs	r0, #0
 8010346:	f04f 0c0a 	mov.w	ip, #10
 801034a:	4621      	mov	r1, r4
 801034c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010350:	3b30      	subs	r3, #48	@ 0x30
 8010352:	2b09      	cmp	r3, #9
 8010354:	d94b      	bls.n	80103ee <_vfiprintf_r+0x1a2>
 8010356:	b1b0      	cbz	r0, 8010386 <_vfiprintf_r+0x13a>
 8010358:	9207      	str	r2, [sp, #28]
 801035a:	e014      	b.n	8010386 <_vfiprintf_r+0x13a>
 801035c:	eba0 0308 	sub.w	r3, r0, r8
 8010360:	fa09 f303 	lsl.w	r3, r9, r3
 8010364:	4313      	orrs	r3, r2
 8010366:	9304      	str	r3, [sp, #16]
 8010368:	46a2      	mov	sl, r4
 801036a:	e7d2      	b.n	8010312 <_vfiprintf_r+0xc6>
 801036c:	9b03      	ldr	r3, [sp, #12]
 801036e:	1d19      	adds	r1, r3, #4
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	9103      	str	r1, [sp, #12]
 8010374:	2b00      	cmp	r3, #0
 8010376:	bfbb      	ittet	lt
 8010378:	425b      	neglt	r3, r3
 801037a:	f042 0202 	orrlt.w	r2, r2, #2
 801037e:	9307      	strge	r3, [sp, #28]
 8010380:	9307      	strlt	r3, [sp, #28]
 8010382:	bfb8      	it	lt
 8010384:	9204      	strlt	r2, [sp, #16]
 8010386:	7823      	ldrb	r3, [r4, #0]
 8010388:	2b2e      	cmp	r3, #46	@ 0x2e
 801038a:	d10a      	bne.n	80103a2 <_vfiprintf_r+0x156>
 801038c:	7863      	ldrb	r3, [r4, #1]
 801038e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010390:	d132      	bne.n	80103f8 <_vfiprintf_r+0x1ac>
 8010392:	9b03      	ldr	r3, [sp, #12]
 8010394:	1d1a      	adds	r2, r3, #4
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	9203      	str	r2, [sp, #12]
 801039a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801039e:	3402      	adds	r4, #2
 80103a0:	9305      	str	r3, [sp, #20]
 80103a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010478 <_vfiprintf_r+0x22c>
 80103a6:	7821      	ldrb	r1, [r4, #0]
 80103a8:	2203      	movs	r2, #3
 80103aa:	4650      	mov	r0, sl
 80103ac:	f7ef ff10 	bl	80001d0 <memchr>
 80103b0:	b138      	cbz	r0, 80103c2 <_vfiprintf_r+0x176>
 80103b2:	9b04      	ldr	r3, [sp, #16]
 80103b4:	eba0 000a 	sub.w	r0, r0, sl
 80103b8:	2240      	movs	r2, #64	@ 0x40
 80103ba:	4082      	lsls	r2, r0
 80103bc:	4313      	orrs	r3, r2
 80103be:	3401      	adds	r4, #1
 80103c0:	9304      	str	r3, [sp, #16]
 80103c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103c6:	4829      	ldr	r0, [pc, #164]	@ (801046c <_vfiprintf_r+0x220>)
 80103c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80103cc:	2206      	movs	r2, #6
 80103ce:	f7ef feff 	bl	80001d0 <memchr>
 80103d2:	2800      	cmp	r0, #0
 80103d4:	d03f      	beq.n	8010456 <_vfiprintf_r+0x20a>
 80103d6:	4b26      	ldr	r3, [pc, #152]	@ (8010470 <_vfiprintf_r+0x224>)
 80103d8:	bb1b      	cbnz	r3, 8010422 <_vfiprintf_r+0x1d6>
 80103da:	9b03      	ldr	r3, [sp, #12]
 80103dc:	3307      	adds	r3, #7
 80103de:	f023 0307 	bic.w	r3, r3, #7
 80103e2:	3308      	adds	r3, #8
 80103e4:	9303      	str	r3, [sp, #12]
 80103e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103e8:	443b      	add	r3, r7
 80103ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80103ec:	e76a      	b.n	80102c4 <_vfiprintf_r+0x78>
 80103ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80103f2:	460c      	mov	r4, r1
 80103f4:	2001      	movs	r0, #1
 80103f6:	e7a8      	b.n	801034a <_vfiprintf_r+0xfe>
 80103f8:	2300      	movs	r3, #0
 80103fa:	3401      	adds	r4, #1
 80103fc:	9305      	str	r3, [sp, #20]
 80103fe:	4619      	mov	r1, r3
 8010400:	f04f 0c0a 	mov.w	ip, #10
 8010404:	4620      	mov	r0, r4
 8010406:	f810 2b01 	ldrb.w	r2, [r0], #1
 801040a:	3a30      	subs	r2, #48	@ 0x30
 801040c:	2a09      	cmp	r2, #9
 801040e:	d903      	bls.n	8010418 <_vfiprintf_r+0x1cc>
 8010410:	2b00      	cmp	r3, #0
 8010412:	d0c6      	beq.n	80103a2 <_vfiprintf_r+0x156>
 8010414:	9105      	str	r1, [sp, #20]
 8010416:	e7c4      	b.n	80103a2 <_vfiprintf_r+0x156>
 8010418:	fb0c 2101 	mla	r1, ip, r1, r2
 801041c:	4604      	mov	r4, r0
 801041e:	2301      	movs	r3, #1
 8010420:	e7f0      	b.n	8010404 <_vfiprintf_r+0x1b8>
 8010422:	ab03      	add	r3, sp, #12
 8010424:	9300      	str	r3, [sp, #0]
 8010426:	462a      	mov	r2, r5
 8010428:	4b12      	ldr	r3, [pc, #72]	@ (8010474 <_vfiprintf_r+0x228>)
 801042a:	a904      	add	r1, sp, #16
 801042c:	4630      	mov	r0, r6
 801042e:	f7fb fe21 	bl	800c074 <_printf_float>
 8010432:	4607      	mov	r7, r0
 8010434:	1c78      	adds	r0, r7, #1
 8010436:	d1d6      	bne.n	80103e6 <_vfiprintf_r+0x19a>
 8010438:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801043a:	07d9      	lsls	r1, r3, #31
 801043c:	d405      	bmi.n	801044a <_vfiprintf_r+0x1fe>
 801043e:	89ab      	ldrh	r3, [r5, #12]
 8010440:	059a      	lsls	r2, r3, #22
 8010442:	d402      	bmi.n	801044a <_vfiprintf_r+0x1fe>
 8010444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010446:	f7fc fe17 	bl	800d078 <__retarget_lock_release_recursive>
 801044a:	89ab      	ldrh	r3, [r5, #12]
 801044c:	065b      	lsls	r3, r3, #25
 801044e:	f53f af1f 	bmi.w	8010290 <_vfiprintf_r+0x44>
 8010452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010454:	e71e      	b.n	8010294 <_vfiprintf_r+0x48>
 8010456:	ab03      	add	r3, sp, #12
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	462a      	mov	r2, r5
 801045c:	4b05      	ldr	r3, [pc, #20]	@ (8010474 <_vfiprintf_r+0x228>)
 801045e:	a904      	add	r1, sp, #16
 8010460:	4630      	mov	r0, r6
 8010462:	f7fc f89f 	bl	800c5a4 <_printf_i>
 8010466:	e7e4      	b.n	8010432 <_vfiprintf_r+0x1e6>
 8010468:	0801186d 	.word	0x0801186d
 801046c:	08011877 	.word	0x08011877
 8010470:	0800c075 	.word	0x0800c075
 8010474:	08010229 	.word	0x08010229
 8010478:	08011873 	.word	0x08011873

0801047c <__swbuf_r>:
 801047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801047e:	460e      	mov	r6, r1
 8010480:	4614      	mov	r4, r2
 8010482:	4605      	mov	r5, r0
 8010484:	b118      	cbz	r0, 801048e <__swbuf_r+0x12>
 8010486:	6a03      	ldr	r3, [r0, #32]
 8010488:	b90b      	cbnz	r3, 801048e <__swbuf_r+0x12>
 801048a:	f7fc fc43 	bl	800cd14 <__sinit>
 801048e:	69a3      	ldr	r3, [r4, #24]
 8010490:	60a3      	str	r3, [r4, #8]
 8010492:	89a3      	ldrh	r3, [r4, #12]
 8010494:	071a      	lsls	r2, r3, #28
 8010496:	d501      	bpl.n	801049c <__swbuf_r+0x20>
 8010498:	6923      	ldr	r3, [r4, #16]
 801049a:	b943      	cbnz	r3, 80104ae <__swbuf_r+0x32>
 801049c:	4621      	mov	r1, r4
 801049e:	4628      	mov	r0, r5
 80104a0:	f000 f82a 	bl	80104f8 <__swsetup_r>
 80104a4:	b118      	cbz	r0, 80104ae <__swbuf_r+0x32>
 80104a6:	f04f 37ff 	mov.w	r7, #4294967295
 80104aa:	4638      	mov	r0, r7
 80104ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104ae:	6823      	ldr	r3, [r4, #0]
 80104b0:	6922      	ldr	r2, [r4, #16]
 80104b2:	1a98      	subs	r0, r3, r2
 80104b4:	6963      	ldr	r3, [r4, #20]
 80104b6:	b2f6      	uxtb	r6, r6
 80104b8:	4283      	cmp	r3, r0
 80104ba:	4637      	mov	r7, r6
 80104bc:	dc05      	bgt.n	80104ca <__swbuf_r+0x4e>
 80104be:	4621      	mov	r1, r4
 80104c0:	4628      	mov	r0, r5
 80104c2:	f7ff fa53 	bl	800f96c <_fflush_r>
 80104c6:	2800      	cmp	r0, #0
 80104c8:	d1ed      	bne.n	80104a6 <__swbuf_r+0x2a>
 80104ca:	68a3      	ldr	r3, [r4, #8]
 80104cc:	3b01      	subs	r3, #1
 80104ce:	60a3      	str	r3, [r4, #8]
 80104d0:	6823      	ldr	r3, [r4, #0]
 80104d2:	1c5a      	adds	r2, r3, #1
 80104d4:	6022      	str	r2, [r4, #0]
 80104d6:	701e      	strb	r6, [r3, #0]
 80104d8:	6962      	ldr	r2, [r4, #20]
 80104da:	1c43      	adds	r3, r0, #1
 80104dc:	429a      	cmp	r2, r3
 80104de:	d004      	beq.n	80104ea <__swbuf_r+0x6e>
 80104e0:	89a3      	ldrh	r3, [r4, #12]
 80104e2:	07db      	lsls	r3, r3, #31
 80104e4:	d5e1      	bpl.n	80104aa <__swbuf_r+0x2e>
 80104e6:	2e0a      	cmp	r6, #10
 80104e8:	d1df      	bne.n	80104aa <__swbuf_r+0x2e>
 80104ea:	4621      	mov	r1, r4
 80104ec:	4628      	mov	r0, r5
 80104ee:	f7ff fa3d 	bl	800f96c <_fflush_r>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d0d9      	beq.n	80104aa <__swbuf_r+0x2e>
 80104f6:	e7d6      	b.n	80104a6 <__swbuf_r+0x2a>

080104f8 <__swsetup_r>:
 80104f8:	b538      	push	{r3, r4, r5, lr}
 80104fa:	4b29      	ldr	r3, [pc, #164]	@ (80105a0 <__swsetup_r+0xa8>)
 80104fc:	4605      	mov	r5, r0
 80104fe:	6818      	ldr	r0, [r3, #0]
 8010500:	460c      	mov	r4, r1
 8010502:	b118      	cbz	r0, 801050c <__swsetup_r+0x14>
 8010504:	6a03      	ldr	r3, [r0, #32]
 8010506:	b90b      	cbnz	r3, 801050c <__swsetup_r+0x14>
 8010508:	f7fc fc04 	bl	800cd14 <__sinit>
 801050c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010510:	0719      	lsls	r1, r3, #28
 8010512:	d422      	bmi.n	801055a <__swsetup_r+0x62>
 8010514:	06da      	lsls	r2, r3, #27
 8010516:	d407      	bmi.n	8010528 <__swsetup_r+0x30>
 8010518:	2209      	movs	r2, #9
 801051a:	602a      	str	r2, [r5, #0]
 801051c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010520:	81a3      	strh	r3, [r4, #12]
 8010522:	f04f 30ff 	mov.w	r0, #4294967295
 8010526:	e033      	b.n	8010590 <__swsetup_r+0x98>
 8010528:	0758      	lsls	r0, r3, #29
 801052a:	d512      	bpl.n	8010552 <__swsetup_r+0x5a>
 801052c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801052e:	b141      	cbz	r1, 8010542 <__swsetup_r+0x4a>
 8010530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010534:	4299      	cmp	r1, r3
 8010536:	d002      	beq.n	801053e <__swsetup_r+0x46>
 8010538:	4628      	mov	r0, r5
 801053a:	f7fd fc0d 	bl	800dd58 <_free_r>
 801053e:	2300      	movs	r3, #0
 8010540:	6363      	str	r3, [r4, #52]	@ 0x34
 8010542:	89a3      	ldrh	r3, [r4, #12]
 8010544:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010548:	81a3      	strh	r3, [r4, #12]
 801054a:	2300      	movs	r3, #0
 801054c:	6063      	str	r3, [r4, #4]
 801054e:	6923      	ldr	r3, [r4, #16]
 8010550:	6023      	str	r3, [r4, #0]
 8010552:	89a3      	ldrh	r3, [r4, #12]
 8010554:	f043 0308 	orr.w	r3, r3, #8
 8010558:	81a3      	strh	r3, [r4, #12]
 801055a:	6923      	ldr	r3, [r4, #16]
 801055c:	b94b      	cbnz	r3, 8010572 <__swsetup_r+0x7a>
 801055e:	89a3      	ldrh	r3, [r4, #12]
 8010560:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010568:	d003      	beq.n	8010572 <__swsetup_r+0x7a>
 801056a:	4621      	mov	r1, r4
 801056c:	4628      	mov	r0, r5
 801056e:	f000 f883 	bl	8010678 <__smakebuf_r>
 8010572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010576:	f013 0201 	ands.w	r2, r3, #1
 801057a:	d00a      	beq.n	8010592 <__swsetup_r+0x9a>
 801057c:	2200      	movs	r2, #0
 801057e:	60a2      	str	r2, [r4, #8]
 8010580:	6962      	ldr	r2, [r4, #20]
 8010582:	4252      	negs	r2, r2
 8010584:	61a2      	str	r2, [r4, #24]
 8010586:	6922      	ldr	r2, [r4, #16]
 8010588:	b942      	cbnz	r2, 801059c <__swsetup_r+0xa4>
 801058a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801058e:	d1c5      	bne.n	801051c <__swsetup_r+0x24>
 8010590:	bd38      	pop	{r3, r4, r5, pc}
 8010592:	0799      	lsls	r1, r3, #30
 8010594:	bf58      	it	pl
 8010596:	6962      	ldrpl	r2, [r4, #20]
 8010598:	60a2      	str	r2, [r4, #8]
 801059a:	e7f4      	b.n	8010586 <__swsetup_r+0x8e>
 801059c:	2000      	movs	r0, #0
 801059e:	e7f7      	b.n	8010590 <__swsetup_r+0x98>
 80105a0:	20000060 	.word	0x20000060

080105a4 <_raise_r>:
 80105a4:	291f      	cmp	r1, #31
 80105a6:	b538      	push	{r3, r4, r5, lr}
 80105a8:	4605      	mov	r5, r0
 80105aa:	460c      	mov	r4, r1
 80105ac:	d904      	bls.n	80105b8 <_raise_r+0x14>
 80105ae:	2316      	movs	r3, #22
 80105b0:	6003      	str	r3, [r0, #0]
 80105b2:	f04f 30ff 	mov.w	r0, #4294967295
 80105b6:	bd38      	pop	{r3, r4, r5, pc}
 80105b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80105ba:	b112      	cbz	r2, 80105c2 <_raise_r+0x1e>
 80105bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105c0:	b94b      	cbnz	r3, 80105d6 <_raise_r+0x32>
 80105c2:	4628      	mov	r0, r5
 80105c4:	f000 f830 	bl	8010628 <_getpid_r>
 80105c8:	4622      	mov	r2, r4
 80105ca:	4601      	mov	r1, r0
 80105cc:	4628      	mov	r0, r5
 80105ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105d2:	f000 b817 	b.w	8010604 <_kill_r>
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d00a      	beq.n	80105f0 <_raise_r+0x4c>
 80105da:	1c59      	adds	r1, r3, #1
 80105dc:	d103      	bne.n	80105e6 <_raise_r+0x42>
 80105de:	2316      	movs	r3, #22
 80105e0:	6003      	str	r3, [r0, #0]
 80105e2:	2001      	movs	r0, #1
 80105e4:	e7e7      	b.n	80105b6 <_raise_r+0x12>
 80105e6:	2100      	movs	r1, #0
 80105e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80105ec:	4620      	mov	r0, r4
 80105ee:	4798      	blx	r3
 80105f0:	2000      	movs	r0, #0
 80105f2:	e7e0      	b.n	80105b6 <_raise_r+0x12>

080105f4 <raise>:
 80105f4:	4b02      	ldr	r3, [pc, #8]	@ (8010600 <raise+0xc>)
 80105f6:	4601      	mov	r1, r0
 80105f8:	6818      	ldr	r0, [r3, #0]
 80105fa:	f7ff bfd3 	b.w	80105a4 <_raise_r>
 80105fe:	bf00      	nop
 8010600:	20000060 	.word	0x20000060

08010604 <_kill_r>:
 8010604:	b538      	push	{r3, r4, r5, lr}
 8010606:	4d07      	ldr	r5, [pc, #28]	@ (8010624 <_kill_r+0x20>)
 8010608:	2300      	movs	r3, #0
 801060a:	4604      	mov	r4, r0
 801060c:	4608      	mov	r0, r1
 801060e:	4611      	mov	r1, r2
 8010610:	602b      	str	r3, [r5, #0]
 8010612:	f7f3 ffac 	bl	800456e <_kill>
 8010616:	1c43      	adds	r3, r0, #1
 8010618:	d102      	bne.n	8010620 <_kill_r+0x1c>
 801061a:	682b      	ldr	r3, [r5, #0]
 801061c:	b103      	cbz	r3, 8010620 <_kill_r+0x1c>
 801061e:	6023      	str	r3, [r4, #0]
 8010620:	bd38      	pop	{r3, r4, r5, pc}
 8010622:	bf00      	nop
 8010624:	20000824 	.word	0x20000824

08010628 <_getpid_r>:
 8010628:	f7f3 bf99 	b.w	800455e <_getpid>

0801062c <__swhatbuf_r>:
 801062c:	b570      	push	{r4, r5, r6, lr}
 801062e:	460c      	mov	r4, r1
 8010630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010634:	2900      	cmp	r1, #0
 8010636:	b096      	sub	sp, #88	@ 0x58
 8010638:	4615      	mov	r5, r2
 801063a:	461e      	mov	r6, r3
 801063c:	da0d      	bge.n	801065a <__swhatbuf_r+0x2e>
 801063e:	89a3      	ldrh	r3, [r4, #12]
 8010640:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010644:	f04f 0100 	mov.w	r1, #0
 8010648:	bf14      	ite	ne
 801064a:	2340      	movne	r3, #64	@ 0x40
 801064c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010650:	2000      	movs	r0, #0
 8010652:	6031      	str	r1, [r6, #0]
 8010654:	602b      	str	r3, [r5, #0]
 8010656:	b016      	add	sp, #88	@ 0x58
 8010658:	bd70      	pop	{r4, r5, r6, pc}
 801065a:	466a      	mov	r2, sp
 801065c:	f000 f848 	bl	80106f0 <_fstat_r>
 8010660:	2800      	cmp	r0, #0
 8010662:	dbec      	blt.n	801063e <__swhatbuf_r+0x12>
 8010664:	9901      	ldr	r1, [sp, #4]
 8010666:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801066a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801066e:	4259      	negs	r1, r3
 8010670:	4159      	adcs	r1, r3
 8010672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010676:	e7eb      	b.n	8010650 <__swhatbuf_r+0x24>

08010678 <__smakebuf_r>:
 8010678:	898b      	ldrh	r3, [r1, #12]
 801067a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801067c:	079d      	lsls	r5, r3, #30
 801067e:	4606      	mov	r6, r0
 8010680:	460c      	mov	r4, r1
 8010682:	d507      	bpl.n	8010694 <__smakebuf_r+0x1c>
 8010684:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010688:	6023      	str	r3, [r4, #0]
 801068a:	6123      	str	r3, [r4, #16]
 801068c:	2301      	movs	r3, #1
 801068e:	6163      	str	r3, [r4, #20]
 8010690:	b003      	add	sp, #12
 8010692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010694:	ab01      	add	r3, sp, #4
 8010696:	466a      	mov	r2, sp
 8010698:	f7ff ffc8 	bl	801062c <__swhatbuf_r>
 801069c:	9f00      	ldr	r7, [sp, #0]
 801069e:	4605      	mov	r5, r0
 80106a0:	4639      	mov	r1, r7
 80106a2:	4630      	mov	r0, r6
 80106a4:	f7fd fbcc 	bl	800de40 <_malloc_r>
 80106a8:	b948      	cbnz	r0, 80106be <__smakebuf_r+0x46>
 80106aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106ae:	059a      	lsls	r2, r3, #22
 80106b0:	d4ee      	bmi.n	8010690 <__smakebuf_r+0x18>
 80106b2:	f023 0303 	bic.w	r3, r3, #3
 80106b6:	f043 0302 	orr.w	r3, r3, #2
 80106ba:	81a3      	strh	r3, [r4, #12]
 80106bc:	e7e2      	b.n	8010684 <__smakebuf_r+0xc>
 80106be:	89a3      	ldrh	r3, [r4, #12]
 80106c0:	6020      	str	r0, [r4, #0]
 80106c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106c6:	81a3      	strh	r3, [r4, #12]
 80106c8:	9b01      	ldr	r3, [sp, #4]
 80106ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80106ce:	b15b      	cbz	r3, 80106e8 <__smakebuf_r+0x70>
 80106d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106d4:	4630      	mov	r0, r6
 80106d6:	f000 f81d 	bl	8010714 <_isatty_r>
 80106da:	b128      	cbz	r0, 80106e8 <__smakebuf_r+0x70>
 80106dc:	89a3      	ldrh	r3, [r4, #12]
 80106de:	f023 0303 	bic.w	r3, r3, #3
 80106e2:	f043 0301 	orr.w	r3, r3, #1
 80106e6:	81a3      	strh	r3, [r4, #12]
 80106e8:	89a3      	ldrh	r3, [r4, #12]
 80106ea:	431d      	orrs	r5, r3
 80106ec:	81a5      	strh	r5, [r4, #12]
 80106ee:	e7cf      	b.n	8010690 <__smakebuf_r+0x18>

080106f0 <_fstat_r>:
 80106f0:	b538      	push	{r3, r4, r5, lr}
 80106f2:	4d07      	ldr	r5, [pc, #28]	@ (8010710 <_fstat_r+0x20>)
 80106f4:	2300      	movs	r3, #0
 80106f6:	4604      	mov	r4, r0
 80106f8:	4608      	mov	r0, r1
 80106fa:	4611      	mov	r1, r2
 80106fc:	602b      	str	r3, [r5, #0]
 80106fe:	f7f3 ff96 	bl	800462e <_fstat>
 8010702:	1c43      	adds	r3, r0, #1
 8010704:	d102      	bne.n	801070c <_fstat_r+0x1c>
 8010706:	682b      	ldr	r3, [r5, #0]
 8010708:	b103      	cbz	r3, 801070c <_fstat_r+0x1c>
 801070a:	6023      	str	r3, [r4, #0]
 801070c:	bd38      	pop	{r3, r4, r5, pc}
 801070e:	bf00      	nop
 8010710:	20000824 	.word	0x20000824

08010714 <_isatty_r>:
 8010714:	b538      	push	{r3, r4, r5, lr}
 8010716:	4d06      	ldr	r5, [pc, #24]	@ (8010730 <_isatty_r+0x1c>)
 8010718:	2300      	movs	r3, #0
 801071a:	4604      	mov	r4, r0
 801071c:	4608      	mov	r0, r1
 801071e:	602b      	str	r3, [r5, #0]
 8010720:	f7f3 ff95 	bl	800464e <_isatty>
 8010724:	1c43      	adds	r3, r0, #1
 8010726:	d102      	bne.n	801072e <_isatty_r+0x1a>
 8010728:	682b      	ldr	r3, [r5, #0]
 801072a:	b103      	cbz	r3, 801072e <_isatty_r+0x1a>
 801072c:	6023      	str	r3, [r4, #0]
 801072e:	bd38      	pop	{r3, r4, r5, pc}
 8010730:	20000824 	.word	0x20000824

08010734 <_init>:
 8010734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010736:	bf00      	nop
 8010738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801073a:	bc08      	pop	{r3}
 801073c:	469e      	mov	lr, r3
 801073e:	4770      	bx	lr

08010740 <_fini>:
 8010740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010742:	bf00      	nop
 8010744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010746:	bc08      	pop	{r3}
 8010748:	469e      	mov	lr, r3
 801074a:	4770      	bx	lr
